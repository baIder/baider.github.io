<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Jenkins自动部署前端项目</title>
    <link href="/2024/04/07/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    <url>/2024/04/07/Jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文在服务器上搭建了 Jenkins，实现前端 Vue 项目的自动打包并部署至服务器上。</p><h2 id="通过-docker-安装-Jenkins">通过 docker 安装 Jenkins</h2><p>通过 ssh 连接上局域网服务器 192.168.36.2，在 home 目录下新建了一个 Jenkins 文件夹，后续我们的配置文件就放在其中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将 Jenkins 相关的文件都放在这里</span><br>mkdir jenkins<br>cd jenkins<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建 Jenkins 配置文件存放的地址，并赋予权限</span><br>mkdir jenkins_home<br>chmod -R 777 jenkins_home<br><br>pwd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">/root/jenkins</span><br></code></pre></td></tr></table></figure><p>创建<code>docker-compose.yml</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch docker-compose.yml<br>vim docker-compose.yml<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">jenkins:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">jenkins/jenkins:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">&#x27;jenkins&#x27;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8999:8080&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/root/jenkins/jenkins_home:/var/jenkins_home</span><br></code></pre></td></tr></table></figure><p>Jenkins 启动后会挂在<code>8080</code>端口上，本文笔者将其映射到<code>8999</code>端口，读者可以自行更改。</p><p>关键在于将容器中的<code>/var/jenkins_home</code>目录映射到宿主机的<code>/root/jenkins/jenkins_home</code>目录，这一步相当于将 Jenkins 的所有配置都存放在宿主机而不是容器中，这样做的好处在于，后续容器升级、删除、崩溃等情况下，不需要再重新配置 Jenkins。</p><p>使用<code>:wq</code>保存后可以开始构建了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker compose up -d<br></code></pre></td></tr></table></figure><p>这一步会构建容器并启动，看到如下信息就说明成功了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[+] Running 1/1<br> ✔ Container  Jenkins   Started           1.3s<br></code></pre></td></tr></table></figure><p>查看一下容器是否在运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps<br></code></pre></td></tr></table></figure><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403133238265.png" alt=""></p><p>这个时候通过<code>http://192.168.36.2:8999</code>就可以访问 Jenkins 了。</p><h2 id="Jenkins-初次配置向导">Jenkins 初次配置向导</h2><h4 id="解锁">解锁</h4><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403133538015.png" alt=""></p><p>第一次打开会出现向导，需要填入管理员密码，获取密码有三种方式：</p><ol><li class="lvl-3"><p>通过宿主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /root/jenkins/jenkins_home/secrets/initialAdminPassword<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2bf4ca040f624716befd5ea137b70560</span><br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>通过 docker 进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it jenkins /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入了docker</span><br>jenkins@1c151dfc2482:/$ cat /var/jenkins_home/secrets/initialAdminPassword<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2bf4ca040f624716befd5ea137b70560</span><br></code></pre></td></tr></table></figure><p>与方法一类似，因为目录映射，这两个目录其实是同一个。</p></li><li class="lvl-3"><p>通过查看 docker log</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker logs jenkins</span><br></code></pre></td></tr></table></figure><p>会出现一大串，最后能找到密码：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403134001532.png" alt=""></p></li></ol><p>填入密码，点击继续。</p><h4 id="安装插件">安装插件</h4><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403134122512.png" alt=""></p><p>选择安装推荐插件即可。</p><p>安装插件可能会非常慢，可以选择换源。</p><h4 id="更换-Jenkins-插件源（可选）">更换 Jenkins 插件源（可选）</h4><p>有两种方法：</p><ol><li class="lvl-3"><p>直接输入地址：</p><p><code>http://192.168.36.2:8999/manage/pluginManager/advanced</code>，在<code>Update Site</code>中填入清华源地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/jenkins/u</span>pdates/update-center.json<br></code></pre></td></tr></table></figure><p>点击<code>Submit</code>提交保存，并重启容器。</p></li><li class="lvl-3"><p>直接更改配置文件：</p><p>宿主机中操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /root/jenkins/jenkins_home<br>vim hudson.model.UpdateCenter.xml<br></code></pre></td></tr></table></figure><p>替换其中的地址，然后重启容器即可。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403135010339.png" alt=""></p></li></ol><h4 id="创建用户">创建用户</h4><p>这一步建议用户名不为 admin ，不然会出现奇怪的问题，比如密码登录不上，需要用上一部的初始密码（2bf4ca040f624716befd5ea137b70560）才能登录。</p><p>我这里创建了一个 root 用户（只是名字叫 root，防止用户名太多记不住而已）。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403135909136.png" alt=""></p><p>点击保存并完成。</p><p>实例配置按需调整即可，直接下一步，Jenkins 就准备就绪了。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403140101678.png" alt=""></p><p>至此 Jenkins 安装就算完成了。</p><h2 id="安装插件-2">安装插件</h2><p>笔者是一名前端，因此以前端项目为例。</p><p>前端项目的打包需要 node 环境，打包完成后通过 ssh 部署到服务器上，并且构建结果通过钉钉机器人推送到群里，因此需要三个插件。</p><ol><li class="lvl-3"><p>NodeJS</p></li><li class="lvl-3"><p>Publish Over SSH</p></li><li class="lvl-3"><p>DingTalk（可选）</p></li></ol><p>在 系统管理 -&gt; 插件管理 -&gt; Available plugins 中搜索并安装。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403140852383.png" alt=""></p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403140907525.png" alt=""></p><p>勾选安装后重启，让插件生效。</p><h2 id="插件配置">插件配置</h2><p>我们安装了三个插件，分别进行配置。</p><h3 id="NodeJS">NodeJS</h3><p>这个插件可以在不同的项目中使用不同的 node 环境，例如 A项目 使用 node14，B项目 使用 node20 这样。</p><p>进入 系统管理 -&gt; 全局工具配置 -&gt; NodeJS 安装 （在最下面）</p><p>点击新增：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403142305544.png" alt=""></p><p>默认的这个使用的是 <a href="http://nodejs.org">nodejs.org</a> 的官方源，虽然现在 <a href="http://nodejs.org">nodejs.org</a> 的官方源国内访问也还可以，但为了保险起见，笔者还是换成阿里巴巴源。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403142424488.png" alt=""></p><p>点击红框里的 X 删除当前安装，在点击新增安装，选择 <code>Install from nodejs.org mirror</code>。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403142605321.png" alt=""></p><p>镜像地址填入<code>https://mirrors.aliyun.com/nodejs-release/</code>，版本按需选择，笔者这里选择的是 node20-lts，并且安装了包管理工具 pnpm，如果读者的项目需要别的全局安装的包，也可以写在 <code>Global npm packages to install</code> ，比如 <code>yarn</code>、<code>cnpm</code> 之类的。</p><p>记得起一个别名：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403153355639.png" alt=""></p><p>配置好后点击保存。</p><p>一般来说，在使用 npm 时，需要更改 npm 的源，同样在 Jenkins 中也是可以的。</p><p>安装完 NodeJS 插件后，系统设置中会多一项 <code>Managed files</code></p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403143048480.png" alt=""></p><p>进入后选择左侧的<code>Add a new Config</code>，然后选择 <code>Npm config file</code>，然后点击 <code>Next</code>。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403143327739.png" alt=""></p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403143449389.png" alt=""></p><p>新增一个 <code>NPM Registry</code>，填入阿里巴巴镜像源：<code>http://registry.npmmirror.com</code>。</p><p>至此 NodeJS 相关的配置就完成了。</p><h3 id="SSH-Server">SSH Server</h3><p>打包后需要通过 SSH 部署到服务器上，因此需要先配置好 SSH 服务器。</p><p>打开 系统管理 -&gt; 系统配置 -&gt; Publish over SSH （在最下面）:</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403143805027.png" alt=""></p><p>然后根据实际情况进行填写：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403144201158.png" alt=""></p><table><thead><tr><th>字段</th><th>解释</th></tr></thead><tbody><tr><td>Name</td><td>显示在 Jenkins 中的名称，可随意填写</td></tr><tr><td>Hostname</td><td>服务器地址，ip 或 域名</td></tr><tr><td>Username</td><td>SSH 登录的用户名</td></tr><tr><td>Remote Directory</td><td>SSH 登录后进入的目录，必须是服务器中已经存在的目录，设置好之后所有通过 SSH 上传的文件只能放在这个目录下</td></tr></tbody></table><p>这里笔者使用用户名-密码的方式登录 SSH，如果要通过 SSH Key 的方式的话，需要在字段 <code>Path to key</code> 填入 key 文件的地址，或者直接将 key 的内容填入 <code>Key</code> 字段中:</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403144737759.png" alt=""></p><p>设置好可以通过<code>Test Configuration</code>，测试 SSH 连通性：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403144822057.png" alt=""></p><p>出现 <code>Success</code> 代表 SSH 配置成功。</p><h3 id="钉钉通知（可选）">钉钉通知（可选）</h3><p>如果不需要通过钉钉通知，可以不装 DingTalk 插件，并跳过本节内容。</p><h4 id="钉钉部分设置">钉钉部分设置</h4><p>该功能需要一个钉钉群，并打开钉钉群机器人：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403145500789.png" alt=""></p><p>点击添加机器人，选择自定义：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403145604092.png" alt=""></p><p>这里笔者的安全设置选择了加签：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403145717147.png" alt=""></p><p>将签名保存下来备用。</p><p>点击完成后，出现了钉钉机器人的 Webhook 地址。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403145823192.png" alt=""></p><p>将地址保存下来备用。</p><p>至此钉钉部分的设置就结束了。</p><h4 id="Jenkins-部分">Jenkins 部分</h4><p>打开 系统设置 -&gt; 钉钉 （在最下面的未分类中）:</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403145150439.png" alt=""></p><p>根据需要配置通知时机：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403145231249.png" alt=""></p><p>然后点击机器人-新增：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403145303034.png" alt=""></p><p>将刚刚的钉钉机器人的签名和 Webhook 地址填入对应的地方，并点击测试：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403150049799.png" alt=""></p><p>此时钉钉机器人也在群中发了消息：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403150138516.png" alt=""></p><p>至此钉钉机器人配置完毕。</p><h2 id="创建任务（job）">创建任务（job）</h2><p>本文中，笔者将以存储在 Git 仓库中的项目为例。</p><h3 id="Github-项目">Github 项目</h3><p><strong>注意，如果想让 Github 项目全自动构建的话，需要你的 Jenkins 能被公网访问到，例如部署在云服务器上，像笔者这样部署在本地局域网中，是无法实现“提交代码 -&gt; 自动构建 -&gt; 自动部署”的，只能实现“提交代码 -&gt; 手动点击开始构建 -&gt; 自动部署”</strong></p><p>如果在 Jenkins 新手向导里选择了 安装推荐插件，那么现在就不需要额外安装 Github 相关的插件了，否则的话需要手动安装 Github 相关的插件：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403151242880.png" alt=""></p><h4 id="创建项目">创建项目</h4><p>选择 Dashboard -&gt; 新建任务：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403151424735.png" alt=""></p><p>选择<code>构建一个自由风格的软件项目</code>，点击确定。</p><h4 id="General">General</h4><p>这部分可以添加钉钉机器人：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403151545166.png" alt=""></p><h4 id="源码管理">源码管理</h4><p>这里选择 Git：</p><p>输入仓库地址：<code>https://github.com/baIder/homepage.git</code></p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403151822101.png" alt=""></p><p>由于笔者这是一个私有仓库，因此会报错。</p><p>在下面的<code>Credentials</code>中，添加一个。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403151941812.png" alt=""></p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403152135370.png" alt=""></p><p><strong>注意，这里的用户名是 Github 用户名，但是密码不是你的 Github 密码，而是你的 Github Access Token！！！</strong></p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403152324115.png" alt=""></p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403152429183.png" alt=""></p><p>可以在这里创建 Token，需要勾选 <code>admin:repo_hook</code> 、<code>repo</code> 权限。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403152535951.png" alt=""></p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403152729685.png" alt=""></p><p>这里的报错是网络问题，连接 Github 懂得都懂。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403152824725.png" alt=""></p><p>分支可以根据实际情况选择。</p><h4 id="构建触发器">构建触发器</h4><p>勾选<code>GitHub hook trigger for GITScm polling</code>，这样在 Git 仓库产生提交时，就会触发构建，属于是真正的核心。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403153134664.png" alt=""></p><h4 id="构建环境">构建环境</h4><p>勾选 <code>Provide Node &amp; npm bin/ folder to Path</code></p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403153444910.png" alt=""></p><h4 id="Build-Steps">Build Steps</h4><p>到这里，可以理解为 Jenkins 已经将仓库克隆到本地，并且已经安装好了<code>node</code>、<code>npm</code>、<code>pnpm</code>，接下来就是执行命令：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403153625159.png" alt=""></p><p>我们需要执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br>pnpm -v<br><br>rm -rf node_modules<br>rm -rf dist<br><br>pnpm install<br>pnpm build<br></code></pre></td></tr></table></figure><p>这里的<code>pnpm build</code>需要按情况更换为<code>package.json</code>中设定的命令。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403153850007.png" alt=""></p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403153750787.png" alt=""></p><h4 id="构建后操作">构建后操作</h4><p>经过所有的流程到这里，项目应该已经打包在<code>dist</code>目录下了。现在可以通过 SSH 将打包好的产物上传到服务器上了：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403154044658.png" alt=""></p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403155757484.png" alt=""></p><p>这里的 <code>Source files</code> 字段一定要写成<code>dist/**/**</code>，如果写成<code>dist/*</code>，则只会将第一层的文件上传。</p><p><code>Remove prefix</code> 需要填写，否则会将<code>dist</code>这个目录也上传到服务器上。</p><p><code>Remote directory</code> 是相对于配置 SSH Server 时的 <code>Remote directory</code> 的，本例中就是 <code>/data/sites/homepage</code> 。</p><p><code>Exec command</code> 是文件上传后执行的命令，可以是任何命令，可以是让nginx有权限访问这些数据，重启nginx等等，根据服务器实际情况更改。</p><blockquote><p>当然也可以在 <code>Build Steps</code> 中 build 完成后将 dist 目录打包，然后在通过 SSH 将压缩包上传到服务器，然后在 <code>Exec command</code> 中解压。</p></blockquote><p>至此所有的配置已经完成，保存。</p><h4 id="测试">测试</h4><p>点击左侧的 立即构建：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403154858929.png" alt=""></p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403154950197.png" alt=""></p><p>第一次构建会比较慢，因为需要下载node，安装依赖等等，可以从控制台看到，命令都如期执行了：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403155359524.png" alt=""></p><p>构建成功，钉钉机器人也提示了（因为 Github 访问失败的原因，多试了几次）：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403155855959.png" alt=""></p><p>笔者已经配置好了nginx，因此可以直接访问网页，查看效果：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403160008179.png" alt=""></p><h4 id="通过-Git-提交触发构建">通过 Git 提交触发构建</h4><p>目前虽然构建成功了，但是需要手动点击构建，接下来实现如何将代码提交 Git 后自动触发构建。</p><p>打开仓库设置 -&gt; Webhooks 添加一个：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403160353025.png" alt=""></p><p>这里的 <code>Payload URL</code> 就是 Jenkins 地址 + <code>/github-webhook</code>，例如笔者的就如图所示。</p><p>但是由于笔者的 Jenkins 部署在本地局域网，因此是不行的，Github 肯定是无法访问到笔者的局域网的，有公网地址的读者可以试试，在笔者的阿里云服务器上是没有问题的。所以目前如果是 Github 项目的话，笔者需要提交代码后手动点击 立即构建：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403161026497.png" alt=""></p><h3 id="Gitlab-项目">Gitlab 项目</h3><p>实际上笔者所在公司是在局域网中部署了 Gitlab 的，因此针对 Gitlab 项目的自动化才是核心。</p><p>安装 Gitlab 插件：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403161442736.png" alt=""></p><p>安装完毕后重启 Jenkins。</p><h4 id="获取-Gitlab-token">获取 Gitlab token</h4><p>与 Github 的流程类似，也需要在 Gitlab 中创建一个 token：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403161807711.png" alt=""></p><p>创建好之后保存 token 备用。</p><h4 id="在-Jenkins-中配置-Gitlab">在 Jenkins 中配置 Gitlab</h4><p>打开 Jenkins -&gt; 系统管理 -&gt; 系统配置 -&gt; Gitlab</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403162301361.png" alt=""></p><p>这里需要新建一个<code>Credentials</code>，点击下方的添加：</p><p>类型选择<code>GitLab API token</code>，将刚刚保存的 token 填入到 <code>API token</code> 字段中。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403162144399.png" alt=""></p><p>点击<code>Test Connection</code>：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403162651637.png" alt=""></p><p>出现<code>Success</code>说明配置成功。</p><h4 id="创建项目-2">创建项目</h4><p>大多数过程与 Github 项目雷同。</p><h5 id="General-2">General</h5><p>会多出一个选项，选择刚刚添加的：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403163406501.png" alt=""></p><h5 id="源码管理-2">源码管理</h5><p>Git 仓库地址填 Gitlab 仓库地址，同样会报错，添加一个<code>Credentials</code>便可解决：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403163538105.png" alt=""></p><p>用户名密码填登录 Gitlab 的用户名密码即可。</p><h5 id="构建触发器-2">构建触发器</h5><p>按需选择触发条件，这里笔者仅选择了提交代码：</p><p>这里红框中的 url 需要记下，后面要用。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403164252265.png" alt=""></p><h4 id="其他配置">其他配置</h4><p>与 Github 项目相同。</p><h4 id="测试构建">测试构建</h4><p>点击立即构建，查看是否能构建成功：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403163945821.png" alt=""></p><p>构建成功：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403164002293.png" alt=""></p><h4 id="提交代码自动构建">提交代码自动构建</h4><p>进入 Gitlab 仓库 -&gt; 设置 -&gt; 集成：</p><p>这里的 url 填入刚刚 Jenkins 构建触发器 中红框内的 url 地址。</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403164203308.png" alt=""></p><p>看情况是否开启 SSL verification。</p><p>点击 Add webhook：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403164449921.png" alt=""></p><p>测试一下：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403164513668.png" alt=""></p><p>可以看到 Jenkins 那边已经开始构建了：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403164551282.png" alt=""></p><p>构建成功：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403164606737.png" alt=""></p><h4 id="测试-Git-提交触发构建">测试 Git 提交触发构建</h4><p>目前页面：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403164712339.png" alt=""></p><p>我们将<code>v2.0-f</code>改成<code>v2.0-g</code>：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403164817371.png" alt=""></p><p>提交代码，Jenkins 开始了自动构建：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403164852625.png" alt=""></p><p>构建成功，页面也发生了变化：</p><p><img src="https://img.bald3r.wang/img/2024-04-03-image-20240403164912343.png" alt=""></p><p>至此，Gitlab 提交代码后自动打包并部署至服务器的流水线就完成了。</p><h2 id="后记">后记</h2><p>本文实现了从提交代码到部署上线的自动化工作流，适合小公司的小型项目或自己的演示项目，大公司一定会有更规范更细节的流程，笔者也是从实际需求出发，希望本文能帮助到各位，由于笔者也是第一次使用 Jenkins，如有不足或错误之处，请读者批评指正。</p>]]></content>
    
    
    <categories>
      
      <category>前端工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序构建 npm 的坑</title>
    <link href="/2024/01/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%9E%84%E5%BB%BA-npm-%E7%9A%84%E5%9D%91/"/>
    <url>/2024/01/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%9E%84%E5%BB%BA-npm-%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1>微信小程序构建 npm 的坑</h1><h2 id="前言">前言</h2><p>开发微信小程序时想使用 Vant Weapp，跟着文档构建 npm 一直失败，记录一下成功构建的步骤。</p><h2 id="环境">环境</h2><p>系统：MacOS 14.2.1 (23C71)</p><p>微信开发者工具：Nightly 1.06.2401232</p><p>Node：v20.9.0</p><p>npm：10.1.0</p><p>模板：官方 TS + Sass - 基础模板</p><h2 id="初始化环境">初始化环境</h2><p>使用官方模板初始化环境：</p><p><img src="https://img.bald3r.wang/img/2024-01-30-image-20240130104506757.png" alt=""></p><p>由于笔者使用的是 TS ，因此初始化完成后可以看到已经存在<code>package.json</code>文件，其中安装了微信 api 的 TS 类型声明文件包：</p><p><img src="https://img.bald3r.wang/img/2024-01-30-image-20240130104705100.png" alt=""></p><p>（初始化的 name 居然是 miniprogram-ts-less-quickstart ，笔者明明选的是 sass ，真是粗心啊）</p><h2 id="安装-Vant">安装 Vant</h2><p>根据 <a href="https://youzan.github.io/vant-weapp/#/quickstart">Vant Weapp</a> 的文档安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add @vant/weapp --production<br></code></pre></td></tr></table></figure><p><img src="https://img.bald3r.wang/img/2024-01-30-image-20240130105016050.png" alt=""></p><p>已经成功安装，出现了<code>node_modules</code>文件夹。</p><h2 id="构建-npm">构建 npm</h2><p>根据 <a href="https://youzan.github.io/vant-weapp/#/quickstart%23bu-zou-san-xiu-gai-project.config.json">Vant Weapp</a> 的文档中的步骤三修改 <code>project.config.json</code>:</p><p>笔者的微信开发者工具应该算是新版，因此根据文档：</p><blockquote><p>注意： 由于目前新版开发者工具创建的小程序目录文件结构问题，npm构建的文件目录为miniprogram_npm，并且开发工具会默认在当前目录下创建miniprogram_npm的文件名，所以新版本的miniprogramNpmDistDir配置为’./'即可</p></blockquote><p><img src="https://img.bald3r.wang/img/2024-01-30-image-20240130105448172.png" alt=""></p><p>构建 npm ：</p><p><img src="https://img.bald3r.wang/img/2024-01-30-image-20240130105621453.png" alt=""></p><p>然后提示错误：</p><p><img src="https://img.bald3r.wang/img/2024-01-30-image-20240130105641749.png" alt=""></p><p>这时候笔者摸不着头脑了已经，经过一番冲浪，看到了这个<a href="https://mp.weixin.qq.com/s/zy7ZiuGxNiCfEsguhmOBIg">文章</a>，原来是要重新打开项目…</p><p>重新打开项目（退出编辑器重新打开也可以），构建 npm 成功：</p><p><img src="https://img.bald3r.wang/img/2024-01-30-image-20240130110126499.png" alt=""></p><p>出现了<code>miniprogram_npm</code>目录。</p><h2 id="测试">测试</h2><p>笔者在 index 页面中放置一个 <code>van-button</code> 测试一下：</p><p><img src="https://img.bald3r.wang/img/2024-01-30-image-20240130110528496.png" alt=""></p><p>分析报错信息，是因为开发者工具找组件的位置不对：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/Users/</span>allen<span class="hljs-regexp">/code/</span>demos<span class="hljs-regexp">/weapp-demo/mi</span>niprogram<span class="hljs-regexp">/pages/i</span>ndex<span class="hljs-regexp">/@vant/</span>weapp<span class="hljs-regexp">/button/i</span>ndex <br><span class="hljs-regexp">/Users/</span>allen<span class="hljs-regexp">/code/</span>demos<span class="hljs-regexp">/weapp-demo/mi</span>niprogram<span class="hljs-regexp">/pages/i</span>ndex<span class="hljs-regexp">/@vant/</span>weapp<span class="hljs-regexp">/button/i</span>ndex/index <br><span class="hljs-regexp">/Users/</span>allen<span class="hljs-regexp">/code/</span>demos<span class="hljs-regexp">/weapp-demo/mi</span>niprogram<span class="hljs-regexp">/pages/i</span>ndex<span class="hljs-regexp">/miniprogram_npm/</span>@vant<span class="hljs-regexp">/weapp/</span>button/index<br><span class="hljs-regexp">/Users/</span>allen<span class="hljs-regexp">/code/</span>demos<span class="hljs-regexp">/weapp-demo/mi</span>niprogram<span class="hljs-regexp">/pages/i</span>ndex<span class="hljs-regexp">/miniprogram_npm/</span>@vant<span class="hljs-regexp">/weapp/</span>button<span class="hljs-regexp">/index/i</span>ndex<br><span class="hljs-regexp">/Users/</span>allen<span class="hljs-regexp">/code/</span>demos<span class="hljs-regexp">/weapp-demo/mi</span>niprogram<span class="hljs-regexp">/pages/mi</span>niprogram_npm<span class="hljs-regexp">/@vant/</span>weapp<span class="hljs-regexp">/button/i</span>ndex<br><span class="hljs-regexp">/Users/</span>allen<span class="hljs-regexp">/code/</span>demos<span class="hljs-regexp">/weapp-demo/mi</span>niprogram<span class="hljs-regexp">/pages/mi</span>niprogram_npm<span class="hljs-regexp">/@vant/</span>weapp<span class="hljs-regexp">/button/i</span>ndex/index<br><span class="hljs-regexp">/Users/</span>allen<span class="hljs-regexp">/code/</span>demos<span class="hljs-regexp">/weapp-demo/mi</span>niprogram<span class="hljs-regexp">/miniprogram_npm/</span>@vant<span class="hljs-regexp">/weapp/</span>button/index<br><span class="hljs-regexp">/Users/</span>allen<span class="hljs-regexp">/code/</span>demos<span class="hljs-regexp">/weapp-demo/mi</span>niprogram<span class="hljs-regexp">/miniprogram_npm/</span>@vant<span class="hljs-regexp">/weapp/</span>button<span class="hljs-regexp">/index/i</span>ndex<br></code></pre></td></tr></table></figure><p>而包安装位置是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/Users/</span>allen<span class="hljs-regexp">/code/</span>demos<span class="hljs-regexp">/weapp-demo/mi</span>niprogram_npm/@vant<br></code></pre></td></tr></table></figure><p>因此还是路径配置的问题，npm 构建的输出目录，并不在开发者工具的查找范围内。</p><p>找到<code>project.config.json</code>，进行修改：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  ...<span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  ...<span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;packNpmRelationList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;packageJsonPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./package.json&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;miniprogramNpmDistDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./miniprogram&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>...<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>然后重新构建 npm：</p><p><img src="https://img.bald3r.wang/img/2024-01-30-image-20240130111721122.png" alt=""></p><p>可以看到，在<code>miniprogram</code>目录下新生成了<code>miniprogram_npm</code>目录，删除根目录下多余的<code>miniprogram_npm</code>目录。</p><p><img src="https://img.bald3r.wang/img/2024-01-30-image-20240130111835577.png" alt=""></p><p>可以看到<code>van-button</code>组件已经成功出现了。</p><h2 id="总结">总结</h2><ol><li class="lvl-3"><p>修改<code>project.config.json</code>后，如果构建 npm 失败，重新打开项目再试。</p></li><li class="lvl-3"><p>Vant Weapp 文档快速上手步骤三中有一个注意，目前版本的开发者工具不需要根据注意进行修改。</p></li></ol><p>如果不当之处，欢迎批评斧正。</p>]]></content>
    
    
    <categories>
      
      <category>微信小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>three.js 截图是空白？看看这里！</title>
    <link href="/2023/09/28/three-js-%E6%88%AA%E5%9B%BE%E6%98%AF%E7%A9%BA%E7%99%BD%EF%BC%9F%E7%9C%8B%E7%9C%8B%E8%BF%99%E9%87%8C%EF%BC%81/"/>
    <url>/2023/09/28/three-js-%E6%88%AA%E5%9B%BE%E6%98%AF%E7%A9%BA%E7%99%BD%EF%BC%9F%E7%9C%8B%E7%9C%8B%E8%BF%99%E9%87%8C%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h1>three.js 截图是空白？看看这里！</h1><h2 id="前言">前言</h2><p>目前公司有一个需求，在 three.js 中展示模型，并截图作为模型的预览图。由于 three.js 本身是通过 canvas 画出来的，而 canvas 标签本身就可以输出成图片，本以为是一个鸽鸽下蛋这么简单的事情，但是还是有一些细节在的，于是记录下来，和大家分享一下。</p><h3 id="环境">环境</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>node</td><td>v18.16.1</td></tr><tr><td>Microsoft Edge</td><td>116.0.1938.62</td></tr><tr><td>three.js</td><td>0.156.1</td></tr></tbody></table><h2 id="需要实现的效果">需要实现的效果</h2><p>点击页面上的按钮，将three.js当前的画面截取下来，显示在img标签中。</p><h2 id="搭建基础框架">搭建基础框架</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">THREE</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;three&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">GLTFLoader</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;three/examples/jsm/loaders/GLTFLoader.js&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">OrbitControls</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;three/examples/jsm/controls/OrbitControls.js&quot;</span>;<br><br><span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;canvas.webgl&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLCanvasElement</span>;<br><br><span class="hljs-keyword">const</span> scene = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Scene</span>();<br><br><span class="hljs-keyword">const</span> renderer = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">WebGLRenderer</span>(&#123;<br>  <span class="hljs-attr">canvas</span>: canvas,<br>&#125;);<br>renderer.<span class="hljs-title function_">setSize</span>(<span class="hljs-number">300</span>, <span class="hljs-number">300</span>, <span class="hljs-literal">false</span>);<br><br><span class="hljs-keyword">const</span> camera = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">PerspectiveCamera</span>(<span class="hljs-number">75</span>, <span class="hljs-number">300</span> / <span class="hljs-number">300</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">1000</span>);<br>camera.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">3</span>;<br>scene.<span class="hljs-title function_">add</span>(camera);<br><br><span class="hljs-keyword">const</span> light = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">AmbientLight</span>(<span class="hljs-number">0xffffff</span>, <span class="hljs-number">2</span>);<br>scene.<span class="hljs-title function_">add</span>(light);<br><br><span class="hljs-keyword">const</span> directionLight = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">DirectionalLight</span>(<span class="hljs-number">0xffffff</span>, <span class="hljs-number">2</span>);<br>directionLight.<span class="hljs-property">position</span>.<span class="hljs-title function_">set</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>scene.<span class="hljs-title function_">add</span>(directionLight);<br><br><span class="hljs-keyword">const</span> controls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrbitControls</span>(camera, canvas);<br>controls.<span class="hljs-property">enableDamping</span> = <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">const</span> gltfLoader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GLTFLoader</span>();<br>gltfLoader.<span class="hljs-title function_">load</span>(<span class="hljs-string">&quot;/DamagedHelmet.glb&quot;</span>, <span class="hljs-function">(<span class="hljs-params">gltf</span>) =&gt;</span> &#123;<br>  scene.<span class="hljs-title function_">add</span>(gltf.<span class="hljs-property">scene</span>);<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">tick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">requestAnimationFrame</span>(tick);<br>  controls.<span class="hljs-title function_">update</span>();<br>  renderer.<span class="hljs-title function_">render</span>(scene, camera);<br>&#125;;<br><br><span class="hljs-title function_">tick</span>();<br><br></code></pre></td></tr></table></figure><p>css代码不做展示，最终实现了以下效果：</p><p><img src="https://img.bald3r.wang/img/2023-09-28-202309281410262.png" alt=""></p><h2 id="实现截图功能">实现截图功能</h2><p>这里所说的截图功能，实际是将canvas画布上的内容保存下来，可以通过官方的API获得一个包含图片展示的data URI：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL">HTMLCanvasElement.toDataURL() - Web API 接口参考 | MDN (mozilla.org)</a>，然后将<code>img</code>标签的<code>src</code>指向它就可以了。</p><p>实现：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> elButton = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;button&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLButtonElement</span>;<br><span class="hljs-keyword">const</span> elImg = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;img&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLImageElement</span>;<br>elButton.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> url = canvas.<span class="hljs-title function_">toDataURL</span>();<br>  elImg.<span class="hljs-property">src</span> = url;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://img.bald3r.wang/img/2023-09-28-Kapture%202023-09-28%20at%2014.17.57.gif" alt=""></p><p>可以看到，<code>img</code>标签的内容发生了变化，但是图片并没有正常显示。</p><h2 id="preserveDrawingBuffer属性"><code>preserveDrawingBuffer</code>属性</h2><p>通过three.js的文档<a href="https://threejs.org/docs/index.html?q=renderer#api/zh/renderers/WebGLRenderer">WebGLRenderer – three.js docs (threejs.org)</a>可知，在构造<code>WebGLRenderer</code>时，可传入的参数中又一个<code>preserveDrawingBuffer</code>的属性，three.js对其的解释为：</p><blockquote><p>preserveDrawingBuffer -是否保留缓（存）直到手动清除或被覆盖。 默认<strong>false</strong>.</p></blockquote><p>也就是说，出于性能考虑，three.js默认是会清除canvas画布上的缓存内容的，那么我们截取的图像自然就是空白的，那我们开启这个选项：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts">...<br><br><span class="hljs-keyword">const</span> renderer = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">WebGLRenderer</span>(&#123;<br>  <span class="hljs-attr">canvas</span>: canvas,<br>  <span class="hljs-attr">preserveDrawingBuffer</span>: <span class="hljs-literal">true</span>,<br>&#125;);<br><br>...<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://img.bald3r.wang/img/2023-09-28-Kapture%202023-09-28%20at%2014.25.23.gif" alt=""></p><p>可以看到，已经能正常的截取画面了。</p><h2 id="优化">优化</h2><p>three.js 出于性能方面的考虑，默认将<code>preserveDrawingBuffer</code>选项设置为<code>false</code>，说明打开这个选项会造成较大的性能开销。有代码洁癖的诸位看官肯定会忍不住说，不利于性能的代码我们不写！因此，有什么好办法能在关闭这个选项的前提下，也能截取画面呢？</p><p>既然three.js会一直清除缓存，那我在截图前，让它重新画一次不就行了？</p><p>代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts">...<br><br><span class="hljs-keyword">const</span> renderer = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">WebGLRenderer</span>(&#123;<br>  <span class="hljs-attr">canvas</span>: canvas,<br>&#125;);<br>renderer.<span class="hljs-title function_">setSize</span>(<span class="hljs-number">300</span>, <span class="hljs-number">300</span>, <span class="hljs-literal">false</span>);<br><br>...<br><br>elButton.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><br>  renderer.<span class="hljs-title function_">render</span>(scene, camera);     <span class="hljs-comment">//关键代码</span><br>  <br>  <span class="hljs-keyword">const</span> url = canvas.<span class="hljs-title function_">toDataURL</span>();<br>  elImg.<span class="hljs-property">src</span> = url;<br>&#125;);<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://img.bald3r.wang/img/2023-09-28-Kapture%202023-09-28%20at%2014.31.03.gif" alt=""></p><p>可以看到，同样实现了截图的功能。</p><h2 id="后记">后记</h2><p>没想到three.js截图还有这么些细节在里面，笔者也只是抛砖引玉，如果各位看官有更好的解决方式，欢迎交流。</p>]]></content>
    
    
    <categories>
      
      <category>WebGL</category>
      
      <category>three.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGL</tag>
      
      <tag>three.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NestJS 入门（五）保存 Log 为文件</title>
    <link href="/2023/08/01/NestJS-%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89%E4%BF%9D%E5%AD%98-Log-%E4%B8%BA%E6%96%87%E4%BB%B6/"/>
    <url>/2023/08/01/NestJS-%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89%E4%BF%9D%E5%AD%98-Log-%E4%B8%BA%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1>NestJS 入门（五）保存 Log 为文件</h1><h2 id="前言">前言</h2><p>到这里，我们的后台项目的骨架就基本完成了，在最后我们需要给项目增加一点点“记忆”——将项目中的部分 log 信息保存到本地文件中。本章主要使用<code>winston</code>来将日志记录到文件中。</p><p>一般来说，为了方便排查问题，log 中会记录请求的信息，报错的信息，和服务器的返回信息，分别对应了 NestJS 中的中间件、过滤器和拦截器，因此我们主要改造这三个部分。</p><h2 id="安装-winston">安装 <code>winston</code></h2><p><code>winston</code>是 Node.js 中非常流行的日志记录库，可以通过配置将日志记录到控制台、文件、数据库等不同目标中。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm install --save nest-winston winston winston-daily-rotate-file<br></code></pre></td></tr></table></figure><p>我们安装了三个包，一个是主角<code>winston</code>，一个是<code>nest-winston</code>，这个包将<code>winston</code>封装成了 NestJS 的 Module，就不需要我们二次封装了，还有一个是<code>winston-daily-rotate-file</code>，这个包主要是用来做日志文件的归档的，可以自动将日志按时间或日期等规则进行分割，避免日志都记录在一个巨大的文件中。</p><h2 id="在项目中引入-winston">在项目中引入 <code>winston</code></h2><p>类似与 TypeORM 或 Redis，我们也需要在<code>app.module.ts</code>中注册<code>winston</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// app.module.ts</span><br><br>...<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">WinstonModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nest-winston&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;winston-daily-rotate-file&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; transports &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;winston&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    ...<br>    <span class="hljs-title class_">WinstonModule</span>.<span class="hljs-title function_">forRoot</span>(&#123;<br>      <span class="hljs-attr">transports</span>: [<br>        <span class="hljs-keyword">new</span> transports.<span class="hljs-title class_">DailyRotateFile</span>(&#123;<br>          <span class="hljs-attr">dirname</span>: <span class="hljs-string">`logs`</span>,<br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">`%DATE%.log`</span>,<br>          <span class="hljs-attr">datePattern</span>: <span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>,<br>          <span class="hljs-attr">zippedArchive</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">maxSize</span>: <span class="hljs-string">&#x27;20m&#x27;</span>,<br>          <span class="hljs-attr">maxFiles</span>: <span class="hljs-string">&#x27;14d&#x27;</span>,<br>        &#125;),<br>      ],<br>    &#125;),<br>  ],<br>  ...<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;<br><br></code></pre></td></tr></table></figure><p>这里我们将 log 文件命名为<code>%DATE%.log</code>，并存储在根目录的<code>logs</code>中。<code>%DATE%</code>最终会被<code>datePattern</code>的值替换，也就是说，最后 log 文件会以<code>logs/2023-08-01.log</code>的形式保存，可以根据自己的需要自定义。</p><p><code>zippedArchive</code>表示是否需要用 gzip 方式压缩文件，默认为<code>false</code>；</p><p><code>maxSize</code>和<code>maxFiles</code>很好理解，设置单个日志文件最大为 20MB，日志文件最长保存 14 天。</p><p>此时保存并重启项目，可以看到<code>logs</code>目录已经生成了。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── README<span class="hljs-selector-class">.md</span><br>├── config<br>├── dist<br>├── logs<span class="hljs-comment">//在这里</span><br>├── nest-cli<span class="hljs-selector-class">.json</span><br>├── node_modules<br>├── package<span class="hljs-selector-class">.json</span><br>├── pnpm-lock<span class="hljs-selector-class">.yaml</span><br>├── <span class="hljs-attribute">src</span><br>├── test<br>├── tsconfig<span class="hljs-selector-class">.build</span><span class="hljs-selector-class">.json</span><br>└── tsconfig<span class="hljs-selector-class">.json</span><br><br><span class="hljs-number">7</span> directories, <span class="hljs-number">6</span> files<br></code></pre></td></tr></table></figure><h2 id="添加中间件">添加中间件</h2><p>我们需要记录每个请求的信息，比如请求的 IP，请求的 URL 等，我们可以通过中间件来实现这个功能。</p><p>新建一个中间件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nest g mi logger global/middleware<br></code></pre></td></tr></table></figure><p>编写我们的逻辑：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// /src/global/middleware/logger.middleware.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Inject</span>, <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">NestMiddleware</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NextFunction</span>, <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">WINSTON_MODULE_PROVIDER</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nest-winston&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Logger</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;winston&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggerMiddleware</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestMiddleware</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-meta">@Inject</span>(WINSTON_MODULE_PROVIDER) <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> logger: Logger,       <span class="hljs-comment">// ①</span></span><br><span class="hljs-params">  </span>) &#123;&#125;<br>  <span class="hljs-title function_">use</span>(<span class="hljs-params">req: Request, res: Response, next: NextFunction</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; method, <span class="hljs-attr">originalUrl</span>: url, body, query, params, ip &#125; = req;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">logger</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;route&#x27;</span>, &#123;<br>      <span class="hljs-attr">req</span>: &#123;<br>        method,<br>        url,<br>        body,<br>        query,<br>        params,<br>        ip,<br>      &#125;,<br>    &#125;);<br>    <span class="hljs-title function_">next</span>();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里我们从请求中取出了<code>method, originalUrl, body, query, params, ip</code>并记录在日志中，各位读者也可以根据自己的需要进行修改。</p><p><strong>注意</strong>：在①处，<code>@Inject()</code>中别忘记传入<code>WINSTON_MODULE_PROVIDER</code>，同时后面的<code>Logger</code>也要引入<code>winston</code>包中的，因为 NestJS 自身也会导出一个<code>Logger</code>，注意区分。</p><p>创建了中间件之后，我们需要在<code>app.module.ts</code>中应用一下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// app.module.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MiddlewareConsumer</span>, <span class="hljs-title class_">Module</span>, <span class="hljs-title class_">NestModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LoggerMiddleware</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./global/middleware/logger/logger.middleware&#x27;</span>;<br>...<br>...<br>...<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestModule</span> &#123;<br>  <span class="hljs-title function_">configure</span>(<span class="hljs-params">consumer: MiddlewareConsumer</span>) &#123;<br>    consumer.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">LoggerMiddleware</span>).<span class="hljs-title function_">forRoutes</span>(<span class="hljs-string">&#x27;*&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们将中间件<code>LoggerMiddleware</code>应用在<code>*</code>即所有路由上。</p><p>我们随便请求一个接口，然后打开<code>logs</code>目录下 log 文件查看：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// logs/2023-08-01.log</span><br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;route&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;wang&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;POST&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>没有问题。</p><h2 id="改造错误过滤器">改造错误过滤器</h2><p>废话少说，直接开改：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// /src/global/filter/http-exception.filter.ts</span><br><br><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">ArgumentsHost</span>,<br>  <span class="hljs-title class_">Catch</span>,<br>  <span class="hljs-title class_">ExceptionFilter</span>,<br>  <span class="hljs-title class_">HttpException</span>,<br>  <span class="hljs-title class_">Inject</span>,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Response</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">WINSTON_MODULE_PROVIDER</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nest-winston&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Logger</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;winston&#x27;</span>;<br><br><span class="hljs-meta">@Catch</span>(<span class="hljs-title class_">HttpException</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpExceptionFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ExceptionFilter</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-meta">@Inject</span>(WINSTON_MODULE_PROVIDER) <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> logger: Logger,</span><br><span class="hljs-params">  </span>) &#123;&#125;<br>  <span class="hljs-keyword">catch</span>(<span class="hljs-attr">exception</span>: <span class="hljs-title class_">HttpException</span>, <span class="hljs-attr">host</span>: <span class="hljs-title class_">ArgumentsHost</span>) &#123;<br>    ...<br><br>    <span class="hljs-keyword">const</span> &#123;<br>      method,<br>      <span class="hljs-attr">originalUrl</span>: url,<br>      body,<br>      query,<br>      params,<br>      ip,<br>    &#125; = ctx.<span class="hljs-title function_">getRequest</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">logger</span>.<span class="hljs-title function_">error</span>(message, &#123;<br>      status,<br>      <span class="hljs-attr">req</span>: &#123; method, <span class="hljs-attr">originalUrl</span>: url, body, query, params, ip &#125;,<br>    &#125;);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>从 22 行到 29 行的代码简单且重复，因此抽离出来封装成一个函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// /src/global/helper/getInfoFromReq.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Request</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getInfoFromReq</span> = (<span class="hljs-params">req: Request</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; method, <span class="hljs-attr">originalUrl</span>: url, body, query, params, ip &#125; = req;<br>  <span class="hljs-keyword">return</span> &#123;<br>    method,<br>    url,<br>    body,<br>    query,<br>    params,<br>    ip,<br>  &#125;;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>然后重新修改错误过滤器：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// /src/global/filter/http-exception.filter.ts</span><br><br><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">ArgumentsHost</span>,<br>  <span class="hljs-title class_">Catch</span>,<br>  <span class="hljs-title class_">ExceptionFilter</span>,<br>  <span class="hljs-title class_">HttpException</span>,<br>  <span class="hljs-title class_">Inject</span>,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Response</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">WINSTON_MODULE_PROVIDER</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nest-winston&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Logger</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;winston&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; getInfoFromReq &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/global/helper/getInfoFromReq&#x27;</span>;<br><br><span class="hljs-meta">@Catch</span>(<span class="hljs-title class_">HttpException</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpExceptionFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ExceptionFilter</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-meta">@Inject</span>(WINSTON_MODULE_PROVIDER) <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> logger: Logger,</span><br><span class="hljs-params">  </span>) &#123;&#125;<br>  <span class="hljs-keyword">catch</span>(<span class="hljs-attr">exception</span>: <span class="hljs-title class_">HttpException</span>, <span class="hljs-attr">host</span>: <span class="hljs-title class_">ArgumentsHost</span>) &#123;<br>    ...<br><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">logger</span>.<span class="hljs-title function_">error</span>(message, &#123;<br>      status,<br>      <span class="hljs-attr">req</span>: <span class="hljs-title function_">getInfoFromReq</span>(ctx.<span class="hljs-title function_">getRequest</span>()),<br>    &#125;);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>不要忘记中间件中的代码也可以用工具函数<code>getInfoFromReq()</code>进行精简：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// /src/global/middleware/logger.middleware.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Inject</span>, <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">NestMiddleware</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NextFunction</span>, <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">WINSTON_MODULE_PROVIDER</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nest-winston&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; getInfoFromReq &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/global/helper/getInfoFromReq&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Logger</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;winston&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggerMiddleware</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestMiddleware</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-meta">@Inject</span>(WINSTON_MODULE_PROVIDER) <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> logger: Logger,</span><br><span class="hljs-params">  </span>) &#123;&#125;<br>  <span class="hljs-title function_">use</span>(<span class="hljs-params">req: Request, res: Response, next: NextFunction</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">logger</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;route&#x27;</span>, &#123;<br>      <span class="hljs-attr">req</span>: <span class="hljs-title function_">getInfoFromReq</span>(req),<br>    &#125;);<br>    <span class="hljs-title function_">next</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时发现<code>main.ts</code>中引用<code>HttpExceptionFilter</code>的地方报错了：</p><p><img src="https://img.bald3r.wang/img/image-20230801141606690.png" alt=""></p><p>我们删除该行代码，改为在<code>app.module.ts</code>中注册：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// main.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.module&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ValidationPipe</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TransformInterceptor</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./global/interceptor/transform/transform.interceptor&#x27;</span>;<br><span class="hljs-comment">// import &#123; HttpExceptionFilter &#125; from &#x27;./global/filter/http-exception/http-exception.filter&#x27;;</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  app.<span class="hljs-title function_">useGlobalPipes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationPipe</span>());<br>  app.<span class="hljs-title function_">useGlobalInterceptors</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformInterceptor</span>());<br>  <span class="hljs-comment">// app.useGlobalFilters(new HttpExceptionFilter());</span><br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-title function_">bootstrap</span>();<br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// app.module.ts</span><br><br>...<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">APP_FILTER</span>, <span class="hljs-variable constant_">APP_GUARD</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HttpExceptionFilter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./global/filter/http-exception/http-exception.filter&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  ...<br>  <span class="hljs-attr">providers</span>: [<br>    <span class="hljs-title class_">AppService</span>,<br>    &#123;<br>      <span class="hljs-attr">provide</span>: <span class="hljs-variable constant_">APP_GUARD</span>,<br>      <span class="hljs-attr">useClass</span>: <span class="hljs-title class_">JwtAuthGuard</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">provide</span>: <span class="hljs-variable constant_">APP_FILTER</span>,<span class="hljs-comment">// 在这里注册</span><br>      <span class="hljs-attr">useClass</span>: <span class="hljs-title class_">HttpExceptionFilter</span>,<br>    &#125;,<br>  ],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestModule</span> &#123;<br>  <span class="hljs-title function_">configure</span>(<span class="hljs-params">consumer: MiddlewareConsumer</span>) &#123;<br>    consumer.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">LoggerMiddleware</span>).<span class="hljs-title function_">forRoutes</span>(<span class="hljs-string">&#x27;*&#x27;</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request GET <span class="hljs-string">&#x27;http://localhost:3000/user/1&#x27;</span> <br></code></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">401</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;token已过期&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>查看我们的 log：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;route&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;wang&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;POST&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;route&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;GET&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;user/1&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user/1&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;token已过期&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;GET&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user/1&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">401</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可以看到，错误也正确的记录了下来。</p><h2 id="改造响应拦截器">改造响应拦截器</h2><p>废话少说，开改：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// /src/global/interceptor/transform.interceptor.ts</span><br><br><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">CallHandler</span>,<br>  <span class="hljs-title class_">ExecutionContext</span>,<br>  <span class="hljs-title class_">Inject</span>,<br>  <span class="hljs-title class_">Injectable</span>,<br>  <span class="hljs-title class_">NestInterceptor</span>,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">WINSTON_MODULE_PROVIDER</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nest-winston&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Observable</span>, map &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Logger</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;winston&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; getInfoFromReq &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/global/helper/getInfoFromReq&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestInterceptor</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-meta">@Inject</span>(WINSTON_MODULE_PROVIDER) <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> logger: Logger,</span><br><span class="hljs-params">  </span>) &#123;&#125;<br>  <span class="hljs-title function_">intercept</span>(<span class="hljs-attr">context</span>: <span class="hljs-title class_">ExecutionContext</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">CallHandler</span>): <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-built_in">any</span>&gt; &#123;<br>    <span class="hljs-keyword">return</span> next.<span class="hljs-title function_">handle</span>().<span class="hljs-title function_">pipe</span>(<br>      <span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">logger</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;response&#x27;</span>, &#123;<br>          <span class="hljs-attr">responseData</span>: data,<br>          <span class="hljs-attr">req</span>: <span class="hljs-title function_">getInfoFromReq</span>(context.<span class="hljs-title function_">switchToHttp</span>().<span class="hljs-title function_">getRequest</span>()),<br>        &#125;);<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>          <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请求成功&#x27;</span>,<br>          data,<br>        &#125;;<br>      &#125;),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>同样的，我们也要将响应拦截器的注册位置从<code>main.ts</code>转移到<code>app.module.ts</code>中：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// main.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.module&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ValidationPipe</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-comment">// import &#123; TransformInterceptor &#125; from &#x27;./global/interceptor/transform/transform.interceptor&#x27;;</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  app.<span class="hljs-title function_">useGlobalPipes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationPipe</span>());<br>  <span class="hljs-comment">// app.useGlobalInterceptors(new TransformInterceptor());</span><br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-title function_">bootstrap</span>();<br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// app.module.ts</span><br><br>...<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">APP_FILTER</span>, <span class="hljs-variable constant_">APP_GUARD</span>, <span class="hljs-variable constant_">APP_INTERCEPTOR</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TransformInterceptor</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./global/interceptor/transform/transform.interceptor&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  ...<br>  <span class="hljs-attr">providers</span>: [<br>    <span class="hljs-title class_">AppService</span>,<br>    &#123;<br>      <span class="hljs-attr">provide</span>: <span class="hljs-variable constant_">APP_GUARD</span>,<br>      <span class="hljs-attr">useClass</span>: <span class="hljs-title class_">JwtAuthGuard</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">provide</span>: <span class="hljs-variable constant_">APP_FILTER</span>,<br>      <span class="hljs-attr">useClass</span>: <span class="hljs-title class_">HttpExceptionFilter</span>,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">provide</span>: <span class="hljs-variable constant_">APP_INTERCEPTOR</span>,<span class="hljs-comment">// 在这里注册</span><br>      <span class="hljs-attr">useClass</span>: <span class="hljs-title class_">TransformInterceptor</span>,<br>    &#125;,<br>  ],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestModule</span> &#123;<br>  <span class="hljs-title function_">configure</span>(<span class="hljs-params">consumer: MiddlewareConsumer</span>) &#123;<br>    consumer.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">LoggerMiddleware</span>).<span class="hljs-title function_">forRoutes</span>(<span class="hljs-string">&#x27;*&#x27;</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试一下：</p><p>重新请求了登录接口，查看 log：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;route&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;wang&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;POST&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;route&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;GET&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;user/1&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user/1&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;token已过期&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;GET&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user/1&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">401</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;route&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;wang&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;POST&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;response&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;wang&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;POST&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;responseData&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;access_token&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IndhbmciLCJpZCI6MTQsImlhdCI6MTY5MDg3MTE2Nn0.MT5H1Izgh4L9PleNhzfQsVYlVmPcQkxTCpKDnnO2i-s&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Bearer&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可以看到这次请求的信息和响应的信息都符合预期的记录在了文件中。</p><h2 id="美化-log">美化 log</h2><p>现在我们已经可以将一些重要日志记录在本地文件中，但是查看的时候很费劲，一坨一坨的数据辣眼睛，因此笔者决定对日志进行格式化，方便查看。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// app.module.ts</span><br><br>...<br><span class="hljs-keyword">import</span> &#123; format, transports &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;winston&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    ...<br>    <span class="hljs-title class_">WinstonModule</span>.<span class="hljs-title function_">forRoot</span>(&#123;<br>      <span class="hljs-attr">transports</span>: [<br>        <span class="hljs-keyword">new</span> transports.<span class="hljs-title class_">DailyRotateFile</span>(&#123;<br>          <span class="hljs-attr">dirname</span>: <span class="hljs-string">`logs`</span>,<br>          <span class="hljs-attr">filename</span>: <span class="hljs-string">`%DATE%.log`</span>,<br>          <span class="hljs-attr">datePattern</span>: <span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>,<br>          <span class="hljs-attr">zippedArchive</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">maxSize</span>: <span class="hljs-string">&#x27;20m&#x27;</span>,<br>          <span class="hljs-attr">maxFiles</span>: <span class="hljs-string">&#x27;14d&#x27;</span>,<br>          <span class="hljs-attr">format</span>: format.<span class="hljs-title function_">combine</span>(<br>            format.<span class="hljs-title function_">timestamp</span>(&#123;<br>              <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>,<br>            &#125;),<br>            format.<span class="hljs-title function_">printf</span>(<br>              <span class="hljs-function">(<span class="hljs-params">info</span>) =&gt;</span><br>                <span class="hljs-string">`<span class="hljs-subst">$&#123;info.timestamp&#125;</span> [<span class="hljs-subst">$&#123;info.level&#125;</span>] : <span class="hljs-subst">$&#123;info.message&#125;</span> <span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">                  <span class="hljs-built_in">Object</span>.keys(info).length ? <span class="hljs-built_in">JSON</span>.stringify(info, <span class="hljs-literal">null</span>, <span class="hljs-number">2</span>) : <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="hljs-subst"><span class="hljs-string">                &#125;</span>`</span>,<br>            ),<br>          ),<br>        &#125;),<br>      ],<br>    &#125;),<br>  ],<br>  ...<br>&#125;)<br><br>...<br></code></pre></td></tr></table></figure><p><code>winston</code>在配置时可以接受一个<code>format</code>参数，自定义格式，通过<code>winston</code>包中自带的<code>format</code>可以进行很多操作，这里笔者就不展开了，大家可以根据自己的喜好，查阅<a href="https://github.com/winstonjs/winston#formats">文档</a>，进行自定义。</p><p>查看一下效果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;route&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;wang&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;POST&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;route&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;GET&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;user/1&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user/1&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;error&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;token已过期&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;GET&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/user/1&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">401</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;route&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;wang&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;POST&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;0&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;response&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;wang&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;::1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;POST&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/auth/login&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;responseData&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;access_token&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IndhbmciLCJpZCI6MTQsImlhdCI6MTY5MDg3MTE2Nn0.MT5H1Izgh4L9PleNhzfQsVYlVmPcQkxTCpKDnnO2i-s&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Bearer&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">2023</span><span class="hljs-number">-08</span><span class="hljs-number">-01</span> <span class="hljs-number">14</span><span class="hljs-punctuation">:</span><span class="hljs-number">34</span><span class="hljs-punctuation">:</span><span class="hljs-number">43</span> <span class="hljs-punctuation">[</span>info<span class="hljs-punctuation">]</span> <span class="hljs-punctuation">:</span> route <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;POST&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/auth/login&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wang&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;0&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auth/login&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;::1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;route&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-08-01 14:34:43&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-number">2023</span><span class="hljs-number">-08</span><span class="hljs-number">-01</span> <span class="hljs-number">14</span><span class="hljs-punctuation">:</span><span class="hljs-number">34</span><span class="hljs-punctuation">:</span><span class="hljs-number">43</span> <span class="hljs-punctuation">[</span>info<span class="hljs-punctuation">]</span> <span class="hljs-punctuation">:</span> response <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;responseData&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;access_token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IndhbmciLCJpZCI6MTQsImlhdCI6MTY5MDg3MTY4M30.n-17Fz3On6n1UfOKfRMFzBbXfzbfNQt_oiC-1WXzhB4&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bearer&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;req&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;POST&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/auth/login&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wang&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;params&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;::1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;info&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;response&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-08-01 14:34:43&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>这样美化有利有弊，大家可以根据实际情况酌情选择。</p><h2 id="后记">后记</h2><p>本系列文章到这里算是完结了，不论是 NestJS 还是本系列文章中提到的各种工具，都有着非常多的功能，笔者也只是一个初学者，也只是浅尝辄止的进行了学习，并分享给大家，后面笔者也会继续分享其他内容。如果有可以改进的地方，欢迎和我交流，如果有错误，还请大家斧正。</p><p><a href="https://github.com/baIder/nest-demo">Nest学习系列博客代码仓库 (github.com)</a></p><p><a href="https://bald3r.wang/">冷面杀手的个人站 (bald3r.wang)</a></p><p><a href="https://bald3r.wang/tags/NestJS/">NestJS 相关文章</a></p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
      <category>NestJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>NestJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NestJS 上传文件中文名乱码</title>
    <link href="/2023/07/31/NestJS-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E4%B8%AD%E6%96%87%E5%90%8D%E4%B9%B1%E7%A0%81/"/>
    <url>/2023/07/31/NestJS-%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E4%B8%AD%E6%96%87%E5%90%8D%E4%B9%B1%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1>NestJS 上传文件中文名乱码</h1><h2 id="背景">背景</h2><p>在使用 NestJS 写上传接口时，发现通过<code>multipart/form-data</code>上传文件的文件名是中文时，服务器读取到的是乱码，示例如下：</p><p>上传<code>云海.jpg</code>，服务器返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;请求成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;picture&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;extension&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.jpg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;äºæµ·.jpg&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">// 文件名乱码</span><br>            <span class="hljs-attr">&quot;origin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://localhost:3000/static/picture/2023/07/1690774175213.jpg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1831902</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">65</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;mid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;link_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-30T19:29:35.224Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updated_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-30T19:29:35.224Z&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>使用英文名就是正常的，并且，使用 Apifox 测试接口，<strong>也是正常的</strong>。</p><h2 id="环境">环境</h2><ul class="lvl-0"><li class="lvl-2"><p>Node：v18.16.1</p></li><li class="lvl-2"><p>NestJS：10.1.7</p></li></ul><p>使用的 Express 的 Multer 包。</p><h2 id="定位问题">定位问题</h2><p>由于上传文件使用的是 Multer ，因此笔者找到了 Github 上面 Multer 的代码仓库，然后在 Issues 中搜索，发现了类似的情况：</p><p><a href="https://github.com/expressjs/multer/issues/1104">Issue with UTF-8 characters in filename · Issue #1104 · expressjs/multer (github.com)</a></p><p>这个 issue 中提到了另一个包 busboy，Multer 就是通过这个包来解析 FormData 的，原来是这个 busboy 的问题，在该仓库的 Issues 中也能发现有人提了这个问题：</p><p><a href="https://github.com/mscdex/busboy/issues/20">Parsing fails if filename contains UTF-8 characters · Issue #20 · mscdex/busboy (github.com)</a></p><p>busboy 将配置项<code>defParamCharset</code>的默认值从<code>utf8</code>改为了<code>latin1</code>，从而导致了这个问题（居然是一个 patch 更新导致很多人的代码出问题了然后就被指责了），需要手动设置一下。问题是这个 busboy 是由 Multer 负责创建的，同时 Multer 并没有提供<code>defParamCharset</code>这个选项，更别说在内部使用了 Multer 的 NestJS 了。</p><h2 id="解决问题">解决问题</h2><p>目前 issue 中提供的方法和搜索引擎中提供的方法是类似的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">file.<span class="hljs-property">originalname</span> = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(file.<span class="hljs-property">originalname</span>, <span class="hljs-string">&#x27;latin1&#x27;</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br></code></pre></td></tr></table></figure><p>在 NestJS 中，我们可以自定义一个管道 Pipe 来处理这个问题。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PipeTransform</span>, <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">ArgumentMetadata</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileNameEncodePipe</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PipeTransform</span> &#123;<br>  <span class="hljs-title function_">transform</span>(<span class="hljs-params">value: Express.Multer.File, metadata: ArgumentMetadata</span>) &#123;<br>    value.<span class="hljs-property">originalname</span> = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(value.<span class="hljs-property">originalname</span>, <span class="hljs-string">&#x27;latin1&#x27;</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;utf8&#x27;</span>);<br>    <span class="hljs-keyword">return</span> value;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>回到浏览器测试，发现正常了。</p><p>但是 Apifox 测试又不行了。因此需要稍加改造：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PipeTransform</span>, <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">ArgumentMetadata</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileNameEncodePipe</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PipeTransform</span> &#123;<br>  <span class="hljs-title function_">transform</span>(<span class="hljs-params">value: Express.Multer.File, metadata: ArgumentMetadata</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/[^\u0000-\u00ff]/</span>.<span class="hljs-title function_">test</span>(value.<span class="hljs-property">originalname</span>)) &#123;<br>      value.<span class="hljs-property">originalname</span> = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(value.<span class="hljs-property">originalname</span>, <span class="hljs-string">&#x27;latin1&#x27;</span>).<span class="hljs-title function_">toString</span>(<br>        <span class="hljs-string">&#x27;utf8&#x27;</span>,<br>      );<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里是对原文件名进行一个正则判断，如果原来的文件名可以通过<code>latin1</code>方式正确解码出来，就不处理。</p><p>至此，浏览器和 Apifox 测试都正常了。</p><h2 id="后记">后记</h2><p>目前这个问题在不修改源码的情况下只能自己处理了，或者等包作者更新。如果你有更好的解决方法，欢迎交流。</p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
      <category>NestJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>NestJS</tag>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NestJS 入门（四）Redis 和注销</title>
    <link href="/2023/07/27/NestJS-%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89Redis-%E5%92%8C%E6%B3%A8%E9%94%80/"/>
    <url>/2023/07/27/NestJS-%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89Redis-%E5%92%8C%E6%B3%A8%E9%94%80/</url>
    
    <content type="html"><![CDATA[<h1>NestJS 入门（四）Redis 和注销</h1><h2 id="前言">前言</h2><p>上一章我们讲解了生成 JWT ，并实现了用户登录的接口，由于 JWT 的无状态性，只要 JWT 还未过有效期，那么该 JWT 就一直会被服务器认为是有效的，这就会引发一些安全问题。例如上一章我们设置 JWT 的过期时间为 4 个小时，那么不论用户是关闭浏览器，或者手动退出登录，该 JWT 都是不会失效的，而我们希望当用户退出登录后，当前用户的 JWT 就失效，本章将通过 Redis 来实现这个功能。关于 Redis：Redis 是什么本文就不再赘述，笔者是在 docker 中安装的 Redis，具体可看我博客的这篇文章：<a href="https://bald3r.wang/2023/07/27/%E4%BD%BF%E7%94%A8-docker-%E5%88%9B%E5%BB%BA-Redis-%E6%9C%8D%E5%8A%A1/">使用 docker 创建 Redis 服务</a></p><h2 id="实现思路">实现思路</h2><p>思路参考<a href="https://juejin.cn/post/7160936006517014558">这篇文章</a>，具体是：</p><ol><li class="lvl-3"><p>生成 JWT 后（这里生成 JWT 时不设置过期时间），将该 token 存入 Redis 中，并设置 Redis 的过期时间为 4 小时（在 Redis 中设置过期时间，间接的控制了 JWT 的有效时间）</p></li><li class="lvl-3"><p>服务器通过删除 Redis 中的 JWT 来实现作废</p></li><li class="lvl-3"><p>用户请求接口时，取出 headers 中的 JWT，判断 JWT 自身是否过期，如果没有过期则与 Redis 中的 JWT 进行比较</p></li><li class="lvl-3"><p>如果 Redis 中并没有一致的 JWT，则说明该 JWT 被服务器作废，如果找到了一致的 JWT，说明该 JWT 仍然有效，此时重置 Redis 中的过期时间为 4 小时。</p></li></ol><p>这里的意思是，用户登录获取了 JWT 后，只要用户在 4 小时内发请求，则会不断刷新 Redis 中的过期时间，相当于不断给 JWT 续期。当出现以下三种情况：</p><ul class="lvl-0"><li class="lvl-2"><p>登出</p></li><li class="lvl-2"><p>JWT 被服务器作废</p></li><li class="lvl-2"><p>超过 4 小时没有发请求</p></li></ul><p>JWT 就会被服务器判定为失效。</p><h2 id="修改现有代码">修改现有代码</h2><p>现在我们的 JWT 由 Redis 来控制，因此我们在签发 JWT 时，不设置过期时间。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// src/auth/auth.module.ts</span><br>...<br><br><span class="hljs-keyword">const</span> jwtModule = <span class="hljs-title class_">JwtModule</span>.<span class="hljs-title function_">registerAsync</span>(&#123;<br>  <span class="hljs-attr">inject</span>: [<span class="hljs-title class_">ConfigService</span>],<br>  <span class="hljs-attr">useFactory</span>: <span class="hljs-keyword">async</span> (<span class="hljs-attr">configService</span>: <span class="hljs-title class_">ConfigService</span>) =&gt; (&#123;<br>    <span class="hljs-attr">secret</span>: configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;JWT_SECRET&#x27;</span>) ?? <span class="hljs-string">&#x27;secret&#x27;</span>,<br>    <span class="hljs-attr">signOptions</span>: &#123;<br>      <span class="hljs-comment">// expiresIn: configService.get(&#x27;JWT_EXPIRES_IN&#x27;) ?? &#x27;10m&#x27;,</span><br>    &#125;,<br>  &#125;),<br>&#125;);<br><br>...<br></code></pre></td></tr></table></figure><p>在<code>.env.local</code>文件中，配置 Redis 相关的环境变量：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">..</span>.<br><br><span class="hljs-attribute">JWT_SECRET</span>=superNB<br><span class="hljs-attribute">JWT_EXPIRES_IN</span>=60000   <br><br><span class="hljs-attribute">REDIS_HOST</span>=localhost<br><span class="hljs-attribute">REDIS_PORT</span>=6379<br><span class="hljs-attribute">REDIS_DB</span>=1<br><span class="hljs-attribute">REDIS_PASSWORD</span>=123456<br></code></pre></td></tr></table></figure><p>注意这里的<code>JWT_EXPIRES_IN</code>变成了数字，是<code>1 * 60 * 1000</code>毫秒，即 1 分钟，为什么这么改下文会说明。</p><h2 id="在-NestJS-中引入-Redis">在 NestJS 中引入 Redis</h2><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm install @nestjs/cache-manager cache-manager cache-manager-redis-yet redis -S<br>pnpm install @types/cache-manager -D<br></code></pre></td></tr></table></figure><p>这里注意，我们安装的是<code>cache-manager-redis-yet</code>这个包，网上大多数教程安装的是<code>cache-manager-redis-store</code>这个包，后者目前配合 TS 使用有点问题，详见我的另一篇文章：<a href="https://bald3r.wang/2023/06/28/Nestjs-v10-%E4%B8%AD%E4%BD%BF%E7%94%A8-Redis-%E4%BD%9C%E4%B8%BA-CacheStore-%E7%9A%84%E5%9D%91/">Nestjs v10 中使用 Redis 作为 CacheStore 的坑</a></p><p>创建目录和文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nest g mo db/redis<br>nest g service db/redis<br></code></pre></td></tr></table></figure><p>编辑<code>/src/db/redis/redis.module.ts</code>文件：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span>, <span class="hljs-title class_">Global</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CacheModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/cache-manager&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigModule</span>, <span class="hljs-title class_">ConfigService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; redisStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cache-manager-redis-yet&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">RedisClientOptions</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redis&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">RedisService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./redis.service&#x27;</span>;<br><br><span class="hljs-meta">@Global</span>() <span class="hljs-comment">// 这里我们使用@Global 装饰器让这个模块变成全局的</span><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">CacheModule</span>.<span class="hljs-property">registerAsync</span>&lt;<span class="hljs-title class_">RedisClientOptions</span>&gt;(&#123;<br>      <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">ConfigModule</span>],<br>      <span class="hljs-attr">inject</span>: [<span class="hljs-title class_">ConfigService</span>],<br>      <span class="hljs-attr">useFactory</span>: <span class="hljs-keyword">async</span> (<span class="hljs-attr">configService</span>: <span class="hljs-title class_">ConfigService</span>) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> store = <span class="hljs-keyword">await</span> <span class="hljs-title function_">redisStore</span>(&#123;<br>          <span class="hljs-attr">socket</span>: &#123;<br>            <span class="hljs-attr">host</span>: configService.<span class="hljs-property">get</span>&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;REDIS_HOST&#x27;</span>),<br>            <span class="hljs-attr">port</span>: configService.<span class="hljs-property">get</span>&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-string">&#x27;REDIS_PORT&#x27;</span>),<br>          &#125;,<br>          <span class="hljs-attr">ttl</span>: configService.<span class="hljs-property">get</span>&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-string">&#x27;REDIS_TTL&#x27;</span>),<br>          <span class="hljs-attr">database</span>: configService.<span class="hljs-property">get</span>&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-string">&#x27;REDIS_DB&#x27;</span>),<br>          <span class="hljs-attr">password</span>: configService.<span class="hljs-property">get</span>&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;REDIS_PASSWORD&#x27;</span>),<br>        &#125;);<br>        <span class="hljs-keyword">return</span> &#123;<br>          store,<br>        &#125;;<br>      &#125;,<br>    &#125;),<br>  ],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">RedisService</span>],<br>  <span class="hljs-attr">exports</span>: [<span class="hljs-title class_">RedisService</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>然后我们编辑<code>redis.service.ts</code>来实现读写的方法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">CACHE_MANAGER</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/cache-manager&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Inject</span>, <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Cache</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cache-manager&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisService</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-meta">@Inject</span>(CACHE_MANAGER) <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> cacheManager: Cache</span>) &#123;&#125;<br><br>  <span class="hljs-keyword">async</span> get&lt;T&gt;(<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Promise</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">cacheManager</span>.<span class="hljs-title function_">get</span>(key);<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">set</span>(<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">value</span>: <span class="hljs-built_in">any</span>, ttl?: <span class="hljs-built_in">number</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">cacheManager</span>.<span class="hljs-title function_">set</span>(key, value, ttl);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>app.module.ts</code>中注册<code>RedisModule</code>，如果是通过<code>nest g mo</code>命令生成的<code>RedisModule</code>，那 NestJS 会自动在<code>app.module.ts</code>中注册。并且由于我们使用了<code>@Global()</code>装饰器，我们在其他模块中使用时，不需要再在<code>module</code>中注册。</p><h2 id="签发-JWT-时存入-Redis">签发 JWT 时存入 Redis</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// src/auth/auth.service.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">JwtService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/jwt&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">RedisService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/db/redis/redis.service&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/user/entities/user.entity&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthService</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-keyword">private</span> jwtService: JwtService,</span><br><span class="hljs-params">    <span class="hljs-keyword">private</span> redisService: RedisService,</span><br><span class="hljs-params">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> configService: ConfigService,</span><br><span class="hljs-params">  </span>) &#123;&#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">user: Partial&lt;User&gt;</span>) &#123;<br>    <span class="hljs-keyword">const</span> payload = &#123; <span class="hljs-attr">username</span>: user.<span class="hljs-property">username</span>, <span class="hljs-attr">id</span>: user.<span class="hljs-property">id</span> &#125;;<br><br>    <span class="hljs-keyword">const</span> access_token = <span class="hljs-variable language_">this</span>.<span class="hljs-property">jwtService</span>.<span class="hljs-title function_">sign</span>(payload);<br><br>    <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">redisService</span>.<span class="hljs-title function_">set</span>(<br>      <span class="hljs-string">`token_<span class="hljs-subst">$&#123;user.id&#125;</span>`</span>,<br>      access_token,<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">configService</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;JWT_EXPIRES_IN&#x27;</span>), <span class="hljs-comment">// 注意这里</span><br>    );<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      access_token,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;Bearer&#x27;</span>,<br>    &#125;;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到，我们在调用<code>this.redisService.set()</code>函数时，传入的第三个参数为<code>this.configService.get('JWT_EXPIRES_IN')</code>，从<code>redis.service.ts</code>文件中我们不难发现，这里的第三个参数对应的是<code>ttl</code>，即 Redis 中这条数据的过期时间，在当前场景下，就是 JWT 的有效时间，因此直接从环境变量中读取<code>JWT_EXPIRES_IN</code>的值，由于这里的<code>ttl</code>的单位是毫秒，我们在上文的编辑<code>.env.local</code>文件时，将<code>JWT_EXPIRES_IN</code>值进行了改动，改为了<code>60000</code>毫秒，即 60 秒，设置这么短是为了测试方便看出效果，大家可以根据实际情况进行调整。</p><p>测试一下是否生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request POST <span class="hljs-string">&#x27;http://localhost:3000/auth/login&#x27;</span> \<br>--header <span class="hljs-string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;username=wang&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;password=123456&#x27;</span><br></code></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;请求成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;access_token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IndhbmciLCJpZCI6MTQsImlhdCI6MTY5MDQyOTM1NH0.bmkZ5PPeZTIRyzlppmvlI3SVcQTx3b0aRHtt5ZOXMiI&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bearer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>通过 Redis 图形化管理器看一下我们的 Redis 数据库：</p><p><img src="https://img.bald3r.wang/img/image-20230727114736055.png" alt=""></p><p>可以看到，已经成功将 JWT 存入了 Redis，过期时间也与我们设置的 1 分钟一致。</p><p>1 分钟之后，Redis 自动删除了这条数据：</p><p><img src="https://img.bald3r.wang/img/image-20230727114812352.png" alt=""></p><h2 id="请求时进行校验">请求时进行校验</h2><p>校验 JWT 的逻辑写在策略中，因此我们对策略进行修改：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// /src/global/strategy/jwt.strategy.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PassportStrategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/passport&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">InjectRepository</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Repository</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ExtractJwt</span>, <span class="hljs-title class_">Strategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;passport-jwt&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">StrategyOptions</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;passport-jwt&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">UnauthorizedException</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">Request</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/user/entities/user.entity&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">RedisService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/db/redis/redis.service&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PassportStrategy</span>(<span class="hljs-title class_">Strategy</span>) &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-meta">@InjectRepository</span>(User) <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> userRepository: Repository&lt;User&gt;,</span><br><span class="hljs-params">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> configService: ConfigService,</span><br><span class="hljs-params">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> redisService: RedisSerivce,  <span class="hljs-comment">// 注意点 ①</span></span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-variable language_">super</span>(&#123;<br>      <span class="hljs-attr">jwtFromRequest</span>: <span class="hljs-title class_">ExtractJwt</span>.<span class="hljs-title function_">fromAuthHeaderAsBearerToken</span>(),<br>      <span class="hljs-attr">secretOrKey</span>: configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;JWT_SECRET&#x27;</span>) ?? <span class="hljs-string">&#x27;secret&#x27;</span>,<br>      <span class="hljs-attr">passReqToCallback</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">// 注意点 ②</span><br>    &#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">StrategyOptions</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">req: Request, payload: User</span>) &#123; <span class="hljs-comment">// 注意点 ③</span><br>    <span class="hljs-keyword">const</span> token = <span class="hljs-title class_">ExtractJwt</span>.<span class="hljs-title function_">fromAuthHeaderAsBearerToken</span>()(req);<br>    <span class="hljs-keyword">const</span> existUser = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userRepository</span>.<span class="hljs-title function_">findOne</span>(&#123;<br>      <span class="hljs-attr">where</span>: &#123; <span class="hljs-attr">id</span>: payload.<span class="hljs-property">id</span> &#125;,<br>    &#125;);<br>    <span class="hljs-keyword">const</span> cacheToken = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">redisService</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">`token_<span class="hljs-subst">$&#123;existUser.id&#125;</span>`</span>);<br>    <span class="hljs-keyword">if</span> (!cacheToken) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnauthorizedException</span>(<span class="hljs-string">&#x27;token已过期&#x27;</span>);<br><br>    <span class="hljs-keyword">if</span> (token !== cacheToken) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnauthorizedException</span>(<span class="hljs-string">&#x27;token不正确&#x27;</span>);<br><br>    <span class="hljs-keyword">if</span> (!existUser) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnauthorizedException</span>(<span class="hljs-string">&#x27;token验证失败&#x27;</span>);<br><br>    <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">redisService</span>.<span class="hljs-title function_">set</span>(<br>      <span class="hljs-string">`token_<span class="hljs-subst">$&#123;existUser.id&#125;</span>`</span>,<br>      token,<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">configService</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;JWT_EXPIRES_IN&#x27;</span>),<br>    );  <span class="hljs-comment">// 注意点 ④</span><br><br>    <span class="hljs-keyword">return</span> existUser;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意点：</p><ol><li class="lvl-3"><p>在①处引入 RedisService</p></li><li class="lvl-3"><p>②处需要将<code>passReqToCallback</code>设置为<code>true</code>，作用是将请求传递给下面的<code>validate()</code>函数，可以看到，③处的<code>validate()</code>函数接受的第一个参数就是<code>req:Request</code>，否则的话<code>validate()</code>函数是拿不到请求的，也就不能从请求头中拿到 JWT</p></li><li class="lvl-3"><p>④处是刷新了 Redis 中 JWT 的持续时间，意思就是用户只要发送了请求并且 JWT 验证通过后，就会刷新 JWT 的有效期，达到续期的目的。在本例中，用户一分钟没有操作，JWT 就会过期</p></li></ol><p>等待一分钟后重新请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request GET <span class="hljs-string">&#x27;http://localhost:3000/user&#x27;</span> \<br>--header <span class="hljs-string">&#x27;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IndhbmciLCJpZCI6MTQsImlhdCI6MTY5MDQzMDM1Mn0._oUGBOO8ycgyjnU1sJLEAmN4Q-B2EsK2wnuL4NHhUks&#x27;</span> <br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">401</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;token已过期&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>校验成功。</p><h2 id="注销接口">注销接口</h2><p>接下来我们就通过删除 Redis 中的 key 的方式，实现注销用户登录的接口。</p><p>在<code>redis.service.ts</code>中新增删除数据的方法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">CACHE_MANAGER</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/cache-manager&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Inject</span>, <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Cache</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cache-manager&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisService</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-meta">@Inject</span>(CACHE_MANAGER) <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> cacheManager: Cache</span>) &#123;&#125;<br><br>  <span class="hljs-keyword">async</span> get&lt;T&gt;(<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Promise</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">cacheManager</span>.<span class="hljs-title function_">get</span>(key);<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">set</span>(<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">value</span>: <span class="hljs-built_in">any</span>, ttl?: <span class="hljs-built_in">number</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">cacheManager</span>.<span class="hljs-title function_">set</span>(key, value, ttl);<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">del</span>(<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">void</span>&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">cacheManager</span>.<span class="hljs-title function_">del</span>(key);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在<code>auth</code>模块中，新增相应逻辑：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// /src/auth/auth.controller.ts</span><br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;auth&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> authService: AuthService</span>) &#123;&#125;<br>  <br>...<br>  <br>  <span class="hljs-meta">@Delete</span>(<span class="hljs-string">&#x27;logout&#x27;</span>)<br>  <span class="hljs-title function_">logout</span>(<span class="hljs-params"><span class="hljs-meta">@Req</span>() req: Request</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">logout</span>(req.<span class="hljs-property">user</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// /src/auth/auth.service.ts</span><br><br><span class="hljs-keyword">import</span> ...<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthService</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">  ...</span><br><span class="hljs-params">    <span class="hljs-keyword">private</span> redisService: RedisService,</span><br><span class="hljs-params">  </span>) &#123;&#125;<br><br>...<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params">user: Partial&lt;User&gt;</span>) &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">redisService</span>.<span class="hljs-title function_">del</span>(<span class="hljs-string">`token_<span class="hljs-subst">$&#123;user.id&#125;</span>`</span>);<br>  &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>用户在<code>DELETE /auth/logout</code>接口后，请求其他需要身份认证接口时，都会报<code>token已过期</code>错误。</p><h2 id="后记">后记</h2><p>本章中的例子有一些限制，比如只支持一个 JWT，也就是说，用户只能在一处进行登录，例如用户网页登录了，然后又用客户端登录，那先登录的网页就会失效，因为 Redis 中只存一条 JWT，并且已经被客户端登录时签发的 JWT 替换了。</p><p><a href="https://github.com/baIder/nest-demo">Nest学习系列博客代码仓库 (github.com)</a></p><p><a href="https://bald3r.wang/">冷面杀手的个人站 (bald3r.wang)</a></p><p><a href="https://bald3r.wang/tags/NestJS/">NestJS 相关文章</a></p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
      <category>NestJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>NestJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 docker 创建 Redis 服务</title>
    <link href="/2023/07/27/%E4%BD%BF%E7%94%A8-docker-%E5%88%9B%E5%BB%BA-Redis-%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/07/27/%E4%BD%BF%E7%94%A8-docker-%E5%88%9B%E5%BB%BA-Redis-%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1>使用docker创建Redis服务</h1><h2 id="配置docker镜像源">配置docker镜像源</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>  <span class="hljs-string">&quot;https://4346hkfk.mirror.aliyuncs.com&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;https://hub-mirror.c.163.com&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-string">&quot;https://reg-mirror.qiniu.com&quot;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h2 id="拉取镜像">拉取镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br></code></pre></td></tr></table></figure><h2 id="创建配置文件">创建配置文件</h2><p>redis并不会创建<code>redis.conf</code>配置文件，而在启动容器时，如果宿主机以及容器内都没有配置文件，docker会自动创建，但是docker创建的<code>redis.conf</code>是目录，并不是文件，因此我们需要提前创建这个文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/redis/conf<br><br><span class="hljs-built_in">touch</span> ~/redis/conf/redis.conf<br></code></pre></td></tr></table></figure><h2 id="配置Redis">配置Redis</h2><p>编辑<code>redis.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/redis/conf/redis.conf<br></code></pre></td></tr></table></figure><p>设置以下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">appendonly</span> <span class="hljs-literal">yes</span> <span class="hljs-comment"># 数据持久化</span><br>protected-mode <span class="hljs-literal">no</span><span class="hljs-comment"># 外部网络访问</span><br>bind <span class="hljs-number">0.0.0.0</span><span class="hljs-comment"># 所有ip都可以访问</span><br>requirepass <span class="hljs-number">123456</span><span class="hljs-comment"># 设置访问密码</span><br></code></pre></td></tr></table></figure><h2 id="启动容器">启动容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name redis -p 6379:6379 -v ~/redis/data:/data -v ~/redis/conf/redis.conf:/etc/redis/redis.conf -d redis:latest redis-server /etc/redis/redis.conf<br></code></pre></td></tr></table></figure><h2 id="进入容器">进入容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis bash<br>--------------------------<br>root@0d0142d45f55:/data<span class="hljs-comment"># redis-cli -a 123456</span><br>Warning: Using a password with <span class="hljs-string">&#x27;-a&#x27;</span> or <span class="hljs-string">&#x27;-u&#x27;</span> option on the <span class="hljs-built_in">command</span> line interface may not be safe.<br>127.0.0.1:6379&gt; <span class="hljs-built_in">set</span> ping pong<br>OK<br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure><p>通过redis桌面管理工具查看是否生效：</p><p><img src="https://img.bald3r.wang/img/image-20230707114104329.png" alt=""></p><p>说明redis运行成功！</p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 Iterator遍历器</title>
    <link href="/2023/07/26/Iterator/"/>
    <url>/2023/07/26/Iterator/</url>
    
    <content type="html"><![CDATA[<h1>[ES6] Iterator遍历器</h1><h2 id="概念">概念</h2><p>遍历器（Iterator）是一种接口，为各种不同的数据结构提供同一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</p><p>作用：</p><ul class="lvl-0"><li class="lvl-2"><p>为各种数据结构，提供一个统一的、简便的访问接口；</p></li><li class="lvl-2"><p>使得数据结构的成员能够按某种次序排列；</p></li><li class="lvl-2"><p>ES6 创造了一种新的遍历命令<code>for...of</code>循环，Iterator 接口主要供<code>for...of</code>消费。</p></li></ul><p>遍历的过程：结合 Generator 生成器理解</p><ol><li class="lvl-3"><p>创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</p></li><li class="lvl-3"><p>第一次调用指针对象的<code>next</code>方法，可以将指针指向数据结构的第一个成员。</p></li><li class="lvl-3"><p>第二次调用指针对象的<code>next</code>方法，指针就指向数据结构的第二个成员。</p></li><li class="lvl-3"><p>不断调用指针对象的<code>next</code>方法，直到它指向数据结构的结束位置。</p></li></ol><p>每一次调用<code>next</code>方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含<code>value</code>和<code>done</code>两个属性的对象。其中，<code>value</code>属性是当前成员的值，<code>done</code>属性是一个布尔值，表示遍历是否结束。</p><h2 id="与for-of的关系">与<code>for...of</code>的关系</h2><p>实现 Iterator 接口的目的，就是为所有的数据结构提供一种统一的访问机制，即<code>for...of</code>循环。当使用<code>for...of</code>循环遍历某种数据结构时，该循环会自动去寻找 Iterator 接口。</p><p>一种数据结构只要部署了 Iterator 接口，我们就称这种数据结构是“可遍历的”（iterable）。</p><p>默认的 Iterator 接口部署在数据结构的<code>Symbol.iterator</code>属性。它就是当前数据结构默认的遍历器生成函数，执行它就会返回一个遍历器。</p><p>原生具备 Iterator 接口的数据结构有：</p><ul class="lvl-0"><li class="lvl-2"><p>Array</p></li><li class="lvl-2"><p>Map</p></li><li class="lvl-2"><p>Set</p></li><li class="lvl-2"><p>String</p></li><li class="lvl-2"><p>TypedArray</p></li><li class="lvl-2"><p>函数的 arguments 对象</p></li><li class="lvl-2"><p>NodeList 对象</p></li></ul><h2 id="使用场景">使用场景</h2><ol><li class="lvl-3"><p><code>for...of</code></p></li><li class="lvl-3"><p>对数组和 Set 结构进行解构赋值时</p></li><li class="lvl-3"><p><code>...</code>扩展运算符（可用来将该数据结构转为数组）</p></li><li class="lvl-3"><p><code>yield*</code></p></li><li class="lvl-3"><p>其他对数组进行遍历的场景，如</p><ul class="lvl-2"><li class="lvl-5">for…of</li><li class="lvl-5">Array.from()</li><li class="lvl-5">Map(), Set(), WeakMap(), WeakSet()（比如<code>new Map([['a',1],['b',2]])</code>）</li><li class="lvl-5">Promise.all()</li><li class="lvl-5">Promise.race()</li></ul></li></ol><h2 id="字符串的-Iterator-接口">字符串的 Iterator 接口</h2><p>字符串也是可以遍历的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> someString = <span class="hljs-string">&quot;hi&quot;</span>;<br><span class="hljs-keyword">typeof</span> someString[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]<br><span class="hljs-comment">// &quot;function&quot;</span><br><br><span class="hljs-keyword">var</span> iterator = someString[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]();<br><br>iterator.<span class="hljs-title function_">next</span>()  <span class="hljs-comment">// &#123; value: &quot;h&quot;, done: false &#125;</span><br>iterator.<span class="hljs-title function_">next</span>()  <span class="hljs-comment">// &#123; value: &quot;i&quot;, done: false &#125;</span><br>iterator.<span class="hljs-title function_">next</span>()  <span class="hljs-comment">// &#123; value: undefined, done: true &#125;</span><br></code></pre></td></tr></table></figure><h2 id="方法">方法</h2><p>遍历器对象有三个方法，如果要手动实现遍历器对象生成函数，必须要实现<code>next()</code>方法，可选实现<code>return()</code>和<code>throw()</code>方法。</p><h3 id="return"><code>return()</code></h3><p><code>return()</code>方法的使用场合是，如果<code>for...of</code>循环提前退出（通常是因为出错，或者有<code>break</code>语句），就会调用<code>return()</code>方法。如果一个对象在完成遍历前，需要清理或释放资源，就可以部署<code>return()</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 情况一</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> line <span class="hljs-keyword">of</span> <span class="hljs-title function_">readLinesSync</span>(fileName)) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(line);<br>  <span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">// 情况二</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> line <span class="hljs-keyword">of</span> <span class="hljs-title function_">readLinesSync</span>(fileName)) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(line);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码中，情况一输出文件的第一行以后，就会执行<code>return()</code>方法，关闭这个文件；情况二会在执行<code>return()</code>方法关闭文件之后，再抛出错误。</p><p>注意，<code>return()</code>方法必须返回一个对象，这是 Generator 语法决定的。</p><h3 id="throw"><code>throw()</code></h3><p><code>throw()</code>方法主要是配合 Generator 函数使用，一般的遍历器对象用不到这个方法。</p><h2 id="数组的遍历">数组的遍历</h2><p>JavaScript 原有的<code>for...in</code>循环，只能获得对象的键名，不能直接获取键值。ES6 提供<code>for...of</code>循环，允许遍历获得键值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> a <span class="hljs-keyword">in</span> arr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 0 1 2 3</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> a <span class="hljs-keyword">of</span> arr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// a b c d</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码表明，<code>for...in</code>循环读取键名，<code>for...of</code>循环读取键值。如果要通过<code>for...of</code>循环，获取数组的索引，可以借助数组实例的<code>entries</code>方法和<code>keys</code>方法。</p><p><code>for...of</code>循环调用遍历器接口，数组的遍历器接口只返回具有数字索引的属性。这一点跟<code>for...in</code>循环也不一样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>];<br>arr.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> arr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;foo&quot;</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> arr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">//  &quot;3&quot;, &quot;5&quot;, &quot;7&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对比其他遍历方式">对比其他遍历方式</h2><ul class="lvl-0"><li class="lvl-2"><p>数组的 <code>forEach</code>循环</p><p>无法中途跳出<code>forEach</code>循环，<code>break</code>命令或<code>return</code>命令都不能奏效。</p></li><li class="lvl-2"><p><code>for...in</code>循环</p><ul class="lvl-2"><li class="lvl-4">数组的键名是数字，但是<code>for...in</code>循环是以字符串作为键名“0”、“1”、“2”等等。</li><li class="lvl-4"><code>for...in</code>循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。</li><li class="lvl-4">某些情况下，<code>for...in</code>循环会以任意顺序遍历键名。</li></ul></li><li class="lvl-2"><p><code>for...of</code>循环</p><ul class="lvl-2"><li class="lvl-4">有着同<code>for...in</code>一样的简洁语法，但是没有<code>for...in</code>那些缺点。</li><li class="lvl-4">不同于<code>forEach</code>方法，它可以与<code>break</code>、<code>continue</code>和<code>return</code>配合使用。</li><li class="lvl-4">提供了遍历所有数据结构的统一操作接口。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
      <category>ES6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 Set 和 Map</title>
    <link href="/2023/07/26/Set-%E5%92%8C-Map/"/>
    <url>/2023/07/26/Set-%E5%92%8C-Map/</url>
    
    <content type="html"><![CDATA[<h1>[ES6] Set 与 Map</h1><h2 id="Set">Set</h2><p>Set 类似数组，区别在于一个 Set 中的值都是唯一的，没有重复值。</p><h3 id="创建一个-Set">创建一个 Set</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br></code></pre></td></tr></table></figure><p>Set 函数可以接受一个数组（或者具有 <code>iterable</code> 接口的其他数据结构）作为参数来初始化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 例一</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]);<br>[...set]<br><span class="hljs-comment">// [1, 2, 3, 4]</span><br><br><span class="hljs-comment">// 例二</span><br><span class="hljs-keyword">const</span> items = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>]);<br>items.<span class="hljs-property">size</span> <span class="hljs-comment">// 5</span><br><br><span class="hljs-comment">// 例三</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>));<br>set.<span class="hljs-property">size</span> <span class="hljs-comment">// 56</span><br><br><span class="hljs-comment">// 类似于</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><span class="hljs-variable language_">document</span><br> .<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br> .<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">div</span> =&gt;</span> set.<span class="hljs-title function_">add</span>(div));<br>set.<span class="hljs-property">size</span> <span class="hljs-comment">// 56</span><br></code></pre></td></tr></table></figure><h3 id="用-Set-去重">用 Set 去重</h3><p>由于 Set 内的值都不重复，因此可以用来去重。</p><ul class="lvl-0"><li class="lvl-2"><p>数组去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">[...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(array)]<br></code></pre></td></tr></table></figure></li><li class="lvl-2"><p>字符串去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">[...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(<span class="hljs-string">&#x27;ababbc&#x27;</span>)].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><p>注意点：</p><ul class="lvl-0"><li class="lvl-2"><p><code>NaN</code> 在 Set 内部被认为是相等的。</p></li><li class="lvl-2"><p>对象总是不相等的。</p></li></ul><h3 id="属性和方法">属性和方法</h3><p>Set 结构的实例有以下属性。</p><p><code>Set.prototype.constructor</code>：构造函数，默认就是 Set 函数。<code>Set.prototype.size</code>：返回 Set 实例的成员总数。</p><p>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。</p><p>四个操作方法：</p><ul class="lvl-0"><li class="lvl-2"><p><code>Set.prototype.add(value)</code>：添加某个值，返回 Set 结构本身。</p></li><li class="lvl-2"><p><code>Set.prototype.delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</p></li><li class="lvl-2"><p><code>Set.prototype.has(value)</code>：返回一个布尔值，表示该值是否为 Set 的成员。</p></li><li class="lvl-2"><p><code>Set.prototype.clear()</code>：清除所有成员，没有返回值。</p></li></ul><p>四个遍历方法：</p><ul class="lvl-0"><li class="lvl-2"><p><code>Set.prototype.keys()</code>：返回键名的遍历器</p></li><li class="lvl-2"><p><code>Set.prototype.values()</code>：返回键值的遍历器</p></li><li class="lvl-2"><p><code>Set.prototype.entries()</code>：返回键值对的遍历器</p></li><li class="lvl-2"><p><code>Set.prototype.forEach()</code>：使用回调函数遍历每个成员</p></li></ul><p>注意：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>Set 的遍历顺序就是插入顺序</strong></p></li><li class="lvl-2"><p><code>keys</code>，<code>values</code>，<code>entries</code> 方法返回的都是遍历器对象。因此，由于 Set 结构没有键名只有键值，<code>keys</code> 和 <code>values</code> 方法行为一致。</p></li><li class="lvl-2"><p><code>entries</code> 返回的遍历器同事包括键名和键值，因此会输出一个包含两项的数组，这两项完全相等。</p></li><li class="lvl-2"><p><code>for...of</code> 循环实际上是 <code>values</code> 方法</p></li><li class="lvl-2"><p><code>...</code>扩展运算符内部使用的是<code>for...of</code>方法，也就是<code>values</code>方法。因此可以用该方式将 Set 展开为数组，从而间接的使用数组的方法，例如<code>map</code>，<code>filter</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">keys</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// red</span><br><span class="hljs-comment">// green</span><br><span class="hljs-comment">// blue</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">values</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// red</span><br><span class="hljs-comment">// green</span><br><span class="hljs-comment">// blue</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">entries</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// [&quot;red&quot;, &quot;red&quot;]</span><br><span class="hljs-comment">// [&quot;green&quot;, &quot;green&quot;]</span><br><span class="hljs-comment">// [&quot;blue&quot;, &quot;blue&quot;]</span><br><br><span class="hljs-title class_">Set</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] === <span class="hljs-title class_">Set</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">values</span><br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="WeakSet">WeakSet</h3><h4 id="与-Set-的区别：">与 Set 的区别：</h4><p>首先，WeakSet 的成员只能是对象，而不能是其他类型的值。其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p><p>由于上面这个特点，WeakSet 的成员是不适合引用的，因为它会随时消失。另外，由于 WeakSet 内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此 ES6 规定 WeakSet 不可遍历。</p><h4 id="用处：">用处：</h4><p>WeakSet 的一个用处，是储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏。</p><p>这里使用 WeakSet 的好处是，foos 对实例的引用，不会被计入内存回收机制，所以删除实例的时候，不用考虑 foos，也不会出现内存泄漏。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> foos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakSet</span>()<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    foos.<span class="hljs-title function_">add</span>(<span class="hljs-variable language_">this</span>)<br>  &#125;<br>  method () &#123;<br>    <span class="hljs-keyword">if</span> (!foos.<span class="hljs-title function_">has</span>(<span class="hljs-variable language_">this</span>)) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;Foo.prototype.method 只能在Foo的实例上调用！&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Map">Map</h2><p>Map 类似与对象，区别在于，对象只能使用字符串作为键，而 Map 可以使用各种类型的值（包括对象）作为键。</p><h3 id="创建一个-Map">创建一个 Map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br></code></pre></td></tr></table></figure><p>Map 可以接受一个数组作为参数，该数组的成员是一个个表示键值对的数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>  [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>],<br>  [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;Author&#x27;</span>]<br>]);<br><br>map.<span class="hljs-property">size</span> <span class="hljs-comment">// 2</span><br>map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">// true</span><br>map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">// &quot;张三&quot;</span><br>map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;title&#x27;</span>) <span class="hljs-comment">// true</span><br>map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;title&#x27;</span>) <span class="hljs-comment">// &quot;Author&quot;</span><br></code></pre></td></tr></table></figure><p>实际上是将参数数组遍历，调用了<code>set</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> items = [<br>  [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;张三&#x27;</span>],<br>  [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;Author&#x27;</span>]<br>];<br><br><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br>items.<span class="hljs-title function_">forEach</span>(<br>  <span class="hljs-function">(<span class="hljs-params">[key, value]</span>) =&gt;</span> map.<span class="hljs-title function_">set</span>(key, value)<br>);<br></code></pre></td></tr></table></figure><p>也就是说，任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构都可以当作 Map 构造函数的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<br>  [<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-number">1</span>],<br>  [<span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-number">2</span>]<br>]);<br><span class="hljs-keyword">const</span> m1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(set);<br>m1.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;foo&#x27;</span>) <span class="hljs-comment">// 1</span><br><br><span class="hljs-keyword">const</span> m2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&#x27;baz&#x27;</span>, <span class="hljs-number">3</span>]]);<br><span class="hljs-keyword">const</span> m3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(m2);<br>m3.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;baz&#x27;</span>) <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>注意：只有对同一个对象的引用，Map 结构才将其视为同一个键，也就是说，<code>[1]</code>与<code>[1]</code>虽然值相同，但是是两个不同的数组实例，Map 不会将其视为同一个键：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><br>map.<span class="hljs-title function_">set</span>([<span class="hljs-string">&#x27;a&#x27;</span>], <span class="hljs-number">555</span>);<br>map.<span class="hljs-title function_">get</span>([<span class="hljs-string">&#x27;a&#x27;</span>]) <span class="hljs-comment">// undefined</span><br><br><span class="hljs-keyword">const</span> k1 = [<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-keyword">const</span> k2 = [<span class="hljs-string">&#x27;a&#x27;</span>];<br><br>map<br>.<span class="hljs-title function_">set</span>(k1, <span class="hljs-number">111</span>)<br>.<span class="hljs-title function_">set</span>(k2, <span class="hljs-number">222</span>);<br><br>map.<span class="hljs-title function_">get</span>(k1) <span class="hljs-comment">// 111</span><br>map.<span class="hljs-title function_">get</span>(k2) <span class="hljs-comment">// 222</span><br></code></pre></td></tr></table></figure><h3 id="属性和方法-2">属性和方法</h3><p>属性：</p><p><code>Map.prototype.size</code>返回 Map 结构的成员总数</p><p>四个操作方法：</p><ul class="lvl-0"><li class="lvl-2"><p><code>Map.prototype.set(key, value)</code> 无则生成，有则更新，返回这个 Map 对象，可以链式操作</p></li><li class="lvl-2"><p><code>Map.prototype.get(key)</code> 无则返回<code>undefined</code></p></li><li class="lvl-2"><p><code>Map.prototype.has(key)</code> 有返回<code>true</code>，无返回<code>false</code></p></li><li class="lvl-2"><p><code>Map.prototype.clear()</code> 清空，无返回值</p></li></ul><p>四个遍历方法：</p><ul class="lvl-0"><li class="lvl-2"><p><code>Map.prototype.keys()</code>：返回键名的遍历器。</p></li><li class="lvl-2"><p><code>Map.prototype.values()</code>：返回键值的遍历器。</p></li><li class="lvl-2"><p><code>Map.prototype.entries()</code>：返回所有成员的遍历器。</p></li><li class="lvl-2"><p><code>Map.prototype.forEach()</code>：遍历 Map 的所有成员。</p></li></ul><p>注意：</p><p><strong>Map 的遍历顺序为插入顺序</strong><br>Map 的默认遍历器接口是 entries 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">map[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] === map.<span class="hljs-property">entries</span><br></code></pre></td></tr></table></figure><p>Map 可以通过<code>...</code>操作符快速转为数组结构，可以变相的使用数组的方法，例如<code>filter</code>，<code>map</code></p><h3 id="WeakMap">WeakMap</h3><p>区别：</p><p>WeakMap 只接受对象作为键名（<code>null</code> 除外），不接受其他类型的值作为键名。</p><p><code>WeakMap</code>的键名所指向的对象，不计入垃圾回收机制。</p><p>使用场景：</p><p><code>WeakMap</code>的键所对应的对象，可能会在将来消失。<code>WeakMap</code>结构有助于防止内存泄漏。</p><p>例如：</p><p>一个典型应用场景是，在网页的 DOM 元素上添加数据，就可以使用<code>WeakMap</code>结构。当该 DOM 元素被清除，其所对应的<code>WeakMap</code>记录就会自动被移除。</p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
      <category>ES6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 Symbol 用法</title>
    <link href="/2023/07/25/Symbol%E7%94%A8%E6%B3%95/"/>
    <url>/2023/07/25/Symbol%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>[ES6] Symbol 用法</h1><h2 id="Symbol-是什么？">Symbol 是什么？</h2><p>Symbol 是 ES6 新增的一个数据类型，也是 JS 原生数据类型（<code>Number</code>,<code>String</code>,<code>Boolean</code>,<code>undefined</code>,<code>null</code>,<code>Object</code>,<code>Bigint</code>,<code>Symbol</code>）之一，表示独一无二的值。</p><h2 id="为什么要有-Symbol-？">为什么要有 Symbol ？</h2><p><strong>防止对象的属性名冲突</strong></p><p>以往对象的属性名都是字符串，在使用的过程中，可能会出现属性名重复导致冲突的情况，于是 ES6 引入了<code>Symbol</code>，表示独一无二的值，避免了属性名的重复。</p><h2 id="用法">用法</h2><h3 id="创建一个-Symbol">创建一个 Symbol</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> foo = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo);<br><span class="hljs-comment">// Symbol()</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> foo);<br><span class="hljs-comment">// symbol</span><br><br></code></pre></td></tr></table></figure><p>可以看到，这里是调用了 <code>Symbol()</code> 函数创建了一个 <code>Symbol</code> ，不需要使用 <code>new</code> 操作符，注意区分。</p><p><code>Symbol()</code> 可以接受一个字符串作为参数，表示对这个 Symbol 的描述：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> foo = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;bar&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo);<br><span class="hljs-comment">// Symbol(bar)</span><br></code></pre></td></tr></table></figure><p>如果该参数为对象，则调用对象的<code>toString()</code>方法转为字符串。</p><p>这个参数只作为描述存在，相同描述的<code>Symbol</code>并不相等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;desc&quot;</span>);<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;desc&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s1 === s2); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="Symbol-prototype-description">Symbol.prototype.description</h3><p>可以通过这个方法，获取创建 Symbol 时的描述字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;desc&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s1.<span class="hljs-property">description</span>); <span class="hljs-comment">// desc</span><br></code></pre></td></tr></table></figure><h3 id="作为属性名">作为属性名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-comment">// 1</span><br><span class="hljs-keyword">let</span> a = &#123;<br>  [s1]: <span class="hljs-string">&quot;hello&quot;</span>,<br>&#125;;<br><span class="hljs-comment">// 2</span><br><span class="hljs-keyword">let</span> a = &#123;&#125;;<br>a[s1] = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-comment">// 3</span><br><span class="hljs-keyword">let</span> a = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(a, s1, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;hello&quot;</span> &#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[s1]); <span class="hljs-comment">// hello</span><br></code></pre></td></tr></table></figure><p>三种方式都可以。注意在使用 Symbol 作为属性名时，不能使用<code>.</code>操作符，例如<code>a.s1</code>这里的<code>s1</code>实际上是字符串<code>s1</code>，和我们定义的 Symbol 没关系。</p><p>在对象内部使用时，也需要用<code>[]</code>包裹，不然也会被当做字符串处理。</p><h3 id="属性名的遍历">属性名的遍历</h3><p>Symbol 作为属性名时，是公有属性而不是私有属性，但是不能通过常规方式遍历到，例如：</p><ul class="lvl-0"><li class="lvl-2"><p><code>for...in</code></p></li><li class="lvl-2"><p><code>for...of</code></p></li><li class="lvl-2"><p><code>Object.keys()</code></p></li><li class="lvl-2"><p><code>Object.getOwnPropertyNames()</code></p></li><li class="lvl-2"><p><code>JSON.stringify()</code></p></li></ul><p>可以通过以下方式获取到：</p><ul class="lvl-0"><li class="lvl-2"><p><code>Object.getOwnPropertySymbols()</code> 返回当前对象中所有用作属性名的 Symbol 值的数组</p></li><li class="lvl-2"><p><code>Reflect.ownKeys()</code> 返回所有类型的键名，包括常规键名和 Symbol 键名</p></li></ul><h3 id="Symbol-for">Symbol.for()</h3><p><code>Symbol.for()</code>接受一个字符串，然后会查找有没有使用这个字符串作为名称的 Symbol 值，如有有，就返回这个 Symbol 值，如果没有，则会以该字符串创建一个新的 Symbol 并注册到全局。并且，不论<code>Symbol.for()</code>在何处运行，注册的名字永远在全局环境中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s1 === s2); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Symbol-keyFor">Symbol.keyFor()</h3><p><code>Symbol.keyFor()</code>接受一个 Symbol 参数，并返回这个 Symbol 注册时的 key，往往和 <code>Symbol.for()</code> 配合使用，因为通过 <code>Symbol()</code> 创建的 Symbol 并没有注册 key，只用通过 <code>Symbol.for()</code> 注册的 Symbol 才是有 key 的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s1 = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">keyFor</span>(s1) <span class="hljs-comment">// &quot;foo&quot;</span><br><br><span class="hljs-keyword">let</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">keyFor</span>(s2) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>上述代码中，<code>s2</code>并没有注册 key。</p><h2 id="内置-Symbol-值">内置 Symbol 值</h2><ul class="lvl-0"><li class="lvl-2"><p>Symbol.hasInstance</p></li><li class="lvl-2"><p>Symbol.isConcatSpreadable</p></li><li class="lvl-2"><p>Symbol.species</p></li><li class="lvl-2"><p>Symbol.match</p></li><li class="lvl-2"><p>Symbol.replace</p></li><li class="lvl-2"><p>Symbol.search</p></li><li class="lvl-2"><p>Symbol.split</p></li><li class="lvl-2"><p>Symbol.iterator 对象的<code>Symbol.iterator</code>属性，指向该对象的默认遍历器方法。</p></li><li class="lvl-2"><p>Symbol.toPrimitive</p></li><li class="lvl-2"><p>Symbol.toStringTag</p></li><li class="lvl-2"><p>Symbol.unscopables</p></li></ul><h2 id="参考文章">参考文章</h2><p><a href="https://es6.ruanyifeng.com/#docs/symbol">阮一峰 ES6</a></p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
      <category>ES6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NestJS 入门（三）用户登录与JWT</title>
    <link href="/2023/07/14/NestJS-%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%8EJWT/"/>
    <url>/2023/07/14/NestJS-%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E4%B8%8EJWT/</url>
    
    <content type="html"><![CDATA[<h1>NestJS 入门（三）用户登录与JWT</h1><h2 id="前言">前言</h2><p>本文主要探讨在 NestJS 中实现登录功能并签发 JWT Token ，使用的库有：</p><ul class="lvl-0"><li class="lvl-2"><p>node.bcrypt.js</p></li><li class="lvl-2"><p>passport.js</p></li><li class="lvl-2"><p>@nestjs/jwt</p></li></ul><h2 id="加密用户密码">加密用户密码</h2><p>目前我们的数据库中的密码是明文存储的，明显是极不安全的，因此我们这里使用第三方库来对密码进行加密，然后再存入数据库中。</p><p>首先我们安装库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm i -S bcrypt <br>pnpm i -D @types/bcrypt<br></code></pre></td></tr></table></figure><p>前端会将用户的<code>username</code>和<code>password</code>传给后端，然后后端再将<code>password</code>进行加密，最后存入数据库。TypeORM 提供一个装饰器<code>@BeforeInsert</code>，它的功能是在数据插入数据库前执行一个函数，符合我们现在的需求。因此接下来我们需要修改<code>user.entity.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// user.entity.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BeforeInsert</span>, ... , <span class="hljs-title class_">PrimaryGeneratedColumn</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> bcrypt <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;bcrypt&#x27;</span>;<br><br><span class="hljs-meta">@Entity</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>  <span class="hljs-meta">@PrimaryGeneratedColumn</span>()<br>  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;<br><br>...<br><br>  <span class="hljs-meta">@BeforeInsert</span>()<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">hashPassword</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span>) <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span> = bcrypt.<span class="hljs-title function_">hashSync</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span>, <span class="hljs-number">10</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>此时我们重新创建一个用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request POST <span class="hljs-string">&#x27;http://localhost:3000/user/&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;username=袁洋&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;password=123456&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;请求成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;袁洋&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$2b$10$Q4Ra7wjNSBCMVKHtbRUf4.rc.jr.wXSvolAI8IAJppUU8LB0AMgvW&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">13</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-13T00:51:13.030Z&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;updated_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-13T00:51:13.030Z&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>查看数据库：</p><img src="https://img.bald3r.wang/img/image-20230713165229514.png" alt="image-20230713165229514" style="zoom:50%;" /><p>可以看到数据库中的密码字段也已经更新。</p><p>细心的读者可能会发现，返回的数据中包含<code>password</code>字段，而大多数情况下不需要返回这个字段，因此需要剔除。</p><p>剔除有两种方法：</p><ol><li class="lvl-3"><p>拿到用户数据后，剔除<code>password</code>字段，再将其他字段返回。</p></li><li class="lvl-3"><p>从数据库中读取用户数据时，就不读取<code>password</code>字段。</p></li></ol><p>本文选择第二种方式。</p><p>修改<code>user.entity.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts">...<br><br><span class="hljs-meta">@Entity</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>  <span class="hljs-meta">@PrimaryGeneratedColumn</span>()<br>  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;<br><br>  <span class="hljs-meta">@Column</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;account&#x27;</span>, <span class="hljs-attr">unique</span>: <span class="hljs-literal">true</span> &#125;)<br>  <span class="hljs-attr">username</span>: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-meta">@Column</span>(&#123; <span class="hljs-attr">select</span>: <span class="hljs-literal">false</span> &#125;)     <span class="hljs-comment">// 增加了 select: false</span><br>  <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span>;<br><br>...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>该选项会在查表时跳过当前字段。</p><p>测试效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request GET <span class="hljs-string">&#x27;http://localhost:3000/user/1&#x27;</span><br></code></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;请求成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;孙明&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-12T23:53:01.321Z&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;updated_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-12T23:53:01.321Z&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可以看到结果中已经没有<code>password</code>字段。</p><h2 id="登录接口">登录接口</h2><p><code>passport.js</code>是 Node.js 中非常著名的一个用于做身份认证的包，它主要依靠策略（Strategy）来进行验证，因此我们还需要一个策略。在本次实践中，我们实现的是本地身份验证，因此我们使用<code>passport-local</code>这个策略。</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm i -S @nestjs/passport passport passport-local<br>pnpm i -D @types/passport @types/passport-local <br></code></pre></td></tr></table></figure><p>创建策略文件，由于 NestJS 并没有提供创建策略文件的命令，因此我们需要手动创建文件：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// /src/global/strategy/local.strategy.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PassportStrategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/passport&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Strategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;passport-local&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">IStrategyOptions</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;passport-local&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">InjectRepository</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Repository</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; compareSync &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;bcrypt&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BadRequestException</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/user/entities/user.entity&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PassportStrategy</span>(<span class="hljs-title class_">Strategy</span>) &#123;<span class="hljs-comment">// 此处的 Strategy 要引入 passport-local 中的 </span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-meta">@InjectRepository</span>(User) <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> userRepository: Repository&lt;User&gt;,<span class="hljs-comment">// 将 user 实体注入进来</span></span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-variable language_">super</span>(&#123;<br>      <span class="hljs-attr">usernameField</span>: <span class="hljs-string">&#x27;username&#x27;</span>,<span class="hljs-comment">// 固定写法，指定用户名字段，可以为 phone 或 email 等其他字段，不影响</span><br>      <span class="hljs-attr">passwordField</span>: <span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-comment">// 固定写法，指定密码字段</span><br>    &#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">IStrategyOptions</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">validate</span>(<span class="hljs-attr">username</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt; &#123;<span class="hljs-comment">// 必须实现一个 validate 方法</span><br>    <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userRepository</span><br>      .<span class="hljs-title function_">createQueryBuilder</span>(<span class="hljs-string">&#x27;user&#x27;</span>)<br>      .<span class="hljs-title function_">addSelect</span>(<span class="hljs-string">&#x27;user.password&#x27;</span>)<br>      .<span class="hljs-title function_">where</span>(<span class="hljs-string">&#x27;user.username=:username&#x27;</span>, &#123; username &#125;)<br>      .<span class="hljs-title function_">getOne</span>();<br><br>    <span class="hljs-keyword">if</span> (!user) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadRequestException</span>(<span class="hljs-string">&#x27;用户不存在&#x27;</span>);<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">compareSync</span>(password, user.<span class="hljs-property">password</span>))<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadRequestException</span>(<span class="hljs-string">&#x27;密码错误&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> user;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里我们导出了一个类<code>LocalStrategy</code>，继承自<code>PassportStrategy</code>，这个类首先需要指明两个字段<code>usernameField</code>和<code>passwordField</code>，一般来说用户登录都会提供至少两个字段，例如用户名（username）和密码（password），或者电子邮箱（email）和密码（password）等等，我们需要告知我们的策略，从请求的<code>body</code>中取哪两个字段用于验证。在本例中，我们使用的是<code>username</code>和<code>password</code>。</p><p>策略还必须实现一个方法<code>validate()</code>，这个方法会接受我们上面指定的两个字段作为参数，然后就需要查表，查出用户名对应的密码，进行比较。</p><p><strong>注意，由于我们在实体中设置了<code>password</code>字段的 <code>select : false</code>，因此我们使用<code>find()</code>方法是不会返回<code>password</code>字段的，因此我们需要使用<code>createQueryBuilder()</code>方法创建一个查询命令，再通过<code>addSelect()</code>方法手动将<code>password</code>字段添加上，这样查询到的数据中就会包含我们所需的<code>password</code>字段。</strong></p><p>创建好了策略，我们还需要一个登录接口，一般来说我们的登录地址为<code>/auth/login</code>，因此我们创建对应的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nest g mo auth   <br>nest g co auth<br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// auth.module.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthController</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./auth.controller&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LocalStrategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/global/strategy/local.strategy&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TypeOrmModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/user/entities/user.entity&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">TypeOrmModule</span>.<span class="hljs-title function_">forFeature</span>([<span class="hljs-title class_">User</span>])],<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">AuthController</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">LocalStrategy</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthModule</span> &#123;&#125;<br><br><span class="hljs-comment">// auth.controller.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Post</span>, <span class="hljs-title class_">UseGuards</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthGuard</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/passport&#x27;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;auth&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br>  <span class="hljs-meta">@UseGuards</span>(<span class="hljs-title class_">AuthGuard</span>(<span class="hljs-string">&#x27;local&#x27;</span>))<br>  <span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;login&#x27;</span>)<br>  <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;login&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request POST <span class="hljs-string">&#x27;http://localhost:3000/auth/login&#x27;</span> \<br>--header <span class="hljs-string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;username=wang&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;password=123456&#x27;</span><br></code></pre></td></tr></table></figure><p>响应成功：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;请求成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;login&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>响应失败：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 用户名输入错误</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">400</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;用户不存在&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">// 密码输入错误</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">400</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;密码错误&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="签发-JWT-Token">签发 JWT Token</h2><p>一般来说，登录成功之后会有两种记录登录状态的方式，一种是 Session ，一种是 Token ，本例中使用 JWT Token 。关于 JWT Token ，我也写了<a href="https://bald3r.wang/2023/05/18/%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E4%B8%8EJWT/">一篇文章</a>，感兴趣的读者可以移步<a href="https://bald3r.wang/">我的博客</a>查看。</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm i -S @nestjs/jwt<br></code></pre></td></tr></table></figure><p>修改<code>auth</code>模块：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthController</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./auth.controller&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">LocalStrategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/global/strategy/local.strategy&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TypeOrmModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/user/entities/user.entity&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">JwtModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/jwt&#x27;</span>;<br><br><span class="hljs-keyword">const</span> jwtModule = <span class="hljs-title class_">JwtModule</span>.<span class="hljs-title function_">register</span>(&#123;<br>  <span class="hljs-attr">secret</span>: <span class="hljs-string">&#x27;suibianshenme&#x27;</span>,<br>  <span class="hljs-attr">signOptions</span>: &#123; <span class="hljs-attr">expiresIn</span>: <span class="hljs-string">&#x27;4h&#x27;</span> &#125;,<br>&#125;);<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">TypeOrmModule</span>.<span class="hljs-title function_">forFeature</span>([<span class="hljs-title class_">User</span>]), jwtModule],<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">AuthController</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">LocalStrategy</span>],<br>  <span class="hljs-attr">exports</span>: [jwtModule],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthModule</span> &#123;&#125;<br><br></code></pre></td></tr></table></figure><p>添加<code>auth.service.ts</code>，分离登录逻辑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nest g service auth<br></code></pre></td></tr></table></figure><p>修改<code>auth.controller.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Post</span>, <span class="hljs-title class_">Req</span>, <span class="hljs-title class_">UseGuards</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthGuard</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/passport&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./auth.service&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">Request</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;auth&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> authService: AuthService</span>) &#123;&#125;<br>  <span class="hljs-meta">@UseGuards</span>(<span class="hljs-title class_">AuthGuard</span>(<span class="hljs-string">&#x27;local&#x27;</span>))<br>  <span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;login&#x27;</span>)<br>  <span class="hljs-title function_">login</span>(<span class="hljs-params"><span class="hljs-meta">@Req</span>() req: Request</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">login</span>(req.<span class="hljs-property">user</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>req.user</code>是我们的策略<code>local.strategy.ts</code>，最后验证成功后<code>return user</code>挂载上去的。</p><p>修改<code>auth.service.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">JwtService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/jwt&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/user/entities/user.entity&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthService</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> jwtService: JwtService</span>) &#123;&#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">user: Partial&lt;User&gt;</span>) &#123;<br>    <span class="hljs-keyword">const</span> payload = &#123; <span class="hljs-attr">username</span>: user.<span class="hljs-property">username</span>, <span class="hljs-attr">id</span>: user.<span class="hljs-property">id</span> &#125;;<br><br>    <span class="hljs-keyword">const</span> access_token = <span class="hljs-variable language_">this</span>.<span class="hljs-property">jwtService</span>.<span class="hljs-title function_">sign</span>(payload);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      access_token,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;Bearer&#x27;</span>,<br>    &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request POST <span class="hljs-string">&#x27;http://localhost:3000/auth/login&#x27;</span> \<br>--header <span class="hljs-string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;username=wang&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;password=123456&#x27;</span><br></code></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;请求成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;access_token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IndhbmciLCJpZCI6MTQsImlhdCI6MTY4OTMwNjc0NywiZXhwIjoxNjg5MzIxMTQ3fQ.QrV8vjQatf7KYaM6fwckNSuNC2A08IUFyGkJzMehzaw&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bearer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>至此，实现签发 JWT token 。</p><h2 id="验证-JWT-Token">验证 JWT Token</h2><p>用户在请求需要身份验证的接口时，会在请求的<code>headers</code>中增加一个字段<code>Authorization : Bearer &#123;token&#125;</code>，接下来我们就从请求头中取出 token 并进行验证。</p><p>我们使用的<code>passport.js</code>也提供了相应的策略<code>passport-jwt</code>，帮助我们进行验证。</p><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm i -S passport-jwt<br>pnpm i -D @types/passport-jwt<br></code></pre></td></tr></table></figure><p>创建新的策略：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// /src/global/strategy/jwt.strategy.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PassportStrategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/passport&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">InjectRepository</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Repository</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ExtractJwt</span>, <span class="hljs-title class_">Strategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;passport-jwt&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">StrategyOptions</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;passport-jwt&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">UnauthorizedException</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/user/entities/user.entity&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PassportStrategy</span>(<span class="hljs-title class_">Strategy</span>) &#123;<span class="hljs-comment">// 这里的 Strategy 必须是 passport-jwt 包中的</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-meta">@InjectRepository</span>(User) <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> userRepository: Repository&lt;User&gt;,</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-variable language_">super</span>(&#123;<br>      <span class="hljs-attr">jwtFromRequest</span>: <span class="hljs-title class_">ExtractJwt</span>.<span class="hljs-title function_">fromAuthHeaderAsBearerToken</span>(),<br>      <span class="hljs-attr">secretOrKey</span>: <span class="hljs-string">&#x27;suibianshenme&#x27;</span>,<br>    &#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">StrategyOptions</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">payload: User</span>) &#123;<br>    <span class="hljs-keyword">const</span> existUser = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userRepository</span>.<span class="hljs-title function_">findOne</span>(&#123;<br>      <span class="hljs-attr">where</span>: &#123; <span class="hljs-attr">id</span>: payload.<span class="hljs-property">id</span> &#125;,<br>    &#125;);<br><br>    <span class="hljs-keyword">if</span> (!existUser) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnauthorizedException</span>(<span class="hljs-string">&#x27;token验证失败&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> existUser;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>策略的内容与<code>local</code>策略基本一致，通过包提供的<code>ExtractJwt.fromAuthHeaderAsBearerToken()</code>方法可以自动从<code>headers</code>中提取<code>Authorization</code>中的 token ，并且会自动去除开头的<code>Bearer </code>前缀。注意这里的<code>secretOrKey</code>需要和签发时的<code>secret</code>一致。</p><p>策略必须实现一个方法<code>validate()</code>，其中的参数<code>payload</code>是我们签发的 JWT Token 中的<code>payload</code>部分：</p><img src="https://img.bald3r.wang/img/image-20230714135538574.png" alt="image-20230714135538574" style="zoom:50%;" /><p>所以<code>payload</code>这里其实是一个对象，包含了<code>username</code>和<code>id</code>字段。</p><p>创建好策略后，我们还需要注册这个策略。</p><p>例如我们给获取用户信息接口<code>GET /user/&#123;id&#125;</code>加入 Token 验证：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// user.module.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.service&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserController</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.controller&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TypeOrmModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./entities/user.entity&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">JwtStrategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/global/strategy/jwt.strategy&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">TypeOrmModule</span>.<span class="hljs-title function_">forFeature</span>([<span class="hljs-title class_">User</span>])],<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">UserController</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">UserService</span>, <span class="hljs-title class_">JwtStrategy</span>],<span class="hljs-comment">// 将策略加入 providers 数组</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModule</span> &#123;&#125;<br><br><span class="hljs-comment">// user.controller.ts</span><br><br><span class="hljs-keyword">import</span> &#123;<br>  ...,<br>  <span class="hljs-title class_">UseGuards</span>,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthGuard</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/passport&#x27;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;user&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> userService: UserService</span>) &#123;&#125;<br>  <br>  ...<br><br>  <span class="hljs-meta">@UseGuards</span>(<span class="hljs-title class_">AuthGuard</span>(<span class="hljs-string">&#x27;jwt&#x27;</span>))<br>  <span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;:id&#x27;</span>)<br>  <span class="hljs-title function_">findOne</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;id&#x27;</span>) id: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">findOne</span>(+id);<br>  &#125;<br><br>...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request GET <span class="hljs-string">&#x27;http://localhost:3000/user/1&#x27;</span> <br></code></pre></td></tr></table></figure><p>请求失败：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">401</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Unauthorized&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>我们先登录，然后将得到的 JWT Token 加入到<code>headers</code>中，重新请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request GET <span class="hljs-string">&#x27;http://localhost:3000/user/1&#x27;</span> \<br>--header <span class="hljs-string">&#x27;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IndhbmciLCJpZCI6MTQsImlhdCI6MTY4OTMxNDY3NywiZXhwIjoxNjg5MzI5MDc3fQ.KMXnv3X_CIZHwRdnFxMPIbs_H5_mMKpE3oDqcMICWh8&#x27;</span> <br></code></pre></td></tr></table></figure><p>请求成功：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;请求成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;孙明&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-12T23:53:01.321Z&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;updated_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-12T23:53:01.321Z&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>但是如果对每个接口都加一个<code>@UseGuard(AuthGuard('jwt'))</code>显然是繁琐且重复的，绝大多数接口都是需要验证身份的，只有诸如登录一类的接口是不需要认证的，因此我们下一步就是全局注册。</p><h2 id="将-Token-验证应用到全局">将 Token 验证应用到全局</h2><p>首先我们需要理清思路：</p><ul class="lvl-0"><li class="lvl-2"><p>现有的<code>AuthGuard('jwt')</code>无法满足需求，我们需要定制</p></li><li class="lvl-2"><p>有个别接口不需要验证，需要排除/标记</p></li></ul><h3 id="做排除">做排除</h3><p>我们可以维护一个白名单，在策略中验证请求的 url 是否在白名单中，如果是则跳过验证。这里笔者就不展开了。</p><h3 id="做标记">做标记</h3><p>我们自定义一个装饰器<code>@Public</code>来标记接口是否为公共接口，所有被标记的接口都可以不需要身份验证。</p><p>在<code>/src/global/decorator</code>目录下创建一个<code>public.decorator.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">SetMetadata</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">IS_PUBLIC_KEY</span> = <span class="hljs-string">&#x27;isPublic&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Public</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title class_">SetMetadata</span>(<span class="hljs-variable constant_">IS_PUBLIC_KEY</span>, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>这里主要是使用了<code>SetMetadata()</code>方法，给接口设置了一个元数据（Metadata）<code>isPublic : true</code></p><p>然后给接口加上这个标记：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// auth.controller.ts</span><br><br>...<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;auth&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> authService: AuthService</span>) &#123;&#125;<br>  <span class="hljs-meta">@Public</span>()<br>  <span class="hljs-meta">@UseGuards</span>(<span class="hljs-title class_">AuthGuard</span>(<span class="hljs-string">&#x27;local&#x27;</span>))<br>  <span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;login&#x27;</span>)<br>  <span class="hljs-title function_">login</span>(<span class="hljs-params"><span class="hljs-meta">@Req</span>() req: Request</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">authService</span>.<span class="hljs-title function_">login</span>(req.<span class="hljs-property">user</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除我们之前加在<code>user.controller.ts</code>中的代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// user.controller.ts</span><br><br><span class="hljs-keyword">import</span> &#123;<br>  ...,<br>  <span class="hljs-title class_">UseGuards</span>,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthGuard</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/passport&#x27;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;user&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> userService: UserService</span>) &#123;&#125;<br>  <br>  ...<br><br><span class="hljs-comment">//@UseGuards(AuthGuard(&#x27;jwt&#x27;))</span><br>  <span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;:id&#x27;</span>)<br>  <span class="hljs-title function_">findOne</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;id&#x27;</span>) id: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">findOne</span>(+id);<br>  &#125;<br><br>...<br><br></code></pre></td></tr></table></figure><h3 id="定制一个-Guard">定制一个 Guard</h3><blockquote><p>在 Nest.js 中，Guard（守卫）是一种用于保护路由和执行权限验证的特殊类型组件。它允许您在请求到达路由处理程序之前对请求进行拦截，并根据特定条件来允许或拒绝请求的访问。</p><p>Guard 可以用于实现各种身份验证和授权策略，例如基于角色的访问控制、JWT 验证、OAuth 认证等。它们可以在路由级别或处理程序级别应用，以确保请求的安全性和合法性。</p><p>Guard 类必须实现 <code>CanActivate</code> 接口，并实现 <code>canActivate()</code> 方法来定义守卫的逻辑。在该方法中，您可以根据请求的特征、用户信息、权限等进行验证，并返回一个布尔值来表示是否允许请求继续执行。</p></blockquote><p>在<code>/src/global/guard</code>目录下创建一个<code>jwt-auth.guard.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">ExecutionContext</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthGuard</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/passport&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Reflector</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">Observable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">IS_PUBLIC_KEY</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../decorator/public.decorator&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthGuard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">AuthGuard</span>(<span class="hljs-string">&#x27;jwt&#x27;</span>) &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> reflector: Reflector</span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>  &#125;<br><br>  <span class="hljs-title function_">canActivate</span>(<br>    <span class="hljs-attr">context</span>: <span class="hljs-title class_">ExecutionContext</span>,<br>  ): <span class="hljs-built_in">boolean</span> | <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">boolean</span>&gt; | <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-built_in">boolean</span>&gt; &#123;<br>    <span class="hljs-keyword">const</span> isPublic = <span class="hljs-variable language_">this</span>.<span class="hljs-property">reflector</span>.<span class="hljs-property">getAllAndOverride</span>&lt;<span class="hljs-built_in">boolean</span>&gt;(<span class="hljs-variable constant_">IS_PUBLIC_KEY</span>, [<br>      context.<span class="hljs-title function_">getHandler</span>(),<br>      context.<span class="hljs-title function_">getClass</span>(),<br>    ]);<br><br>    <span class="hljs-keyword">if</span> (isPublic) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">canActivate</span>(context);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的 Guard 必须实现一个<code>canActive()</code>方法，本例中，我们通过<code>Reflector</code>拿到了通过装饰器设置的元数据<code>isPublic</code>，如果其为<code>true</code>，继续执行请求的逻辑，如果为<code>false</code>，将请求传递给其他代码执行。</p><p>在<code>app.module.ts</code>中注册这个 Guard：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.service&#x27;</span>;<br>...<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">JwtAuthGuard</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./global/guard/jwt-auth.guard&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">APP_GUARD</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  ...<br>  <span class="hljs-attr">providers</span>: [<br>    <span class="hljs-title class_">AppService</span>,<br>    &#123;<br>      <span class="hljs-attr">provide</span>: <span class="hljs-variable constant_">APP_GUARD</span>,<br>      <span class="hljs-attr">useClass</span>: <span class="hljs-title class_">JwtAuthGuard</span>,<br>    &#125;,<br>  ],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>这时我们重新请求<code>GET /user/&#123;id&#125;</code>和<code>GET /user</code>，都会提示未验证，但是我们请求<code>POST /auth/login</code>是没问题的，至此 JWT 验证部分就结束了。</p><h2 id="环境变量">环境变量</h2><p>截至目前，我们的项目中有两个敏感信息是明文写在代码中的，一个是我们连接数据库的信息，一个是我们签发 JWT Token 的密钥。出于安全性考虑，我们一般会将这些数据写在环境变量中，让我们的代码运行时从环境变量中读取。</p><p>创建<code>.env.local</code>文件，用于本地开发，创建<code>.env.prod</code>用于生产环境，这里以<code>.env.local</code>为例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// .env.local</span><br><br><span class="hljs-variable constant_">DB_HOST</span>=localhost<br><span class="hljs-variable constant_">DB_PORT</span>=<span class="hljs-number">3306</span><br><span class="hljs-variable constant_">DB_USERNAME</span>=root<br><span class="hljs-variable constant_">DB_PASSWORD</span>=<span class="hljs-number">123456</span><br><span class="hljs-variable constant_">DB_DATABASE</span>=nest-demo<br><br><span class="hljs-variable constant_">JWT_SECRET</span>=superNB<br><span class="hljs-variable constant_">JWT_EXPIRES_IN</span>=10m<br></code></pre></td></tr></table></figure><p>在根目录<code>/</code>下新建<code>config</code>目录，用来存放我们读取环境变量的代码，并在该目录下创建文件<code>envConfig.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// envConfig.ts</span><br><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:fs&#x27;</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:path&#x27;</span><br><br><span class="hljs-keyword">const</span> isProd = process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">parseEnv</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> localEnv = path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;.env.local&#x27;</span>)<br>  <span class="hljs-keyword">const</span> prodEnv = path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;.env.prod&#x27;</span>)<br><br>  <span class="hljs-keyword">if</span> (!fs.<span class="hljs-title function_">existsSync</span>(localEnv) &amp;&amp; !fs.<span class="hljs-title function_">existsSync</span>(prodEnv))<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;缺少环境配置文件&#x27;</span>)<br><br>  <span class="hljs-keyword">const</span> filePath = isProd &amp;&amp; fs.<span class="hljs-title function_">existsSync</span>(prodEnv) ? prodEnv : localEnv<br>  <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">path</span>: filePath &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">parseEnv</span>()<br></code></pre></td></tr></table></figure><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm i -S @nestjs/config<br></code></pre></td></tr></table></figure><p>然后在<code>app.module.ts</code>中全局注册我们的<code>config</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// app.module.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span>;<br><span class="hljs-keyword">import</span> envConfig <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;config/envConfig&#x27;</span>;<br>...<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">ConfigModule</span>.<span class="hljs-title function_">forRoot</span>(&#123;<br>      <span class="hljs-attr">isGlobal</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">envFilePath</span>: [envConfig.<span class="hljs-property">path</span>],<br>    &#125;),<br>  ...<br>  ],<br>  ...<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>然后也是在<code>app.module.ts</code>中将我们数据库信息替换成环境变量中读取的信息：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// app.module.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TypeOrmModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigModule</span>, <span class="hljs-title class_">ConfigService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span>;<br>...<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    ...<br>    <span class="hljs-title class_">TypeOrmModule</span>.<span class="hljs-title function_">forRootAsync</span>(&#123;<br>      <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">ConfigModule</span>],<br>      <span class="hljs-attr">inject</span>: [<span class="hljs-title class_">ConfigService</span>],<br>      <span class="hljs-attr">useFactory</span>: <span class="hljs-keyword">async</span> (<span class="hljs-attr">configService</span>: <span class="hljs-title class_">ConfigService</span>) =&gt; (&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>        <span class="hljs-attr">host</span>: configService.<span class="hljs-property">get</span>&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;DB_HOST&#x27;</span>) ?? <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>        <span class="hljs-attr">port</span>: configService.<span class="hljs-property">get</span>&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-string">&#x27;DB_PORT&#x27;</span>) ?? <span class="hljs-number">3306</span>,<br>        <span class="hljs-attr">username</span>: configService.<span class="hljs-property">get</span>&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;DB_USERNAME&#x27;</span>) ?? <span class="hljs-string">&#x27;root&#x27;</span>,<br>        <span class="hljs-attr">password</span>: configService.<span class="hljs-property">get</span>&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;DB_PASSWORD&#x27;</span>) ?? <span class="hljs-string">&#x27;123456&#x27;</span>,<br>        <span class="hljs-attr">database</span>: configService.<span class="hljs-property">get</span>&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;DB_DATABASE&#x27;</span>) ?? <span class="hljs-string">&#x27;nest-demo&#x27;</span>,<br>        <span class="hljs-attr">synchronize</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">retryDelay</span>: <span class="hljs-number">500</span>,<br>        <span class="hljs-attr">retryAttempts</span>: <span class="hljs-number">10</span>,<br>        <span class="hljs-attr">autoLoadEntities</span>: <span class="hljs-literal">true</span>,<br>      &#125;),<br>    &#125;),<br>  ],<br>  ...<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>将原本代码中签发和验证 JWT 处的密钥进行替换：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// /src/auth/auth.module.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">JwtModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/jwt&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span>;<br>...<br><br><span class="hljs-keyword">const</span> jwtModule = <span class="hljs-title class_">JwtModule</span>.<span class="hljs-title function_">registerAsync</span>(&#123;<br>  <span class="hljs-attr">inject</span>: [<span class="hljs-title class_">ConfigService</span>],<br>  <span class="hljs-attr">useFactory</span>: <span class="hljs-keyword">async</span> (<span class="hljs-attr">configService</span>: <span class="hljs-title class_">ConfigService</span>) =&gt; (&#123;<br>    <span class="hljs-attr">secret</span>: configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;JWT_SECRET&#x27;</span>) ?? <span class="hljs-string">&#x27;secret&#x27;</span>,<br>    <span class="hljs-attr">signOptions</span>: &#123;<br>      <span class="hljs-attr">expiresIn</span>: configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;JWT_EXPIRES_IN&#x27;</span>) ?? <span class="hljs-string">&#x27;10m&#x27;</span>,<br>    &#125;,<br>  &#125;),<br>&#125;);<br>...<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthModule</span> &#123;&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// /src/global/strategy/jwt.strategy.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PassportStrategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/passport&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ExtractJwt</span>, <span class="hljs-title class_">Strategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;passport-jwt&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">StrategyOptions</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;passport-jwt&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">UnauthorizedException</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span>;<br>...<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PassportStrategy</span>(<span class="hljs-title class_">Strategy</span>) &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    ...</span><br><span class="hljs-params">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> configService: ConfigService,</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-variable language_">super</span>(&#123;<br>      <span class="hljs-attr">jwtFromRequest</span>: <span class="hljs-title class_">ExtractJwt</span>.<span class="hljs-title function_">fromAuthHeaderAsBearerToken</span>(),<br>      <span class="hljs-attr">secretOrKey</span>: configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;JWT_SECRET&#x27;</span>) ?? <span class="hljs-string">&#x27;secret&#x27;</span>,<br>    &#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">StrategyOptions</span>);<br>  &#125;<br><br>  ...<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="后记">后记</h2><p>笔者也是刚刚接触 Node ，目前还存在诸多不足，如果文章中有任何错误，欢迎在评论区批评指正。</p><p><a href="https://github.com/baIder/nest-demo">Nest学习系列博客代码仓库 (github.com)</a></p><p><a href="https://bald3r.wang/">冷面杀手的个人站 (bald3r.wang)</a></p><p><a href="https://bald3r.wang/tags/NestJS/">NestJS 相关文章</a></p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
      <category>NestJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>NestJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NestJS 入门（二）格式化响应数据及错误处理</title>
    <link href="/2023/07/14/NestJS-%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E5%8F%8A%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <url>/2023/07/14/NestJS-%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E5%8F%8A%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>之前的章节，我们学习了如何用 NestJS 创建一个项目并连接数据库，并实现了一个对用户<code>user</code>的简单的 CRUD 接口。这一章我们将学习如何将返回的内容规范化。</p><h2 id="情景">情景</h2><p>目前我们的接口返回数据杂乱无章，例如成功创建用户后接口返回了用户信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;许平&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-12T23:53:09.109Z&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;updated_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-12T23:53:09.109Z&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>创建失败则会返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;password should not be empty&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bad Request&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;statusCode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">400</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>而我们希望我们返回的数据有着统一的格式，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;请求成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;access_token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;token&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bearer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>code</code>字段代表了请求的状态，<code>0</code>为成功，<code>其他</code>为失败，<code>message</code>则是操作的相关信息，<code>content</code>则是返回的请求的内容。</p><p>想实现这样的效果，需要先了解一些概念。</p><h2 id="Interceptors-拦截器">Interceptors 拦截器</h2><blockquote><p>拦截器（Interceptors）是在 Nest.js 框架中用于处理控制器方法的一种特殊类型组件。它们提供了一种在方法执行之前、之后或发生异常时进行拦截和操作的机制。</p><p>拦截器可以用于在方法执行前进行一些预处理操作，例如身份验证、权限检查、日志记录等。它们还可以在方法执行后对结果进行处理，例如格式化响应、数据转换等。此外，拦截器还可以捕获方法执行过程中的异常，并进行特定的处理或返回自定义的错误响应。</p></blockquote><p>我们需要借用拦截器来对返回的数据进行格式化。</p><h3 id="请求成功">请求成功</h3><p>首先我们用命令创建一个拦截器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nest g interceptor global/interceptor/transform<br></code></pre></td></tr></table></figure><p>编辑<code>transform.interceptor.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CallHandler</span>, <span class="hljs-title class_">ExecutionContext</span>, <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">NestInterceptor</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Observable</span>, map &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestInterceptor</span> &#123;<br>  <span class="hljs-title function_">intercept</span>(<span class="hljs-attr">context</span>: <span class="hljs-title class_">ExecutionContext</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">CallHandler</span>): <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-built_in">any</span>&gt; &#123;<br>    <span class="hljs-keyword">return</span> next.<span class="hljs-title function_">handle</span>().<span class="hljs-title function_">pipe</span>(<br>      <span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">code</span>: <span class="hljs-number">0</span>,<br>          <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请求成功&#x27;</span>,<br>          data,<br>        &#125;;<br>      &#125;),<br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后我们在<code>main.ts</code>中全局注册一下这个拦截器：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// main.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.module&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ValidationPipe</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TransformInterceptor</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./global/interceptor/transform/transform.interceptor&#x27;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  app.<span class="hljs-title function_">useGlobalPipes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationPipe</span>());<br>  app.<span class="hljs-title function_">useGlobalInterceptors</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformInterceptor</span>())<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-title function_">bootstrap</span>();<br></code></pre></td></tr></table></figure><p>测试一下拦截器有没有创建成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request GET <span class="hljs-string">&#x27;http://localhost:3000/user/1&#x27;</span><br></code></pre></td></tr></table></figure><p>响应为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;请求成功&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;孙明&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-12T23:53:01.321Z&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;updated_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-12T23:53:01.321Z&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Filter-过滤器">Filter 过滤器</h2><blockquote><p>在 Nest.js 中，过滤器（Filters）是一种用于处理异常的特殊类型组件。它们允许您在应用程序中捕获和处理全局或特定路由处理程序中抛出的异常。</p><p>过滤器用于捕获控制器方法执行过程中可能出现的异常，并根据异常类型或其他条件执行相应的操作。它们可以用于处理和转换异常响应，返回自定义错误消息，记录日志，或执行其他适当的操作。</p></blockquote><p>接下来我们通过过滤器来处理请求过程中的报错。</p><p>通过命令创建一个过滤器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nest g filter global/filter/http-exception<br></code></pre></td></tr></table></figure><p>编辑文件<code>http-exception.filter.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ArgumentsHost</span>, <span class="hljs-title class_">Catch</span>, <span class="hljs-title class_">ExceptionFilter</span>, <span class="hljs-title class_">HttpException</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Response</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;<br><br><span class="hljs-meta">@Catch</span>(<span class="hljs-title class_">HttpException</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpExceptionFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ExceptionFilter</span> &#123;<br>  <span class="hljs-keyword">catch</span>(<span class="hljs-attr">exception</span>: <span class="hljs-title class_">HttpException</span>, <span class="hljs-attr">host</span>: <span class="hljs-title class_">ArgumentsHost</span>) &#123;<br>    <span class="hljs-keyword">const</span> ctx = host.<span class="hljs-title function_">switchToHttp</span>();<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">response</span>: <span class="hljs-title class_">Response</span> = ctx.<span class="hljs-title function_">getResponse</span>();<br>    <span class="hljs-keyword">const</span> status = exception.<span class="hljs-title function_">getStatus</span>();<br><br>    <span class="hljs-keyword">const</span> message = exception.<span class="hljs-property">message</span> ? exception.<span class="hljs-property">message</span> : <br>    status &gt;= <span class="hljs-number">500</span> ? <span class="hljs-string">&#x27;Internal server error&#x27;</span> : <span class="hljs-string">&#x27;Bad request&#x27;</span>;<br>    <span class="hljs-keyword">const</span> errorResponse = &#123;<br>      <span class="hljs-attr">code</span>: status,<br>      message,<br>      <span class="hljs-attr">content</span>: &#123;&#125;,<br>    &#125;;<br><br>    response.<span class="hljs-title function_">status</span>(status);<br>    response.<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/json; charset=utf-8&#x27;</span>);<br>    response.<span class="hljs-title function_">send</span>(errorResponse);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>然后我们在<code>main.ts</code>中全局注册这个过滤器：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.module&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ValidationPipe</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TransformInterceptor</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./global/interceptor/transform/transform.interceptor&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HttpExceptionFilter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./global/filter/http-exception/http-exception.filter&#x27;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  app.<span class="hljs-title function_">useGlobalPipes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationPipe</span>());<br>  app.<span class="hljs-title function_">useGlobalInterceptors</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformInterceptor</span>());<br>  app.<span class="hljs-title function_">useGlobalFilters</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpExceptionFilter</span>());<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-title function_">bootstrap</span>();<br></code></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request POST <span class="hljs-string">&#x27;http://localhost:3000/user/&#x27;</span> --data-urlencode <span class="hljs-string">&#x27;username=段静&#x27;</span><br></code></pre></td></tr></table></figure><p>响应结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">400</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bad Request Exception&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>说明我们的错误过滤器已经成功应用了。</p><h2 id="后记">后记</h2><p>笔者也是刚刚接触 Node ，目前还存在诸多不足，如果文章中有任何错误，欢迎在评论区批评指正。</p><p><a href="https://github.com/baIder/nest-demo">Nest学习系列博客代码仓库 (github.com)</a></p><p><a href="https://bald3r.wang/">冷面杀手的个人站 (bald3r.wang)</a></p><p><a href="https://bald3r.wang/tags/NestJS/">NestJS 相关文章</a></p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
      <category>NestJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>NestJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NestJS 入门（一）创建项目及第一个 CRUD</title>
    <link href="/2023/07/12/NestJS-%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/07/12/NestJS-%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>NestJS是基于Node的后端框架，底层使用了Express作为HTTP服务框架（也可使用Fastify），对TypeScript有着非常良好的支持，上手也非常简单。本文意在通过一个简单的接口示例，帮助读者快速学会如何使用NestJS写接口。</p><h2 id="前置概念">前置概念</h2><h3 id="IoC-控制反转-与-DI-依赖注入">IoC 控制反转 与 DI 依赖注入</h3><p>IoC，Inversion of Control，意为控制反转，旨在解耦组件之间的依赖关系。</p><blockquote><p>在传统的编程模型中，组件之间的依赖关系由调用者来控制，即调用者创建并管理被调用者的实例。而在 IoC 的模式下，这种控制权被反转，由容器（通常是一个框架或容器库）负责创建和管理组件的实例，同时负责解决它们之间的依赖关系。</p><p>IoC 的核心思想是将组件之间的依赖关系的创建和解析过程委托给一个容器，调用者只需要声明它们的依赖关系，而不需要直接负责实例的创建和管理。容器负责根据依赖关系进行实例的创建、注入和生命周期的管理。</p></blockquote><p>DI，Dependency Injection，依赖注入，是IoC的一种表现形式。</p><p>使用<a href="https://xiaoman.blog.csdn.net/article/details/126151370">小满zs</a>提供的一个例子：</p><p>未使用IoC：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    &#125;<br>&#125;<br> <br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span><br>    <span class="hljs-attr">entity</span>:A<br>    <span class="hljs-title function_">constructor</span> (<span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">entity</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>(<span class="hljs-string">&#x27;小满&#x27;</span>)<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">const</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>(<span class="hljs-number">18</span>)<br> <br>c.<span class="hljs-property">entity</span>.<span class="hljs-property">name</span><br></code></pre></td></tr></table></figure><p>使用IoC：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    &#125;<br>&#125;<br> <br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    &#125;<br>&#125;<br><span class="hljs-comment">//中间件用于解耦</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Container</span> &#123;<br>    <span class="hljs-attr">modeuls</span>: <span class="hljs-built_in">any</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">modeuls</span> = &#123;&#125;<br>    &#125;<br>    <span class="hljs-title function_">provide</span>(<span class="hljs-params">key: <span class="hljs-built_in">string</span>, modeuls: <span class="hljs-built_in">any</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">modeuls</span>[key] = modeuls<br>    &#125;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">modeuls</span>[key]<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">const</span> mo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Container</span>()<br>mo.<span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>(<span class="hljs-string">&#x27;1&#x27;</span>))<br>mo.<span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title function_">C</span>(<span class="hljs-string">&#x27;2&#x27;</span>))<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-built_in">any</span><br>    <span class="hljs-attr">c</span>: <span class="hljs-built_in">any</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">container: Container</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = container.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">c</span> = container.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;c&#x27;</span>)<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>(mo)<br></code></pre></td></tr></table></figure><p>示例中使用了一个容器<code>container</code>来收集依赖，供其他组件使用。</p><h3 id="装饰器">装饰器 @</h3><p>装饰器分为类装饰器（Class Decorator），属性装饰器（Property Decorator），方法装饰器（Method Decorator），参数装饰器（Parameter Decorator），区别在于修饰的对象不同，接受的参数也不同。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs TS"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CDecorator</span>: <span class="hljs-title class_">ClassDecorator</span> = <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>  target.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;哈哈&quot;</span>;<br>&#125;;<br><br><span class="hljs-meta">@CDecorator</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">any</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">name</span>);<br><br><span class="hljs-comment">// =&gt; 哈哈</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">PDecorator</span>: <span class="hljs-title class_">PropertyDecorator</span> = <span class="hljs-function">(<span class="hljs-params">target: <span class="hljs-built_in">any</span>, key: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target, key);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">MDecorator</span>: <span class="hljs-title class_">MethodDecorator</span> = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  target: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  key: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  descriptor: <span class="hljs-built_in">any</span></span></span><br><span class="hljs-params"><span class="hljs-function"></span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target, key, descriptor);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ParameterDecorator</span>: <span class="hljs-title class_">ParameterDecorator</span> = <span class="hljs-function">(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">  target: <span class="hljs-built_in">any</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  key: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">symbol</span> | <span class="hljs-literal">undefined</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">  index: <span class="hljs-built_in">number</span></span></span><br><span class="hljs-params"><span class="hljs-function"></span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target, key, index);<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>  <span class="hljs-meta">@PDecorator</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>  &#125;<br>  <span class="hljs-meta">@MDecorator</span><br>  <span class="hljs-title function_">getName</span>(<span class="hljs-params"><span class="hljs-meta">@ParameterDecorator</span> name: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//输出结果</span><br><br>属性装饰器<br>&#123;&#125; name<br><br>参数装饰器<br>&#123;&#125; getName <span class="hljs-number">0</span><br><br>方法装饰器<br>&#123;&#125; getName &#123;<br>  <span class="hljs-attr">value</span>: [<span class="hljs-title class_">Function</span>: getName],<br>  <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="初始化项目">初始化项目</h2><ol><li class="lvl-3"><p>首先安装@nestjs/cli</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm install -g @nestjs/cli<br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>新建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nest new [项目名称]<br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>启动项目（热更新）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm run start:dev<br></code></pre></td></tr></table></figure></li></ol><p><img src="https://img.bald3r.wang/img/image-20230710154418840.png" alt=""></p><p>查看是否启动成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl http://127.0.0.1:3000<br><br>Hello World!<br></code></pre></td></tr></table></figure><h2 id="文件结构">文件结构</h2><table><thead><tr><th>*.controller.spec.ts</th><th>测试文件</th></tr></thead><tbody><tr><td>*.controller.ts</td><td>controller 路由部分</td></tr><tr><td>*.module.ts</td><td>IoC 容器</td></tr><tr><td>*.service.ts</td><td>controller 逻辑部分</td></tr><tr><td>main.ts</td><td>入口</td></tr></tbody></table><h2 id="nest-命令">nest 命令</h2><p>@nestjs/cli 预置了很多创建命令，可以通过<code>nest --help</code>查看。</p><p><img src="https://img.bald3r.wang/img/image-20230710155357620.png" alt=""></p><p>可以通过<code>nest g [name]</code>来快速创建文件，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nest g mo user<br>nest g co user<br></code></pre></td></tr></table></figure><p><img src="https://img.bald3r.wang/img/image-20230710155651876.png" alt=""></p><p>通过命令生成的文件，也会自动DI，例如这里我们创建了一个模块文件，后创建了一个控制器，后创建的控制器就自动注入到模块中了。</p><p>也可以通过<code>nest g res [name]</code>快速创建一整个模块，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">nest g res menu<br>----------------------------------------------------<br>? What transport layer <span class="hljs-keyword">do</span> you use? REST API<br>? Would you like to generate CRUD entry points? Yes<br>CREATE src/menu/menu.controller.spec.ts (556 bytes)<br>CREATE src/menu/menu.controller.ts (883 bytes)<br>CREATE src/menu/menu.module.ts (240 bytes)<br>CREATE src/menu/menu.service.spec.ts (446 bytes)<br>CREATE src/menu/menu.service.ts (607 bytes)<br>CREATE src/menu/dto/create-menu.dto.ts (30 bytes)<br>CREATE src/menu/dto/update-menu.dto.ts (169 bytes)<br>CREATE src/menu/entities/menu.entity.ts (21 bytes)<br>UPDATE package.json (1987 bytes)<br>UPDATE src/app.module.ts (369 bytes)<br>✔ Packages installed successfully.<br></code></pre></td></tr></table></figure><p><img src="https://img.bald3r.wang/img/image-20230710160001957.png" alt=""></p><h2 id="Controller-控制器">Controller 控制器</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Get</span>, <span class="hljs-title class_">Post</span>, <span class="hljs-title class_">Body</span>, <span class="hljs-title class_">Patch</span>, <span class="hljs-title class_">Param</span>, <span class="hljs-title class_">Delete</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.service&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CreateUserDto</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dto/create-user.dto&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UpdateUserDto</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dto/update-user.dto&#x27;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;user&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> userService: UserService</span>) &#123;&#125;<br><br>  <span class="hljs-meta">@Post</span>()<br>  <span class="hljs-title function_">create</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() createUserDto: CreateUserDto</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">create</span>(createUserDto);<br>  &#125;<br><br>  <span class="hljs-meta">@Get</span>()<br>  <span class="hljs-title function_">findAll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">findAll</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Get</span>(<span class="hljs-string">&#x27;:id&#x27;</span>)<br>  <span class="hljs-title function_">findOne</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;id&#x27;</span>) id: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">findOne</span>(+id);<br>  &#125;<br><br>  <span class="hljs-meta">@Patch</span>(<span class="hljs-string">&#x27;:id&#x27;</span>)<br>  <span class="hljs-title function_">update</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;id&#x27;</span>) id: <span class="hljs-built_in">string</span>, <span class="hljs-meta">@Body</span>() updateUserDto: UpdateUserDto</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">update</span>(+id, updateUserDto);<br>  &#125;<br><br>  <span class="hljs-meta">@Delete</span>(<span class="hljs-string">&#x27;:id&#x27;</span>)<br>  <span class="hljs-title function_">remove</span>(<span class="hljs-params"><span class="hljs-meta">@Param</span>(<span class="hljs-string">&#x27;id&#x27;</span>) id: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">remove</span>(+id);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="参数装饰器">参数装饰器</h3><p>请求中往往会携带很多信息，我们可以通过参数装饰器便捷的获取我们需要的数据。</p><table><thead><tr><th>@Param()</th><th>路径参数 /user/:id</th></tr></thead><tbody><tr><td>@Query()</td><td>查询参数 /user?page=1&amp;pageSize=5</td></tr><tr><td>@Body()</td><td>请求体</td></tr><tr><td>@Headers()</td><td>请求头</td></tr></tbody></table><h2 id="DTO-与数据校验">DTO 与数据校验</h2><blockquote><p>在 Nest.js 中，DTO（Data Transfer Object）是一种用于数据传输的对象，用于在不同层之间传递数据。DTO 可以包含一组属性，这些属性与数据传输相关，并且可以用于从客户端向服务器传递数据，或者在服务器内部的不同模块之间传递数据。</p></blockquote><img src="https://img.bald3r.wang/img/image-20230710225933459.png" alt="image-20230710225933459" style="zoom:50%;" /><p>在 dto 文件中描述数据：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// create-user.dto.ts</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateUserDto</span> &#123;<br>  <span class="hljs-attr">username</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们略微改造一下逻辑作为示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// user.service.ts</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">createUserDto: CreateUserDto</span>) &#123;<br>  <span class="hljs-keyword">return</span> createUserDto;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request POST <span class="hljs-string">&#x27;http://localhost:3000/user&#x27;</span> \<br>--header <span class="hljs-string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;username=1&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;password=123&#x27;</span> <br>--------------------------------------------------------<br>&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;%<br></code></pre></td></tr></table></figure><p>此时并不会对数据进行验证，例如我们没传<code>username</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request POST <span class="hljs-string">&#x27;http://localhost:3000/user&#x27;</span> \<br>--header <span class="hljs-string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;password=123&#x27;</span> <br>--------------------------------------------------------<br>&#123;<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;%  <br></code></pre></td></tr></table></figure><p>而我们希望将<code>username</code>和<code>password</code>作为必传项，因此需要进行数据验证。</p><p>NestJS 提供了 pipe（管道）来进行数据的转换和验证，在目前的情景下，我们使用 NestJS 自带的<code>ValidationPipe</code>结合<code>class-validator</code>就可以满足我们验证数据的需求。</p><p>首先我们在<code>main.ts</code>中全局注册管道<code>ValidationPipe</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// main.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.module&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ValidationPipe</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  app.<span class="hljs-title function_">useGlobalPipes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationPipe</span>());<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-title function_">bootstrap</span>();<br></code></pre></td></tr></table></figure><p>然后安装<code>class-validator</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm i class-validator class-transformer -S<br></code></pre></td></tr></table></figure><p>同样是使用装饰器语法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// create-user.dto.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IsNotEmpty</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;class-validator&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CreateUserDto</span> &#123;<br>  <span class="hljs-meta">@IsNotEmpty</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;用户名不能为空&#x27;</span> &#125;)<br>  <span class="hljs-attr">username</span>: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-meta">@IsNotEmpty</span>()<br>  <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，我们重新发请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request POST <span class="hljs-string">&#x27;http://localhost:3000/user&#x27;</span> \<br>--header <span class="hljs-string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;password=123&#x27;</span><br>---------------------------------------------------------<br>&#123;<span class="hljs-string">&quot;message&quot;</span>:[<span class="hljs-string">&quot;用户名不能为空&quot;</span>],<span class="hljs-string">&quot;error&quot;</span>:<span class="hljs-string">&quot;Bad Request&quot;</span>,<span class="hljs-string">&quot;statusCode&quot;</span>:400&#125;%  <br></code></pre></td></tr></table></figure><h2 id="连接数据库">连接数据库</h2><p>这里我们使用 TypeORM 作为我们的 ORM 框架。</p><blockquote><p>ORM 是一种将对象模型与关系数据库之间进行映射的技术，通过 ORM 框架可以将数据库中的表和行映射到程序中的对象和属性。</p></blockquote><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pnpm i --save @nestjs/typeorm typeorm mysql2<br></code></pre></td></tr></table></figure><p>准备好我们的数据库，然后在<code>app.module.ts</code>中注册 TypeORM ：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TypeOrmModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppController</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.controller&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.service&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user/user.module&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MenuModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./menu/menu.module&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">UserModule</span>,<br>    <span class="hljs-title class_">MenuModule</span>,<br>    <span class="hljs-title class_">TypeOrmModule</span>.<span class="hljs-title function_">forRoot</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>      <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>      <span class="hljs-attr">port</span>: <span class="hljs-number">3306</span>,<br>      <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>      <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123456&#x27;</span>,<br>      <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;oss-nest&#x27;</span>,<br>      <span class="hljs-attr">synchronize</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">retryDelay</span>: <span class="hljs-number">500</span>,<br>      <span class="hljs-attr">retryAttempts</span>: <span class="hljs-number">10</span>,<br>      <span class="hljs-attr">autoLoadEntities</span>: <span class="hljs-literal">true</span>,<br>    &#125;),<br>  ],<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">AppController</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">AppService</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppModule</span> &#123;&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Entity-实体">Entity 实体</h2><blockquote><p>在对象关系映射（ORM）中，实体（Entity）是指映射到数据库表的对象模型。在 ORM 中，实体通常与数据库表一一对应。每个实体类代表一个数据库表，在类中定义的属性（字段）对应表中的列，类的实例对应表中的行。通过ORM框架提供的功能，可以实现实体对象与数据库之间的增删改查操作。</p></blockquote><p>这里我们以<code>user</code>为例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// user.entity.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Column</span>, <span class="hljs-title class_">CreateDateColumn</span>, <span class="hljs-title class_">Entity</span>, <span class="hljs-title class_">PrimaryGeneratedColumn</span>, <span class="hljs-title class_">UpdateDateColumn</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;typeorm&#x27;</span>;<br><br><span class="hljs-meta">@Entity</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>  <span class="hljs-meta">@PrimaryGeneratedColumn</span>()<br>  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;<br><br>  <span class="hljs-meta">@Column</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;account&#x27;</span>, <span class="hljs-attr">unique</span>: <span class="hljs-literal">true</span> &#125;)<br>  <span class="hljs-attr">username</span>: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-meta">@Column</span>()<br>  <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span>;<br><br>  <span class="hljs-meta">@CreateDateColumn</span>()<br>  <span class="hljs-attr">created_at</span>: <span class="hljs-title class_">Date</span>;<br><br>  <span class="hljs-meta">@UpdateDateColumn</span>()<br>  <span class="hljs-attr">updated_at</span>: <span class="hljs-title class_">Date</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>然后在<code>user.module.ts</code>中关联：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// user.module.ts</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.service&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UserController</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./user.controller&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TypeOrmModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./entities/user.entity&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">TypeOrmModule</span>.<span class="hljs-title function_">forFeature</span>([<span class="hljs-title class_">User</span>])],<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">UserController</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">UserService</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>关联后，重启服务后实体就会同步到数据库中。</p><img src="https://img.bald3r.wang/img/image-20230710164529274.png" alt="image-20230710164529274" style="zoom:50%;" /><h2 id="对数据库进行-CRUD-的一个例子">对数据库进行 CRUD 的一个例子</h2><blockquote><p>CRUD，即增加(Create)、读取(Read)、更新(Update)和删除(Delete)</p></blockquote><p>在<code>user.service.ts</code>中注入：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">InjectRepository</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Repository</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;typeorm&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./entities/user.entity&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-meta">@InjectRepository</span>(User) <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> user: Repository&lt;User&gt;,</span><br><span class="hljs-params">  </span>) &#123;&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就可以写对应的逻辑。</p><h3 id="Create-增">Create 增</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// user.service.ts</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">createUserDto: CreateUserDto</span>) &#123;<br>  <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>  user.<span class="hljs-property">username</span> = createUserDto.<span class="hljs-property">username</span>;<br>  user.<span class="hljs-property">password</span> = createUserDto.<span class="hljs-property">password</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">save</span>(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request POST <span class="hljs-string">&#x27;http://localhost:3000/user&#x27;</span> \<br>--header <span class="hljs-string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;username=1&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;password=123&#x27;</span><br>--------------------------------------------------------------<br>&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:1,<span class="hljs-string">&quot;created_at&quot;</span>:<span class="hljs-string">&quot;2023-07-10T07:24:48.532Z&quot;</span>,<span class="hljs-string">&quot;updated_at&quot;</span>:<span class="hljs-string">&quot;2023-07-10T07:24:48.532Z&quot;</span>&#125;%   <br></code></pre></td></tr></table></figure><p>查看数据库：</p><img src="https://img.bald3r.wang/img/image-20230710232609824.png" alt="image-20230710232609824" style="zoom:50%;" /><p>数据库中也出现了对应数据，表示新增用户成功。</p><h3 id="Read-读">Read 读</h3><h4 id="查询一条">查询一条</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// user.service.ts</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">findOne</span>(<span class="hljs-params">id: <span class="hljs-built_in">number</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">findOne</span>(&#123; <span class="hljs-attr">where</span>: &#123; id &#125; &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request GET <span class="hljs-string">&#x27;http://localhost:3000/user/1&#x27;</span><br>---------------------------------------------------------------<br>&#123;<span class="hljs-string">&quot;id&quot;</span>:1,<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;created_at&quot;</span>:<span class="hljs-string">&quot;2023-07-10T07:24:48.532Z&quot;</span>,<span class="hljs-string">&quot;updated_at&quot;</span>:<span class="hljs-string">&quot;2023-07-10T07:24:48.532Z&quot;</span>&#125;%  <br></code></pre></td></tr></table></figure><h4 id="分页查询">分页查询</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// user.controller.ts</span><br><br><span class="hljs-meta">@Get</span>()<br><span class="hljs-title function_">findAll</span>(<span class="hljs-params"><span class="hljs-meta">@Query</span>() query: &#123; page: <span class="hljs-built_in">number</span>; size: <span class="hljs-built_in">number</span> &#125;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">userService</span>.<span class="hljs-title function_">findAll</span>(query);<br>&#125;<br><br><span class="hljs-comment">// user.service.ts</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">findAll</span>(<span class="hljs-params">query: &#123; page: <span class="hljs-built_in">number</span>; size: <span class="hljs-built_in">number</span> &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; page, size &#125; = query;<br>  <span class="hljs-keyword">const</span> [users, total] = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">findAndCount</span>(&#123;<br>    <span class="hljs-attr">skip</span>: (page - <span class="hljs-number">1</span>) * size,<br>    <span class="hljs-attr">take</span>: size,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> &#123; users, total &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request GET <span class="hljs-string">&#x27;http://localhost:3000/user/?page=2&amp;size=5&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;users&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;例工般&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;92780&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-10T07:41:25.090Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updated_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-10T07:41:25.090Z&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;百提同&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5766884758&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-10T07:41:25.760Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updated_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-10T07:41:25.760Z&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;号消米发具&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;483747755&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-10T07:41:26.358Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updated_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-10T07:41:26.358Z&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;全要色院&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;6442764&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-10T07:41:27.017Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updated_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-10T07:41:27.017Z&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;接去度件路&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;7585781&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-10T07:41:27.582Z&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;updated_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2023-07-10T07:41:27.582Z&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">13</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Update-改">Update 改</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// user.service.ts</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">id: <span class="hljs-built_in">number</span>, updateUserDto: UpdateUserDto</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">update</span>(id, updateUserDto);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request PATCH <span class="hljs-string">&#x27;http://localhost:3000/user/1&#x27;</span> \<br>--header <span class="hljs-string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;username=123&#x27;</span> \<br>--data-urlencode <span class="hljs-string">&#x27;password=123&#x27;</span><br>----------------------------------------------------------------<br>&#123;<span class="hljs-string">&quot;generatedMaps&quot;</span>:[],<span class="hljs-string">&quot;raw&quot;</span>:[],<span class="hljs-string">&quot;affected&quot;</span>:1&#125;%          <br></code></pre></td></tr></table></figure><p>查看数据库：</p><img src="https://img.bald3r.wang/img/image-20230710233318767.png" alt="image-20230710233318767" style="zoom:50%;" /><p>可以看到，数据已经更新成功了。</p><h3 id="Delete-删">Delete 删</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// user.service.ts</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">id: <span class="hljs-built_in">number</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">delete</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl --location --request DELETE <span class="hljs-string">&#x27;http://localhost:3000/user/1&#x27;</span><br>----------------------------------------------------------------<br>&#123;<span class="hljs-string">&quot;raw&quot;</span>:[],<span class="hljs-string">&quot;affected&quot;</span>:0&#125;% <br></code></pre></td></tr></table></figure><p>查看数据库：</p><img src="https://img.bald3r.wang/img/image-20230710234427003.png" alt="image-20230710234427003" style="zoom:50%;" /><p>可以看到，id 为 1 的数据已经被删除了。</p><h2 id="后记">后记</h2><p>笔者也是刚刚接触 Node ，目前还存在诸多不足，如果文章中有任何错误，欢迎在评论区批评指正。</p><p><a href="https://github.com/baIder/nest-demo">Nest学习系列博客代码仓库 (github.com)</a></p><p><a href="https://bald3r.wang/">冷面杀手的个人站 (bald3r.wang)</a></p><p><a href="https://bald3r.wang/tags/NestJS/">NestJS 相关文章</a></p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
      <category>NestJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>NestJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nestjs v10 中使用 Redis 作为 CacheStore 的坑</title>
    <link href="/2023/06/28/Nestjs-v10-%E4%B8%AD%E4%BD%BF%E7%94%A8-Redis-%E4%BD%9C%E4%B8%BA-CacheStore-%E7%9A%84%E5%9D%91/"/>
    <url>/2023/06/28/Nestjs-v10-%E4%B8%AD%E4%BD%BF%E7%94%A8-Redis-%E4%BD%9C%E4%B8%BA-CacheStore-%E7%9A%84%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h2 id="开发环境">开发环境</h2><ul class="lvl-0"><li class="lvl-2"><p>Nest.js v10.0.1</p><p>其他 npm 包版本如下</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-attr">&quot;@nestjs/cache-manager&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^2.0.1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cache-manager&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^5.2.3&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cache-manager-redis-store&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.0.1&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;cache-manager-redis-yet&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.1.2&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;redis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.6.7&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><h2 id="背景">背景</h2><p>最近笔者在学习 <code>node.js</code>，选择了<code>Nestjs</code>作为后端框架，在掘金上找了篇<a href="https://juejin.cn/post/7160936006517014558">文章</a>（后文简称教程）跟着一起敲，那位作者使用的是<code>Nestjs v8</code>的版本，因此在<code>redis</code>相关的章节遇到了问题，最后参考了官方文档<a href="https://docs.nestjs.com/techniques/caching#different-stores">官方文档</a>以及相关npm包的<a href="https://github.com/dabroek/node-cache-manager-redis-store/issues/40">Github Issue</a>中的内容，暂时解决了。笔者百度了很久<code>Nestjs</code>相关的<code>redis</code>教程，普遍都比较老了，也基本是大同小异，因此笔者打算写这篇文章作为记录。</p><h2 id="问题复现">问题复现</h2><p>教程中的代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigModule</span>, <span class="hljs-title class_">ConfigService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">RedisCacheService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./redis-cache.service&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CacheModule</span>, <span class="hljs-title class_">Module</span>, <span class="hljs-title class_">Global</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> redisStore <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cache-manager-redis-store&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br><span class="hljs-attr">imports</span>: [<br><span class="hljs-title class_">CacheModule</span>.<span class="hljs-title function_">registerAsync</span>(&#123;<br> <span class="hljs-attr">isGlobal</span>: <span class="hljs-literal">true</span>,<br> <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">ConfigModule</span>],<br> <span class="hljs-attr">inject</span>: [<span class="hljs-title class_">ConfigService</span>],<br> <span class="hljs-attr">useFactory</span>: <span class="hljs-keyword">async</span> (<span class="hljs-attr">configService</span>: <span class="hljs-title class_">ConfigService</span>) =&gt; &#123;<br>   <span class="hljs-keyword">return</span> &#123;<br>     <span class="hljs-attr">store</span>: redisStore,<br>     <span class="hljs-attr">host</span>: configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;REDIS_HOST&#x27;</span>),<br>     <span class="hljs-attr">port</span>: configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;REDIS_PORT&#x27;</span>),<br>     <span class="hljs-attr">db</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//目标库,</span><br>     <span class="hljs-attr">auth_pass</span>:  configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;REDIS_PASSPORT&#x27;</span>) <span class="hljs-comment">// 密码,没有可以不写</span><br>   &#125;;<br> &#125;,<br>&#125;),<br>],<br><span class="hljs-attr">providers</span>: [<span class="hljs-title class_">RedisCacheService</span>],<br><span class="hljs-attr">exports</span>: [<span class="hljs-title class_">RedisCacheService</span>],<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCacheModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>发现<code>useFactory</code>函数部分报错，是一个TS错误：</p><p><img src="https://img.bald3r.wang/img/image-20230628145215603.png" alt=""></p><h2 id="解决问题？">解决问题？</h2><p>问题出现的原因是此处<code>useFactory</code>函数需要返回一个类型为<code>Promise&lt;CacheModuleOptions&lt;StoreConfig&gt;&gt; | CacheModuleOptions&lt;StoreConfig&gt;</code>的值，很显然笔者此时返回的对象有问题。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CacheModuleAsyncOptions</span>&lt;<span class="hljs-title class_">StoreConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">any</span>, <span class="hljs-built_in">any</span>&gt; = <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>&gt;&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ConfigurableModuleAsyncOptions</span>&lt;<span class="hljs-title class_">CacheModuleOptions</span>&lt;<span class="hljs-title class_">StoreConfig</span>&gt;, keyof <span class="hljs-title class_">CacheOptionsFactory</span>&gt; &#123;<br>    useExisting?: <span class="hljs-title class_">Type</span>&lt;<span class="hljs-title class_">CacheOptionsFactory</span>&lt;<span class="hljs-title class_">StoreConfig</span>&gt;&gt;;<br>    useClass?: <span class="hljs-title class_">Type</span>&lt;<span class="hljs-title class_">CacheOptionsFactory</span>&lt;<span class="hljs-title class_">StoreConfig</span>&gt;&gt;;<br>    useFactory?: <span class="hljs-function">(<span class="hljs-params">...args: <span class="hljs-built_in">any</span>[]</span>) =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">CacheModuleOptions</span>&lt;<span class="hljs-title class_">StoreConfig</span>&gt;&gt; | <span class="hljs-title class_">CacheModuleOptions</span>&lt;<span class="hljs-title class_">StoreConfig</span>&gt;;<br>    inject?: <span class="hljs-built_in">any</span>[];<br>    extraProviders?: <span class="hljs-title class_">Provider</span>[];<br>    isGlobal?: <span class="hljs-built_in">boolean</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从报错中可以看出，问题基本出在这个<code>store</code>上，而这个store的类型是由<code>cache-manager-redis-store</code> 这个npm包决定的，因此查看这个包有什么变动。</p><p>由于版本的升级，该包已经可以按需引入了，因此我们使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; redisStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cache-manager-redis-store&#x27;</span>;<br></code></pre></td></tr></table></figure><p>同时，写法也有所变化：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">CacheModule</span>.<span class="hljs-title function_">registerAsync</span>(&#123;<br>      ...<br>      <span class="hljs-attr">useFactory</span>: <span class="hljs-keyword">async</span> (<span class="hljs-attr">configService</span>: <span class="hljs-title class_">ConfigService</span>) =&gt; &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">store</span>: <span class="hljs-title function_">redisStore</span>(&#123;<br>            <span class="hljs-attr">socket</span>: &#123;<br>              <span class="hljs-attr">host</span>: configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;REDIS_HOST&#x27;</span>),<br>              <span class="hljs-attr">port</span>: configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;REDIS_PORT&#x27;</span>),<br>            &#125;,<br>            <span class="hljs-attr">database</span>: configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;REDIS_DB&#x27;</span>),<br>            <span class="hljs-attr">password</span>: configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;REDIS_PASSWORD&#x27;</span>),<br>          &#125;),<br>        &#125;;<br>      &#125;,<br>  ...<br>&#125;)<br></code></pre></td></tr></table></figure><p>发现还是报错，但是错误信息不同：</p><p><img src="https://img.bald3r.wang/img/image-20230628150303497.png" alt=""></p><p>核心是这句：<code>Type 'Promise&lt;RedisStore&gt;' is not assignable to type 'string | CacheStoreFactory | CacheStore'.</code></p><p>也就是说类型还是不匹配。</p><p>查阅<a href="https://docs.nestjs.com/techniques/caching#different-stores">官方文档</a>，发现文档相当之老，但是有一个Warning引起了笔者的注意：</p><p><img src="https://img.bald3r.wang/img/image-20230628150800795.png" alt=""></p><p>当场点开了这个issue，让我康康。</p><h2 id="解决问题！">解决问题！</h2><p><img src="https://img.bald3r.wang/img/image-20230628151022075.png" alt=""></p><p>这个npm包的作者提出了解决方案：<code>//@ts-ignore</code>  😅</p><p>加入代码后，能正常的跑起来了，但是在写入值的时候，又报错了：</p><blockquote><p>[Nest] 75156  - 06/28/2023, 3:10:41 PM   ERROR [ExceptionsHandler] store.set is not a function</p></blockquote><p>于是继续看这个issue，发现了解决方案，似乎是和异步有关系</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">CacheModule</span>.<span class="hljs-title function_">registerAsync</span>(&#123;<br>    ...<br>      <span class="hljs-comment">//@ts-ignore</span><br>      <span class="hljs-attr">useFactory</span>: <span class="hljs-keyword">async</span> (<span class="hljs-attr">configService</span>: <span class="hljs-title class_">ConfigService</span>) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> store = <span class="hljs-keyword">await</span> <span class="hljs-title function_">redisStore</span>(&#123;<br>          ...<br>        &#125;);<br>        <span class="hljs-keyword">return</span> &#123;<br>          store,<br>        &#125;;<br>      &#125;,<br>    &#125;),<br>    ...<br>&#125;)<br></code></pre></td></tr></table></figure><p>这样报错就解决了，redis也能正常使用了</p><p>但是笔者作为一个高贵的TS使用者，怎么能接受自己的代码中有<code>@ts-ignore</code>出现呢？？？这也太不专业了，正巧，issue中也有老哥跟笔者一个想法，因此「 优化版 」出现了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">CacheModule</span>.<span class="hljs-title function_">registerAsync</span>(&#123;<br>      ...<br>      <span class="hljs-attr">useFactory</span>: <span class="hljs-keyword">async</span> (<span class="hljs-attr">configService</span>: <span class="hljs-title class_">ConfigService</span>) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> store = <span class="hljs-keyword">await</span> <span class="hljs-title function_">redisStore</span>(&#123;<br>          ...<br>        &#125;);<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">store</span>: store <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">CacheStore</span>,<br>        &#125;;<br>      &#125;,<br>    &#125;),<br>    ...<br>&#125;)<br></code></pre></td></tr></table></figure><p>看起来舒服了一点，但是issue中有硬核老哥觉得这还不行，作者一直不改，那就自己改，于是魔改了这个包，发布了另一个包<code>cache-manager-redis-yet</code>，这个替换这个包就可以了，两者就最后一个单词不同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">cache-manager-redis-store<br>cache-manager-redis-yet<br></code></pre></td></tr></table></figure><p>至此问题基本解决了：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">import</span> &#123; redisStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;cache-manager-redis-yet&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">RedisClientOptions</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redis&#x27;</span>;<br>...<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">CacheModule</span>.<span class="hljs-property">registerAsync</span>&lt;<span class="hljs-title class_">RedisClientOptions</span>&gt;(&#123;<br>      ...<br>      <span class="hljs-attr">useFactory</span>: <span class="hljs-keyword">async</span> (<span class="hljs-attr">configService</span>: <span class="hljs-title class_">ConfigService</span>) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> store = <span class="hljs-keyword">await</span> <span class="hljs-title function_">redisStore</span>(&#123;<br>          ...<br>        &#125;);<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">store</span>: store,<br>        &#125;;<br>      &#125;,<br>    &#125;),<br>    ...<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>解决方式有两种（前提是你已经使用了新的写法）：</p><ul class="lvl-0"><li class="lvl-2"><p>使用<code>@ts-ignore</code>直接忽略报错</p></li><li class="lvl-2"><p>使用<code>cache-manager-redis-yet</code>替代原来的<code>cache-manager-redis-store</code></p></li></ul><p>希望笔者的文章能帮到你。</p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
      <category>NestJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
      <tag>NestJS</tag>
      
      <tag>Redis</tag>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>制作自己的docker镜像</title>
    <link href="/2023/06/13/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84docker%E9%95%9C%E5%83%8F/"/>
    <url>/2023/06/13/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84docker%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h1>制作自己的 docker 镜像</h1><h2 id="前言">前言</h2><p>本文主要的目的是制作自己的 docker 镜像，并上传至 docker hub，以便特殊情况下需要重新配置环境。</p><p>我的宿主机环境：MacbookPro M1Pro，ARM64</p><h2 id="选择基础的操作系统">选择基础的操作系统</h2><p>本文使用 Debian-bullseye 系统。</p><h3 id="下载系统镜像">下载系统镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull debian:bullseye<br></code></pre></td></tr></table></figure><p><img src="https://img.bald3r.wang/img/image-20230612104246470.png" alt=""></p><h3 id="运行下载的镜像，生成一个容器">运行下载的镜像，生成一个容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -d debian:bullseye<br></code></pre></td></tr></table></figure><p><img src="https://img.bald3r.wang/img/image-20230612105903007.png" alt=""></p><p>出现的<code>e57cb682a0815b435235d6be30d9e7e63fd77d5f5fae45b7f3483910be76d439</code>就是我们容器的 id</p><h3 id="进入容器">进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it e5 /bin/bash  <span class="hljs-comment"># 这里的e5就是我们容器id的简写</span><br></code></pre></td></tr></table></figure><p><img src="https://img.bald3r.wang/img/image-20230612110011488.png" alt=""></p><h2 id="配置环境">配置环境</h2><h3 id="apt-get-设置">apt-get 设置</h3><ol><li class="lvl-3"><p>备份原有源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>添加源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/apt/sources.list<br><br><span class="hljs-comment"># 如果没有vim命令，就使用cat</span><br><br><span class="hljs-built_in">rm</span> /etc/apt/sources.list<br><span class="hljs-built_in">cat</span> &gt; sources.list &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 然后添加下面的源</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian/</span> bullseye main non-free contrib<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian/</span> bullseye main non-free contrib<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian-security/</span> bullseye-security main<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian-security/</span> bullseye-security main<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian/</span> bullseye-updates main non-free contrib<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian/</span> bullseye-updates main non-free contrib<br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian/</span> bullseye-backports main non-free contrib<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian/</span> bullseye-backports main non-free contrib<br><br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br></code></pre></td></tr></table></figure></li></ol><h3 id="安装必要的包">安装必要的包</h3><ol><li class="lvl-3"><p>sudo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install sudo<br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>vim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install vim<br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>curl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install curl<br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install zsh<br><br><span class="hljs-comment"># 设置为默认终端</span><br>chsh -s $(<span class="hljs-built_in">which</span> zsh)<br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install git<br></code></pre></td></tr></table></figure></li><li class="lvl-3"><p>oh-my-zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 国内镜像Gitee</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)</span>&quot;</span><br><br><span class="hljs-comment"># Github官方源</span><br>sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="制作镜像-导出容器">制作镜像/导出容器</h2><p>打开宿主机的终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker container <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://img.bald3r.wang/img/image-20230612114730097.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">export</span> e5 &gt; my-env.tar<br></code></pre></td></tr></table></figure><h2 id="导入镜像">导入镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker import my-env.tar bullseye:init<br><br>docker image <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="https://img.bald3r.wang/img/image-20230612115200251.png" alt=""></p><p>出现我们刚刚创建的镜像，证明到目前为止一切都很成功。</p><h3 id="创建容器">创建容器</h3><p>用刚刚导入的镜像创建一个容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it -d bullseye:init zsh<br><br>docker ps<br></code></pre></td></tr></table></figure><p><img src="https://img.bald3r.wang/img/image-20230612132716581.png" alt=""></p><p>可以看到，容器已经成功的跑起来了。</p><h3 id="进入容器-2">进入容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it 2cc zsh<br></code></pre></td></tr></table></figure><p>查看环境配置，这里通过看 git 是否安装来简单测试一下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></figure><p><img src="https://img.bald3r.wang/img/image-20230612133035021.png" alt=""></p><p>说明 git 已经安装成功了。</p><h2 id="上传至-docker-hub">上传至 docker hub</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker commit 2cc bald3r/my-env:init<br><br>docker push bald3r/my-env:init<br></code></pre></td></tr></table></figure><p>可以在 docker hub 中看到自己创建的镜像了。</p><h2 id="更新镜像">更新镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker commit 2cc bald3r/my-env:finish<br><br>docker push bald3r/my-env:finish<br></code></pre></td></tr></table></figure><h2 id="使用自己的镜像">使用自己的镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull bald3r/my-env:fix-air<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单实现前端动态路由</title>
    <link href="/2023/05/30/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/"/>
    <url>/2023/05/30/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>通过后端接口的返回值，动态添加路由，是作为权限控制的一种常见方式，本文将简单讲解如何在Vue3中动态添加路由。</p><h2 id="示例数据">示例数据</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;pid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/dashboard&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;控制面板板&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;component&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/src/views/dashboard/DashboardView.vue&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;SlidersOutlined&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;is_show&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;menu&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;pid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/system&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;系统设置&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;component&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ToolOutlined&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;is_show&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;menu_dir&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;pid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/system/menu&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;菜单管理&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;component&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/src/views/system/MenuView.vue&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BarsOutlined&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;is_show&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2,7&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;menu&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;tips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>          <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;pid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/system/menu/add&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;新增菜单&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;component&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;is_show&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2,7,8&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;button&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;tips&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;children&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h2 id="思路分析">思路分析</h2><p>动态添加路由的实质，就是先将后端返回的json数据转化成一个个<code>RouteRecordRaw</code>形式的对象，然后调用Vue Router的<code>addRoute</code>方法，添加进路由列表中。由于每个路由地址都会对应一个Vue组件，因此还需要将Vue组件都通过<code>import.meta.glob</code>读取到内存中。</p><h2 id="具体实现函数">具体实现函数</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-attr">viewsComponent</span>: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">any</span>&gt; = <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-title function_">glob</span>(<span class="hljs-string">&quot;/src/views/**/*.vue&quot;</span>, &#123; <span class="hljs-attr">eager</span>: <span class="hljs-literal">true</span> &#125;)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">addRouteAll</span> = (<span class="hljs-params">menu: RoleMenu[]</span>) =&gt; &#123;  <span class="hljs-comment">//RoleMenu就是接口返回的数据的类型</span><br>    menu.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (item.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;menu&quot;</span> &amp;&amp; viewsComponent[item.<span class="hljs-property">component</span>]) &#123;<br>            <span class="hljs-title function_">addRouteItem</span>(item)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (item.<span class="hljs-property">children</span> &amp;&amp; item.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-title function_">addRouteAll</span>(item.<span class="hljs-property">children</span>)<br>        &#125;<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">addRouteItem</span> = (<span class="hljs-params">route: RoleMenu</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> path = route.<span class="hljs-property">url</span><br>    <span class="hljs-keyword">const</span> component = viewsComponent[route.<span class="hljs-property">component</span>]<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">routeBaseInfo</span>: <span class="hljs-title class_">RouteRecordRaw</span> = &#123;<br>        path,<br>        <span class="hljs-attr">name</span>: path.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>),<br>        <span class="hljs-attr">component</span>: component.<span class="hljs-property">default</span>,<br>        <span class="hljs-attr">meta</span>: &#123;<br>            <span class="hljs-attr">title</span>: route.<span class="hljs-property">title</span>,<br>            <span class="hljs-attr">icon</span>: route.<span class="hljs-property">icon</span>,<br>            <span class="hljs-attr">keepalive</span>: route.<span class="hljs-property">children</span> &amp;&amp; route.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : path.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>),<br>            <span class="hljs-attr">menu_type</span>: <span class="hljs-string">&quot;tab&quot;</span>,<br>            <span class="hljs-attr">type</span>: route.<span class="hljs-property">type</span>,<br>            <span class="hljs-attr">url</span>: route.<span class="hljs-property">url</span>,<br>            <span class="hljs-attr">addTab</span>: <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br>    router.<span class="hljs-title function_">addRoute</span>(routeBaseInfo)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="存在问题">存在问题</h2><h3 id="路由何时处理？">路由何时处理？</h3><p>笔者一开始认为，登录成功后立刻调用获取菜单的接口，然后处理路由，因此路由的处理应该在登录页面中的登录请求成功后进行处理，但是此时存在一个问题，用户登录成功进入后台页面，然后用户刷新页面，就会提示导航失败，控制台也会报错，因此笔者认为应该在登录成功进入后台页面之后开始处理。</p><p>笔者后台的主体页面框架为<code>MainLayout</code>，因此笔者在此进行路由处理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getMenu</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">apiAuthMenuList</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        menuList.<span class="hljs-property">value</span> = <span class="hljs-title function_">handleMenu</span>(res.<span class="hljs-property">content</span>)  <span class="hljs-comment">//菜单处理</span><br>        <span class="hljs-title function_">addRouteAll</span>(res.<span class="hljs-property">content</span>)<br>    &#125;)<br>&#125;<br><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">getMenu</span>()<br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="导航失败">导航失败</h3><blockquote><p>⚠️ <code>[Vue Router warn] :  No match found for location with path &quot;/dashboard&quot;</code></p></blockquote><p>这是因为路由跳转的时机要早于组件挂载，因此在组件挂载并处理路由前，路由就已经跳转并报错了。</p><p>笔者解决这个问题的思路有两个：</p><p>首先定义全局变量<code>routeReady</code>，初始值为<code>false</code>，当路由处理完成后变为<code>true</code></p><ol><li class="lvl-3"><p>在路由守卫<code>beforeEach</code>中判断，如果<code>routeReady</code>为<code>false</code>则处理路由，处理完成后跳转。</p></li><li class="lvl-3"><p>创建一个Loading页面，如果路由没有匹配的地址则跳转至Loading页面，并在该页面进行判断：</p><ul class="lvl-2"><li class="lvl-6">如果<code>routeReady</code>为<code>true</code>，说明去往的地址并不在该用户的权限菜单中，转向404页面</li><li class="lvl-6">如果<code>routeReady</code>为<code>false</code>，则说明路由未加载完成，那么就在当前页面等待，等<code>routeReady</code>为<code>true</code>时，再执行上面的判断</li></ul></li></ol><p>笔者这里用了方法2。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//截获所有未匹配的路由，进入Loading页面</span><br>&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/:pathMatch(.*)*&quot;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;../views/LoadingView.vue&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-comment">//LoadingView.vue</span><br><span class="hljs-title function_">watchEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (globalStore.<span class="hljs-property">routeReady</span>) &#123;<br>        <span class="hljs-keyword">const</span> routeList = router.<span class="hljs-title function_">getRoutes</span>()<br>        <span class="hljs-keyword">if</span> (routeList.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> i.<span class="hljs-property">path</span> === router.<span class="hljs-property">currentRoute</span>.<span class="hljs-property">value</span>.<span class="hljs-property">fullPath</span>)) &#123;<br>            router.<span class="hljs-title function_">push</span>(router.<span class="hljs-property">currentRoute</span>.<span class="hljs-property">value</span>.<span class="hljs-property">fullPath</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/notFound&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>通过这种方式，可以在用户刷新页面后有一个顺滑的体验。</p><h3 id="进入第一个路由">进入第一个路由</h3><p>目前还存在一个问题，用户在登录跳转后，会进入后台页面，但是此时不会进入到任一菜单中：</p><p><img src="https://img.bald3r.wang/img/202305301321986.png" alt=""></p><p>而我们希望登录跳转后能自动进入到第一个菜单，即：</p><p><img src="https://img.bald3r.wang/img/202305301322181.png" alt=""></p><p>因此我们需要一个方法来找到第一个可用的路由：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> getFirstRoute = (<span class="hljs-attr">routes</span>: <span class="hljs-title class_">RouteRecordRaw</span>[]): <span class="hljs-literal">false</span> | <span class="hljs-function"><span class="hljs-params">RouteRecordRaw</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">routerPaths</span>: <span class="hljs-built_in">string</span>[] = []<br>    <span class="hljs-keyword">const</span> routers = router.<span class="hljs-title function_">getRoutes</span>()<br>    routers.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (item.<span class="hljs-property">path</span>) routerPaths.<span class="hljs-title function_">push</span>(item.<span class="hljs-property">path</span>)<br>    &#125;)<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">find</span>: <span class="hljs-built_in">boolean</span> | <span class="hljs-title class_">RouteRecordRaw</span> = <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> routes) &#123;<br>        <span class="hljs-keyword">if</span> (routes[key].<span class="hljs-property">meta</span>?.<span class="hljs-property">type</span> != <span class="hljs-string">&quot;menu_dir&quot;</span> &amp;&amp; routerPaths.<span class="hljs-title function_">indexOf</span>(routes[key].<span class="hljs-property">path</span>) !== -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> routes[key]<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (routes[key].<span class="hljs-property">children</span> &amp;&amp; routes[key].<span class="hljs-property">children</span>?.<span class="hljs-property">length</span>) &#123;<br>            find = <span class="hljs-title function_">getFirstRoute</span>(routes[key].<span class="hljs-property">children</span>!)<br>            <span class="hljs-keyword">if</span> (find) <span class="hljs-keyword">return</span> find<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> find<br>&#125;<br></code></pre></td></tr></table></figure><p>然后调用这个方法即可：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs TypeScript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">init</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> firstRoute = <span class="hljs-title function_">getFirstRoute</span>(menuList.<span class="hljs-property">value</span>!)<br>    <span class="hljs-keyword">if</span> (firstRoute) &#123;<br>        router.<span class="hljs-title function_">push</span>(firstRoute.<span class="hljs-property">path</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">init</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="后记">后记</h2><p>至此一个简单的动态路由就实现了，如果你有更好的意见或建议，欢迎留言交流。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>登录认证与JWT</title>
    <link href="/2023/05/18/%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E4%B8%8EJWT/"/>
    <url>/2023/05/18/%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E4%B8%8EJWT/</url>
    
    <content type="html"><![CDATA[<h1>登录认证与JWT</h1><p>目前主流的实现认证的方式有两种，Session和JWT</p><p><img src="https://img.bald3r.wang/img/202305181147062.png" alt=""></p><p>本文将着重于分析JWT</p><h2 id="JWT的特点">JWT的特点</h2><h3 id="无状态">无状态</h3><p>JWT是无状态的，无状态性是指服务器端不需要存储任何关于用户会话或身份验证状态的信息。因此，服务器只需要验证JWT的签名和有效期来验证令牌的真实性和有效性，并据此授权用户的访问请求。</p><h3 id="跨端-跨域支持">跨端 / 跨域支持</h3><p>由于JWT的无状态性，使其非常适用于分布式系统和跨服务的身份验证场景。每个服务都可以独立地验证和解析JWT，无需进行共享或同步状态。同时由于不依赖Cookie等特性，在客户端中也可以使用JWT。</p><h3 id="拓展性强">拓展性强</h3><p>JWT的Payload部分可以添加任意所需信息，通过解密，服务端可以完整的拿到加密前的数据，可以包括用户的<code>id</code>、<code>username</code>等任意字段。</p><h3 id="长度无限制">长度无限制</h3><p>由于Payload部分可以添加任意JSON格式的数据，因此JWT的长度很可能会超过限制，导致溢出报错。</p><h3 id="难以主动失效">难以主动失效</h3><p>正因为JWT的无状态性，想主动使其失效变得非常困难。通常JWT会设置过期时间<code>exp</code>，但是有时我们需要主动令其失效，例如在用户修改了密码之后。一般的做法是设置黑名单，将失效的token信息维护在黑名单中，但是这与JWT的无状态性背驰，算是一个痛点。</p><h2 id="JWT是什么">JWT是什么</h2><p>JWT全称为 Json Web Token， 其本质是多个JSON对象，用于在各方之间安全的传输信息。</p><h2 id="JWT的构成">JWT的构成</h2><p>JWT由三部分组成：头部（Header）、载荷（Payload）和签名（Signature）。</p><ol><li class="lvl-3"><p>头部（Header）：JWT的头部通常由两部分组成：令牌的类型（即JWT）和使用的签名算法，如HMAC、SHA256或RSA等。头部使用Base64编码进行序列化，但不加密，因此可以公开查看。</p></li><li class="lvl-3"><p>载荷（Payload）：载荷是JWT的主要部分，用于携带实际的信息，例如用户的身份、权限等。载荷由一组称为声明（Claims）的键值对组成，可以包含预定义的标准声明（如iss、sub、exp等），也可以包含自定义的声明。与头部一样，载荷也使用Base64编码进行序列化，但不加密。</p></li><li class="lvl-3"><p>签名（Signature）：签名是JWT的第三部分，用于验证令牌的真实性和完整性。签名通常使用头部和载荷中的信息以及事先约定好的密钥来计算，以防止被篡改。签名是加密的，所以只有知道密钥的人才能验证令牌的有效性。</p></li></ol><h3 id="Header">Header</h3><p>Header通常包含两个信息，一个是加密算法，一个是类型。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//加密算法</span><br>  <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span>     <span class="hljs-comment">//类型</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Payload">Payload</h3><p>Payload意为载荷，其实就是token中携带的信息。</p><p>官方默认给了7个字段，也可以自行添加</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>Audience</td><td>表示JWT的受众</td></tr><tr><td>ExpiresAt</td><td>失效时间</td></tr><tr><td>Id</td><td>签发编号</td></tr><tr><td>IssuedAt</td><td>签发时间</td></tr><tr><td>Issuer</td><td>签发人</td></tr><tr><td>NotBefore</td><td>生效时间</td></tr><tr><td>Subject</td><td>主题</td></tr></tbody></table><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;loggedInAs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">//自定义内容</span><br>  <span class="hljs-attr">&quot;iat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1422779638</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Signature">Signature</h3><p>Signature是签名，由前两个部分的内容通过一个事前约定好的密钥经过一定的加密算法计算而来。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">HMAC_SHA256(<br>  secret,<br>  base64urlEncoding(header) + &#x27;.&#x27; +<br>  base64urlEncoding(payload)<br>)<br></code></pre></td></tr></table></figure><h3 id="JWT-token">JWT token</h3><p>将三部分通过base64转码，并用<code>.</code>连接，就形成了key</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> token = <span class="hljs-title function_">base64urlEncoding</span>(header) + <span class="hljs-string">&#x27;.&#x27;</span> + <span class="hljs-title function_">base64urlEncoding</span>(payload) + <span class="hljs-string">&#x27;.&#x27;</span> + <span class="hljs-title function_">base64urlEncoding</span>(signature)<br></code></pre></td></tr></table></figure><p><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI</code></p><h2 id="JWT的失效">JWT的失效</h2><h3 id="自动失效">自动失效</h3><p>一般来说，JWT在签发时会设置一个过期时间<code>exp</code>，并存储在token的Payload中。超过过期时间的token将无法认证。</p><h3 id="主动失效">主动失效</h3><p>JWT的主动失效是无法直接实现的。通常会通过设置黑名单的方法，在服务器中维护一份黑名单，存储着需要失效的token的相关信息，例如<code>id</code>等。服务器在解密token后，会与黑名单中的数据进行比对，如果匹配则会认证失败。</p><h3 id="刷新JWT">刷新JWT</h3><p>一般来说，在JWT自然失效后，为了用户的良好体验，会设置刷新token的功能。</p><p>通常服务器会在下发token时，额外下发一个刷新token（Refresh Token），当访问令牌（Access Token）过期后，客户端可以使用刷新令牌向服务器请求新的访问令牌，减少访问令牌的泄露风险。</p><p>通常访问令牌的过期时间较短，几十分钟至几小时不等，而刷新令牌的过期时间较长，几天乃至几十天。</p><h2 id="后记">后记</h2><p>JWT和Session都是目前常用并且非常成熟的认证方式，各有优劣，具体选用那种认证方式，需要通过业务实际场景进行选择。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在阿里云上部署hexo</title>
    <link href="/2023/05/04/%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A%E9%83%A8%E7%BD%B2hexo/"/>
    <url>/2023/05/04/%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8A%E9%83%A8%E7%BD%B2hexo/</url>
    
    <content type="html"><![CDATA[<h1>安装nginx</h1><p>由于hexo是静态网页，因此我们在服务器上安装nginx</p><p>用root账户登录服务器，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yum update<br>yum install nginx<br></code></pre></td></tr></table></figure><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202305012346325.png" alt=""></p><p>由于本博客也同样部署在github上，因此只需要将已经部署好的分支拉取到服务器中即可</p><h1>安装git</h1><p>同样的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yum install git<br></code></pre></td></tr></table></figure><p>由于使用<code>root</code>用户会有安全性问题，所以笔者创建一个新用户来操作。</p><p>这里笔者已经创建好了一个<code>allen</code>用户。</p><p>将github上面的博客clone到本地，笔者这里放在<code>~/www/blog</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cd</span> /home/allen/www<br><br>git <span class="hljs-built_in">clone</span> -b gh-pages https://github.com/baider/baider.github.io.git blog<br><br></code></pre></td></tr></table></figure><h1>配置nginx</h1><p>切换到<code>root</code>用户，进入nginx配置目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cd</span> /etc/nginx<br></code></pre></td></tr></table></figure><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202305020020770.png" alt=""></p><p>在config.d目录下新建一个配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">touch</span> conf.d/blog.conf<br></code></pre></td></tr></table></figure><p>编辑这个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">vim conf.d/blog.conf<br></code></pre></td></tr></table></figure><p>输入内容</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span>;<br><br>    <span class="hljs-attribute">server_name</span> bald3r.wang,balder.wang;<br><br>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$server_name</span><span class="hljs-variable">$request_uri</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;<br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl http2;<br>    <span class="hljs-attribute">server_name</span> balder.wang;<br><br>    <span class="hljs-attribute">ssl_certificate</span> /etc/nginx/certs/balder.wang.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/nginx/certs/balder.wang.key;<br><br>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://bald3r.wang<span class="hljs-variable">$request_uri</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;<br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl http2;<br>    <span class="hljs-attribute">server_name</span> bald3r.wang;<br><br>    <span class="hljs-attribute">root</span> /home/allen/www/blog;<br>    <span class="hljs-attribute">index</span> index.html;<br><br>    <span class="hljs-attribute">ssl_certificate</span> /etc/nginx/certs/bald3r.wang.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/nginx/certs/bald3r.wang.key;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202305041142841.png" alt=""></p><p>完成后重新加载nginx配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sudo systemctl reload nginx<br></code></pre></td></tr></table></figure><p>此时nginx会开始监听本机的80端口，将http请求访问转发到443端口的https上，因此我们需要记得开放这两个端口</p><h1>开放端口</h1><p>在阿里云服务器的安全设置中开放端口</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202305041148419.png" alt=""></p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202305041145004.png" alt=""></p><p>此时在浏览器中输入bald3r.wang就可以访问网站了</p>]]></content>
    
    
    
    <tags>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue2+Element UI中Dialog组件的一个小坑</title>
    <link href="/2023/02/10/Vue2-Element-UI%E4%B8%ADDialog%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%9D%91/"/>
    <url>/2023/02/10/Vue2-Element-UI%E4%B8%ADDialog%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1>Vue2+Element UI中Dialog组件的一个小坑</h1><h3 id="太长不看版">太长不看版</h3><p>Vue2 + Element UI中的Dialog组件在使用过程中会有一个小bug。</p><p>根据文档，将<code>destroy-on-close</code>设置为<code>true</code>后，Dialog将会在关闭后销毁其中的组件，但是实际上Dialog会在销毁组件后再次挂载销毁的组件，因此可能会影响我们对组件行为的预期。</p><p>例如Dialog中有一个组件A，A在挂载时向Vuex的store中存入了变量a，值为true，A在销毁时将变量a设置为了false，那么由于Dialog会在关闭后销毁并重新挂载组件A，Vuex的store中的a实际上还是true。</p><h3 id="Element-UI中的Dialog组件">Element UI中的Dialog组件</h3><p><a href="https://element.eleme.cn/#/zh-CN/component/dialog" title="组件 | Element">组件 | Element</a></p><p>可以打开一个对话框，对话框中可以嵌入其他的组件，当打开对话框时，该对话框中的组件会mount，但是关闭对话框时，该组件不会销毁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">// 对话框<br>    &lt;el-dialog<br>        title=&quot;提示&quot;<br>        :visible.sync=&quot;dialogVisible&quot;<br>        width=&quot;30%&quot;<br>        :destroy-on-close=&quot;true&quot;<br>        :before-close=&quot;handleClose&quot;&gt;<br><br>      &lt;ComponentA/&gt;<br><br>      &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;<br>        &lt;el-button @click=&quot;dialogVisible = false&quot;&gt;取 消&lt;/el-button&gt;<br>        &lt;el-button type=&quot;primary&quot; @click=&quot;dialogVisible = false&quot;&gt;确 定&lt;/el-button&gt;<br>      &lt;/span&gt;<br>    &lt;/el-dialog&gt;<br> <br>// ComponentA<br>&lt;template&gt;<br>  &lt;div&gt;ComponentStatus:&#123;&#123;status&#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;ComponentA&quot;,<br>  data()&#123;<br>    return &#123;<br>      status:&#x27;&#x27;,<br>    &#125;<br>  &#125;,<br>  mounted() &#123;<br>    this.status=&#x27;mounted&#x27;<br>    console.log(&#x27;mounted once&#x27;)<br>  &#125;,<br>  beforeDestroy() &#123;<br>    this.status=&#x27;unmounted&#x27;<br>    console.log(&#x27;unmounted once&#x27;)<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>点击打开Dialog后，ComponentA正常挂载，关闭对话框，ComponentA没有销毁</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/image_BE91vL-hBn.png" alt=""></p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/image_9PgJ6-rK-F.png" alt=""></p><h3 id="destroy-on-close">destroy-on-close</h3><p>根据文档，将<code>destroy-on-close</code>设置为<code>true</code>可以在关闭对话框时销毁其中元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-dialog<br>    title=&quot;提示&quot;<br>    :visible.sync=&quot;dialogVisible&quot;<br>    width=&quot;70%&quot;<br>    :destroy-on-close=&quot;true&quot;   //这里<br>    :before-close=&quot;handleClose&quot;&gt;<br><br>  &lt;ComponentA/&gt;<br><br>  &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;<br>    &lt;el-button @click=&quot;dialogVisible = false&quot;&gt;取 消&lt;/el-button&gt;<br>    &lt;el-button type=&quot;primary&quot; @click=&quot;dialogVisible = false&quot;&gt;确 定&lt;/el-button&gt;<br>  &lt;/span&gt;<br>&lt;/el-dialog&gt;<br></code></pre></td></tr></table></figure><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/image_Jm8wyhkFTQ.png" alt=""></p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/image_l_7fNTsy9f.png" alt=""></p><blockquote><p>📌但实际上组件会在销毁后再次被挂载，其中就会引发Bug</p></blockquote><h3 id="曲线救国方案：v-if">曲线救国方案：v-if</h3><p>实际上就是在对话框打开的时候将组件的v-if置为true，在对话框关闭时将v-if置为false</p><h2 id="Vue3-Element-Plus正常">Vue3+Element Plus正常</h2><p><a href="https://element-plus.gitee.io/zh-CN/component/dialog.html" title="Dialog 对话框 | Element Plus (gitee.io)">Dialog 对话框 | Element Plus (gitee.io)</a></p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/image_9vGUcm1enP.png" alt=""></p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/image_0-M-YK-vI7.png" alt=""></p><p>对话框关闭后正常销毁组件，没有重新挂载</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue2</tag>
      
      <tag>Element UI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序XR简单踩坑记录</title>
    <link href="/2023/01/23/50-XR-Frame-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FXR%E7%AE%80%E5%8D%95%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/01/23/50-XR-Frame-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FXR%E7%AE%80%E5%8D%95%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1>[XR-Frame]微信小程序XR简单踩坑记录</h1><h1>前言</h1><p>工作中需要写一个微信小程序，利用XR-Frame框架展示模型，由于先前没有接触过threejs，知识储备匮乏，只能通过官方文档进行学习，记录踩坑历程</p><h1>项目初始化</h1><h2 id="mockdata">mockdata</h2><p>先准备好测试用的虚拟数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs json">export const mockData = <span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    id<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;miku&quot;</span><span class="hljs-punctuation">,</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/assets/tencent.jpg&quot;</span><span class="hljs-punctuation">,</span><br>    model<span class="hljs-punctuation">:</span><br>      <span class="hljs-string">&quot;https://mmbizwxaminiprogram-1258344707.cos.ap-guangzhou.myqcloud.com/xr-frame/demo/miku.glb&quot;</span><span class="hljs-punctuation">,</span><br>    scale<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0.08</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.08</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.08</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    rotation<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">180</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    position<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    id<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lifangti&quot;</span><span class="hljs-punctuation">,</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/assets/lanqiu.jpg&quot;</span><span class="hljs-punctuation">,</span><br>    model<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/assets/box.glb&quot;</span><span class="hljs-punctuation">,</span><br>    scale<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0.6</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.6</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    rotation<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    position<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    id<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;helmet&quot;</span><span class="hljs-punctuation">,</span><br>    image<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/assets/beizi.jpg&quot;</span><span class="hljs-punctuation">,</span><br>    model<span class="hljs-punctuation">:</span><br>      <span class="hljs-string">&quot;https://mmbizwxaminiprogram-1258344707.cos.ap-guangzhou.myqcloud.com/xr-frame/demo/damage-helmet/index.glb&quot;</span><span class="hljs-punctuation">,</span><br>    scale<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0.3</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    rotation<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">180</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    position<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-number">0</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">]</span>;<br><br></code></pre></td></tr></table></figure><h2 id="app-json">app.json</h2><p>在创建项目时，一定要记得在<code>app.json</code>加上一行配置：<code>&quot;lazyCodeLoading&quot;: &quot;requiredComponents&quot;</code>，非常容易忽视。</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202304111101724.png" alt=""></p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202304111103956.png" alt=""></p><h2 id="TS类型提示">TS类型提示</h2><p>如果使用了TS，那么会发现新创建的项目中所有的api都是没有类型提示的，但是在微信官方的demo中却有，只需要将<a href="https://github.com/dtysky/xr-frame-demo/blob/master/typings/types/wx/xr-frame.d.ts" title="官方demo中的类型声明文件">官方demo中的类型声明文件</a>复制到我们自己的项目中即可。</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202304111114394.png" alt=""></p><h2 id="component-json">component.json</h2><p>在组件中，也要设置<code>renderer</code>为<code>xr-frame</code>。</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202304111104094.png" alt=""></p><h2 id="组件使用">组件使用</h2><p>此处文档中在使用组件<code>xr-start</code>时，传入了<code>width</code>和<code>height</code>，区别于<code>style</code>中的<code>width</code>和<code>height</code>，作为<code>props</code>的宽高决定了渲染的宽高，可以理解为分辨率，此处的宽高越大，渲染出来的精细度越高，反之，越低就越糊。</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202304111109759.png" alt=""></p><h1>编写组件</h1><h2 id="wxml">wxml</h2><p>文档中已经明确指出，模板中只能存在一个<code>&lt;xr-scene&gt;&lt;/xr-scene&gt;</code>标签。</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202304111110297.png" alt=""></p><p>像光源、摄像机等基础概念文档中已有描述，在此不再赘述。</p><h2 id="Element-与-Component">Element 与 Component</h2><p>XR-Frame中有很多的元素Element，Element下面会挂载很多的Component，具体功能的实现都是靠Component</p><p>创建Element：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> xrFrameSystem = wx.<span class="hljs-title function_">getXrFrameSystem</span>();<br>scene.<span class="hljs-title function_">createElement</span>(xrFrameSystem.<span class="hljs-property">XRNode</span>);<br></code></pre></td></tr></table></figure><p><code>xrFrameSystem.XRNode</code>中的XRNode就是一个元素，所有以XR开头的都是元素，例如<code>XRARTracker</code>、<code>XRGLTF</code>等</p><p>创建一个Element后，会有默认挂载的Component，可以通过API文档查询到</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/xr-frame/classes/XRGLTF.html" title="Class: XRGLTF | 微信开放文档 (qq.com)">Class: XRGLTF | 微信开放文档 (qq.com)</a></p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202304111158632.png" alt=""></p><p>增加、删除Component：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Element</span>.<span class="hljs-title function_">addComponent</span>(xrFrameSystem.<span class="hljs-property">xxx</span>,&#123;...options&#125;)<br><span class="hljs-title class_">Element</span>.<span class="hljs-title function_">removeComponent</span>(xrFrameSystem.<span class="hljs-property">xxx</span>)<br></code></pre></td></tr></table></figure><h2 id="动态载入资源">动态载入资源</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/xr-frame/assets/" title="资源系统 | 微信开放文档 (qq.com)">资源系统 | 微信开放文档 (qq.com)</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript">scene.<span class="hljs-property">assets</span>.<span class="hljs-title function_">loadAsset</span>(&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;gltf&quot;</span>,<br>  <span class="hljs-attr">assetId</span>: i.<span class="hljs-property">id</span>,<br>  <span class="hljs-attr">src</span>: i.<span class="hljs-property">model</span>,<br>  <span class="hljs-attr">options</span>: &#123;&#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="多个ARTracker">多个ARTracker</h2><p>通过ARTracker可以识别图像，demo中通过在wxml中添加标签的方式添加ARTracker，优点是方便易懂，但是不能动态添加，往往我们需要根据后端返回的数据，动态添加ARTracker</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202304111119144.png" alt=""></p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202304111119024.png" alt=""></p><p>想要在<code>xr-frame</code>中添加元素，必须要用到**<code>shadow-node</code>**</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">xr-scene</span> <span class="hljs-attr">ar-system</span>=<span class="hljs-string">&quot;modes:Marker&quot;</span> <span class="hljs-attr">bind:ready</span>=<span class="hljs-string">&quot;handleReady&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">xr-light</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;ambient&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;1 1 1&quot;</span> <span class="hljs-attr">intensity</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">xr-light</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;directional&quot;</span> <span class="hljs-attr">rotation</span>=<span class="hljs-string">&quot;40 70 0&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;1 1 1&quot;</span> <span class="hljs-attr">intensity</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">cast-shadow</span> /&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">xr-shadow</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;shadow-node&quot;</span> /&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">xr-camera</span> <span class="hljs-attr">clear-color</span>=<span class="hljs-string">&quot;0.4 0.8 0.6 1&quot;</span> <span class="hljs-attr">background</span>=<span class="hljs-string">&quot;ar&quot;</span> <span class="hljs-attr">is-ar-camera</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xr-scene</span>&gt;</span><br></code></pre></td></tr></table></figure><p>先在页面中准备好一个<code>shadow-node</code>，设置好<code>id</code>，然后通过js获取</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> xrFrameSystem = wx.<span class="hljs-title function_">getXrFrameSystem</span>();<br><span class="hljs-keyword">const</span> shadow = scene.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;shadow-node&quot;</span>);<br></code></pre></td></tr></table></figure><p>然后通过循环创建ARTracker，并添加到<code>shadow-node</code>下即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> arTracker = scene.<span class="hljs-title function_">createElement</span>(xrFrameSystem.<span class="hljs-property">XRARTracker</span>, &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;Marker&quot;</span>,<br>    <span class="hljs-attr">src</span>: i.<span class="hljs-property">image</span>,  <span class="hljs-comment">//i为mockdata中的一项，这里绑定了识别图像为i.image</span><br>&#125;);<br>shadow.<span class="hljs-title function_">addChild</span>(arTracker);<br></code></pre></td></tr></table></figure><p>绑定了识别图像后，还需要绑定识别成功后显示的模型，我这里使用<code>xr-node</code>作为模型挂载的节点，大家可以吧<code>xr-node</code>理解成<code>div</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> node = scene.<span class="hljs-title function_">createElement</span>(xrFrameSystem.<span class="hljs-property">XRNode</span>);<br><br>arTracker.<span class="hljs-title function_">addChild</span>(node);<br><br><span class="hljs-keyword">const</span> nodeComp = node.<span class="hljs-title function_">getComponent</span>(xrFrameSystem.<span class="hljs-property">Transform</span>);<br><br><span class="hljs-comment">//下面是给node加上node-id，并设置模型的比例，位置，旋转</span><br>nodeComp.<span class="hljs-title function_">setData</span>(&#123; <span class="hljs-attr">nodeId</span>: i.<span class="hljs-property">id</span> &#125;);<br>nodeComp.<span class="hljs-property">scale</span>.<span class="hljs-title function_">setArray</span>(i.<span class="hljs-property">scale</span>);<br>nodeComp.<span class="hljs-property">position</span>.<span class="hljs-title function_">setArray</span>(i.<span class="hljs-property">position</span>);<br>nodeComp.<span class="hljs-property">rotation</span>.<span class="hljs-title function_">setArray</span>(i.<span class="hljs-property">rotation</span>);<br><br><span class="hljs-keyword">const</span> gltfElement = scene.<span class="hljs-title function_">createElement</span>(xrFrameSystem.<span class="hljs-property">XRGLTF</span>);<br>node.<span class="hljs-title function_">addChild</span>(gltfElement);<br><br><span class="hljs-keyword">const</span> gltfComp = gltfElement.<span class="hljs-title function_">getComponent</span>(xrFrameSystem.<span class="hljs-property">GLTF</span>);<br><br>gltfComp.<span class="hljs-title function_">setData</span>(&#123;<br>  <span class="hljs-attr">model</span>: scene.<span class="hljs-property">assets</span>.<span class="hljs-title function_">getAsset</span>(<span class="hljs-string">&quot;gltf&quot;</span>, i.<span class="hljs-property">id</span>),<br>&#125;);<br><br>gltfElement<br>.<span class="hljs-title function_">getComponent</span>(xrFrameSystem.<span class="hljs-property">Animator</span>)<br>.<span class="hljs-title function_">setData</span>(&#123; <span class="hljs-attr">autoPlay</span>: &#123;&#125; &#125;);<br><br></code></pre></td></tr></table></figure><p>到这里需要识别的图像和识别成功后对应展示的模型已经绑定好了，笔者这里还有额外的需求，即点击对应模型，弹出模型展示页，因此需要增加和模型的交互。这里有一个大坑。</p><h2 id="添加模型交互">添加模型交互</h2><p>要给模型添加交互，需要先给模型加上体积，并绑定事件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript">gltfElement.<span class="hljs-title function_">addComponent</span>(xrFrameSystem.<span class="hljs-property">CubeShape</span>, &#123;<br>    <span class="hljs-attr">autoFit</span>: <span class="hljs-literal">true</span>,<br>&#125;);<br><br>gltfComp.<span class="hljs-property">el</span>.<span class="hljs-property">event</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;touch-shape&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">triggerEvent</span>(<span class="hljs-string">&quot;onModelTapped&quot;</span>, i.<span class="hljs-property">id</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="放置模型">放置模型</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/xr-frame/#%E8%99%9A%E6%8B%9F-x-%E7%8E%B0%E5%AE%9E%EF%BC%8C%E8%BF%BD%E5%8A%A0-AR-%E8%83%BD%E5%8A%9B" title="开始 | 微信开放文档 (qq.com)">开始 | 微信开放文档 (qq.com)</a></p><p>原理大同小异，也是通过<code>shadow-node</code>添加元素即可。记得添加<code>node</code>时要先将<code>visible</code>设置为<code>false</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> xrFrameSystem = wx.<span class="hljs-title function_">getXrFrameSystem</span>();<br><span class="hljs-keyword">const</span> shadow = scene.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;shadow-node&quot;</span>);<br><span class="hljs-keyword">const</span> node = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">node</span> = scene.<span class="hljs-title function_">createElement</span>(xrFrameSystem.<span class="hljs-property">XRNode</span>, &#123;<br>    <span class="hljs-attr">visible</span>: <span class="hljs-string">&quot;false&quot;</span>, <span class="hljs-comment">//默认为false，并且只能为字符串。</span><br>&#125;));<br><br>shadow.<span class="hljs-title function_">addChild</span>(node);<br><br><span class="hljs-keyword">const</span> gltfElement = scene.<span class="hljs-title function_">createElement</span>(xrFrameSystem.<span class="hljs-property">XRGLTF</span>);<br>node.<span class="hljs-title function_">addChild</span>(gltfElement);<br><span class="hljs-keyword">const</span> gltfComp = gltfElement.<span class="hljs-title function_">getComponent</span>(xrFrameSystem.<span class="hljs-property">GLTF</span>);<br>gltfComp.<span class="hljs-title function_">setData</span>(&#123; <span class="hljs-attr">model</span>: loadedAsset &#125;);<br>gltfElement.<span class="hljs-title function_">getComponent</span>(xrFrameSystem.<span class="hljs-property">Animator</span>).<span class="hljs-title function_">setData</span>(&#123; <span class="hljs-attr">autoPlay</span>: &#123;&#125; &#125;);<br><br></code></pre></td></tr></table></figure><p>点击放置时，会触发<code>placeHere</code>方法，后面的<code>true</code>就是将上面的<code>visible: &quot;false&quot;</code>中的<code>visible</code>设置为了<code>true</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">event</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;touchstart&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">ar</span>.<span class="hljs-title function_">placeHere</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">node</span>, <span class="hljs-literal">true</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="node-id在哪设置">node-id在哪设置</h2><p>找了好大一圈才知道，nodeId是要在<code>xrFrameSystem.Transform</code>这个Component中设置的。</p><p>通过这个组件设置的值可以在<a href="https://developers.weixin.qq.com/miniprogram/dev/api/xr-frame/interfaces/ITransformData.html" title="文档">文档</a>中查到，但是非常难找到</p><h1>后记</h1><p>微信的这个框架目前还处于beta状态，网上相关的资料也少，文档的描述个人感觉还是比较难懂的，希望笔者的文章能给大家带来一点帮助。</p>]]></content>
    
    
    
    <tags>
      
      <tag>踩坑</tag>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在VueRouter中使用Pinia</title>
    <link href="/2023/01/23/49-%E5%9C%A8VueRouter%E4%B8%AD%E4%BD%BF%E7%94%A8Pinia/"/>
    <url>/2023/01/23/49-%E5%9C%A8VueRouter%E4%B8%AD%E4%BD%BF%E7%94%A8Pinia/</url>
    
    <content type="html"><![CDATA[<h1>在VueRouter中使用Pinia</h1><p>2023 年 9 月 18 日更新：</p><p>经过评论提醒，Pinia 官方文档已经提供了解决方案，具体请参考<a href="https://pinia.vuejs.org/zh/core-concepts/outside-component-usage.html">官方文档</a></p><p>一言以蔽之，在 Pinia 实例化之后再使用</p><h1>前言</h1><p>目前Vue3+Vite+Pinia+VueRouter的组合已经非常流行了，但是在使用过程中也发现了一个小小的问题，即在VueRouter中使用Pinia会报错，后来经过一番研(bai)究(du)找到了解决方法</p><p>报错文字：</p><blockquote><p>Uncaught Error: [🍍]: getActivePinia was called with no active Pinia. Did you forget to install pinia?<br>const pinia = createPinia()<br>app.use(pinia)<br>This will fail in production.</p></blockquote><h1>问题复现</h1><h2 id="demo结构">demo结构</h2><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202301131135400.png" alt=""></p><h2 id="代码呈现">代码呈现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//counter.js</span><br><span class="hljs-keyword">import</span> &#123; ref, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCounterStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;counter&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> doubleCount = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> count.<span class="hljs-property">value</span> * <span class="hljs-number">2</span>)<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>    count.<span class="hljs-property">value</span>++<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> &#123; count, doubleCount, increment &#125;<br>&#125;)<br><br><br><span class="hljs-comment">//router/index.js</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/HomeView.vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123;useCounterStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/stores/counter&#x27;</span><br><br><span class="hljs-keyword">const</span> counterStore=<span class="hljs-title function_">useCounterStore</span>()<br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;../views/AboutView.vue&#x27;</span>)<br>    &#125;<br>  ]<br>&#125;)<br><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span></span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(to.<span class="hljs-property">name</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">from</span>.<span class="hljs-property">name</span>)<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></td></tr></table></figure><h2 id="报错提示">报错提示</h2><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202301131137003.png" alt=""></p><p>初步推测是因为初始化VueRouter的时机比初始化Pinia的时机更早</p><h1>解决方法</h1><ol><li class="lvl-4"><p>单独导出pinia</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/202301131141331.png" alt=""></p><p>新建了一个pinia.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//pinia.js</span><br><span class="hljs-keyword">import</span> &#123;createPinia&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;<br><br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>();<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> pinia;<br><br></code></pre></td></tr></table></figure></li><li class="lvl-4"><p>在引用到store的地方使用pinia.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//router/index.js</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/HomeView.vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123;useCounterStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/stores/counter&#x27;</span><br><span class="hljs-keyword">import</span> pinia <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/stores/pinia&#x27;</span><br><br><span class="hljs-keyword">const</span> counterStore=<span class="hljs-title function_">useCounterStore</span>(pinia) <span class="hljs-comment">//在此处传入pinia</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>......<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></td></tr></table></figure></li></ol><p>问题解决！</p><h1>后记</h1><p>目前官方文档并没有提供相应的解决方案，目前这个方法不是很优雅，但是能够解决这个问题，期待其他的解决方法！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大屏可视化 用REM适配各尺寸屏幕</title>
    <link href="/2022/08/20/46-%E5%A4%A7%E5%B1%8F%E5%8F%AF%E8%A7%86%E5%8C%96-%E7%94%A8REM%E9%80%82%E9%85%8D%E5%90%84%E5%B0%BA%E5%AF%B8%E5%B1%8F%E5%B9%95/"/>
    <url>/2022/08/20/46-%E5%A4%A7%E5%B1%8F%E5%8F%AF%E8%A7%86%E5%8C%96-%E7%94%A8REM%E9%80%82%E9%85%8D%E5%90%84%E5%B0%BA%E5%AF%B8%E5%B1%8F%E5%B9%95/</url>
    
    <content type="html"><![CDATA[<h1>[大屏可视化] 用REM适配各尺寸屏幕</h1><h2 id="前言">前言</h2><p>对于大屏可视化来说，适配屏幕是一个重要的内容，一旦画面的格式出现了错误，对于整体的观感是毁灭性的打击。在我的这个项目中，我使用了动态REM来进行屏幕适配</p><h2 id="如何适配屏幕？">如何适配屏幕？</h2><p>一般来说，前端做出来的页面都有一个固定的比例，而显示页面的大屏的比例不固定，因此就会出现画面的压缩或者拉伸，因此我们需要固定页面的比例</p><p>假设我们制作的页面是16:9的，那么我们的<code>页面有效宽度</code>：<code>页面有效高度</code>=<code>16</code>:<code>9</code></p><p>而对于显示设备而言，如果<code>设备的宽度</code>：<code>设备的高度</code>&gt;<code>16</code>:<code>9</code>，也就是显示设备长边非常长，即</p><p><img src="https://img.bald3r.wang/img/20220819160004.png" alt=""></p><p>那么我们的<code>页面有效高度</code>=<code>设备高度</code>，并设置<code>水平居中</code>，就可以了</p><p>如果<code>设备的宽度</code>：<code>设备的高度</code>&lt;<code>16</code>:<code>9</code>，也就是设备的高很大，即</p><p><img src="https://img.bald3r.wang/img/20220819160325.png" alt=""></p><p>那么我们应该设置<code>页面有效宽度</code>=<code>设备宽度</code>，并<code>垂直居中</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> clientWidth = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span><br><span class="hljs-keyword">const</span> clientHeight = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span><br><span class="hljs-keyword">const</span> pageWidth = clientWidth / clientHeight &gt; <span class="hljs-number">16</span> / <span class="hljs-number">9</span> ? clientHeight * <span class="hljs-number">16</span> / <span class="hljs-number">9</span> : clientWidth<br><span class="hljs-keyword">const</span> pageHeight = pageWidth / (<span class="hljs-number">16</span> / <span class="hljs-number">9</span>)<br>root.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = pageWidth + <span class="hljs-string">&#x27;px&#x27;</span><br>root.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = pageHeight + <span class="hljs-string">&#x27;px&#x27;</span><br><br></code></pre></td></tr></table></figure><p>如此以来，我们的页面的比例就正确了，那么我们的元素的尺寸怎么办呢？尺寸的单位一般有<code>px</code>,<code>pt</code>,<code>pc</code>,<code>in</code>,<code>cm</code>,<code>mm</code>,<code>%</code>,<code>em</code>,<code>ex</code>,<code>vh</code>,<code>vw</code>，显然我们不能写死尺寸，因此需要能动态调整的单位，因此只剩下了<code>em</code>,<code>ex</code>,<code>vh</code>,<code>vw</code>，通过上面的分析，<code>vh</code>和<code>vw</code>显然不合适，因为我们页面的尺寸并不确定，因此只剩下了<code>em</code>和<code>ex</code>，由于<code>ex</code>通常是<code>1/2em</code>，因此我们使用<code>em</code>，由于每个元素的<code>em</code>都可能不相同，因此我们需要一个能相对固定不变的<code>em</code>，那就是<code>rem</code>，<code>root</code>元素的<code>em</code></p><h2 id="什么是REM">什么是REM</h2><p>众所周知，有一个单位是<code>em</code>，代表了<code>1字符</code>长度，也就是<code>fontsize</code>，因此<code>rem</code>就是<code>root</code>元素的<code>fontsize</code></p><h2 id="怎么做动态REM？">怎么做动态REM？</h2><p>在本项目中，我们使用页面宽度的1%来做<code>rem</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">html</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>:$&#123;pageWidth / <span class="hljs-number">100</span>&#125;px</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="还原设计稿">还原设计稿</h2><p>准备工作都做好了，我们开始设计时，所有的尺寸单位都要变为<code>rem</code>，比如在一个<code>1920px * 1080px</code>的设计稿中，某个元素的宽度为<code>192px</code>，那我们在设置时就要设置为<code>10rem</code>，进行这样的换算很麻烦，因此我们通过一个函数来解决这个问题</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">px</span> = (<span class="hljs-params">n: <span class="hljs-built_in">number</span></span>) =&gt; n / <span class="hljs-number">1920</span> * (<span class="hljs-variable language_">window</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>).<span class="hljs-property">pageWidth</span>;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sass&#x20;(scss)&#x20;">@function px($n) &#123;<br>  @return calc($n / 1920) * 100rem<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们只需要设置宽度为<code>px(192)</code>就可以，不需要自己换算</p><p>至此大屏可视化的适配就完成了</p><h2 id="后记">后记</h2><p>这是我自己的一点心得，如果你有更好的方法，可以留言告诉我~</p>]]></content>
    
    
    <categories>
      
      <category>大屏可视化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发财图床 与LeanCloud交互</title>
    <link href="/2022/08/19/45-%E5%8F%91%E8%B4%A2%E5%9B%BE%E5%BA%8A-%E4%B8%8ELeanCloud%E4%BA%A4%E4%BA%92/"/>
    <url>/2022/08/19/45-%E5%8F%91%E8%B4%A2%E5%9B%BE%E5%BA%8A-%E4%B8%8ELeanCloud%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<h1>[发财图床] 与LeanCloud交互</h1><h2 id="前言">前言</h2><p>在本项目中，我主要通过LeanCloud来实现Serverless，因此与后端的交互也是通过LeanCloud提供的API</p><h2 id="代码实现">代码实现</h2><p>本项目中的交互较为简单，主要分为四个部分</p><h3 id="用户注册">用户注册</h3><p>LeanCloud提供了注册的接口，只需要设置用户名和密码即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">AV</span>.<span class="hljs-title class_">User</span>();<br>user.<span class="hljs-title function_">setUsername</span>(username);<br>user.<span class="hljs-title function_">setPassword</span>(password);<br>user.<span class="hljs-title function_">signUp</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">loginedUser</span>) &#123;<br>  ...<br>&#125;, (<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(error));<br>&#125;));<br></code></pre></td></tr></table></figure><h3 id="用户登录与注销">用户登录与注销</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">login</span>(<span class="hljs-params">username: <span class="hljs-built_in">string</span>, password: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title class_">User</span>.<span class="hljs-title function_">logIn</span>(username, password).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">loginedUser</span>) =&gt;</span> <span class="hljs-title function_">resolve</span>(loginedUser), <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-title function_">reject</span>(error));<br>  &#125;);<br>&#125;,<br><span class="hljs-title function_">logout</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">User</span>.<span class="hljs-title function_">logOut</span>().<span class="hljs-title function_">then</span>();<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="上传图片">上传图片</h2><p>只需要设置文件名，所有者和地址即可上传文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//Uploader</span><br><span class="hljs-title function_">add</span>(<span class="hljs-params">file: <span class="hljs-built_in">any</span>, filename: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> item = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">AV</span>.<span class="hljs-title class_">Object</span>(<span class="hljs-string">&#x27;Image&#x27;</span>);<br>  <span class="hljs-keyword">const</span> avFile = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">AV</span>.<span class="hljs-title class_">File</span>(filename, file);<br>  item.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;filename&#x27;</span>, filename);<br>  item.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;owner&#x27;</span>, <span class="hljs-variable constant_">AV</span>.<span class="hljs-property">User</span>.<span class="hljs-title function_">current</span>());<br>  item.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;url&#x27;</span>, avFile);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-variable constant_">AV</span>.<span class="hljs-property">Object</span>&gt;(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    item.<span class="hljs-title function_">save</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">serverFile</span> =&gt;</span> <span class="hljs-title function_">resolve</span>(serverFile), <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-title function_">reject</span>(error));<br>  &#125;);<br>&#125;,<br><br><span class="hljs-comment">//image</span><br><span class="hljs-title function_">upload</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">isUploading</span> = <span class="hljs-literal">true</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">clearServerFile</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title class_">Uploader</span>.<span class="hljs-title function_">add</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">file</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">filename</span>)<br>      .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">serverFile</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setServerFile</span>(serverFile);<br>        <span class="hljs-title function_">resolve</span>(serverFile);<br>      &#125;)<br>      .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-title function_">reject</span>(error))<br>      .<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">changeIsUploading</span>());<br>  &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="查询历史记录">查询历史记录</h3><p>通过<code>limit</code>和<code>skip</code>实现分页查询，通过<code>descending</code>来排序，通过<code>equalTo</code>设置查询条件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">find</span>(<span class="hljs-params">&#123;page = <span class="hljs-number">0</span>, limit = <span class="hljs-number">10</span>&#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> query = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">AV</span>.<span class="hljs-title class_">Query</span>(<span class="hljs-string">&#x27;Image&#x27;</span>);<br>  query.<span class="hljs-title function_">limit</span>(limit);<br>  query.<span class="hljs-title function_">skip</span>(page * limit);<br>  query.<span class="hljs-title function_">descending</span>(<span class="hljs-string">&#x27;createdAt&#x27;</span>);<br>  query.<span class="hljs-title function_">equalTo</span>(<span class="hljs-string">&#x27;owner&#x27;</span>, <span class="hljs-variable constant_">AV</span>.<span class="hljs-property">User</span>.<span class="hljs-title function_">current</span>());<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Queriable</span>[]&gt;(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    query.<span class="hljs-title function_">find</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">results</span> =&gt;</span> <span class="hljs-title function_">resolve</span>(results)).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-title function_">reject</span>(error));<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后记">后记</h2><p>通过LeanCloud的API来操作整体还是非常方便的，通过分析LeanCloud后台的数据库不难看出其实除了我们提供的信息之外，LeanCloud自己也给上传内容进行了处理，比如进行加密，生成唯一的ID，增加创建时间和修改时间等等，因此我们在自定义后端接口的时候也可以模仿这个</p>]]></content>
    
    
    <categories>
      
      <category>发财图床</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发财图床 Mobx升级v6引bug</title>
    <link href="/2022/08/13/44-%E5%8F%91%E8%B4%A2%E5%9B%BE%E5%BA%8A-Mobx%E5%8D%87%E7%BA%A7v6%E5%BC%95bug/"/>
    <url>/2022/08/13/44-%E5%8F%91%E8%B4%A2%E5%9B%BE%E5%BA%8A-Mobx%E5%8D%87%E7%BA%A7v6%E5%BC%95bug/</url>
    
    <content type="html"><![CDATA[<h1>[发财图床] Mobx升级v6引bug</h1><h2 id="前言">前言</h2><p>一直用Mobx v5，近期升级了v6之后网页全噶了，后来查询文档和自己实验后发现，需要增加一个<code>makeAutoObservable(this)</code>，属于是新特性，因此发上来给升级后发现相同问题的小伙伴避坑</p><h2 id="旧版代码">旧版代码</h2><p>原代码很长，这里简化了一下用于演示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs react">class Store &#123;<br>  @observable isLogin: boolean = false;<br>  @observable isLoading: boolean = false;<br><br>  @action setIsLogin(isLogin: boolean) &#123;<br>    this.isLogin = isLogin;<br>  &#125;;<br>&#125;<br><br>export default Store;<br></code></pre></td></tr></table></figure><h2 id="新版代码">新版代码</h2><p>v6的官方文档说不推荐装饰器写法了，因此我也不再使用装饰器写法，大🔥儿们都喜欢哪种写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs react">class Store &#123;<br>  constructor() &#123;<br>    makeAutoObservable(this);<br>  &#125;<br><br>  isLogin: boolean = false;<br>  isLoading: boolean = false;<br><br>  setIsLogin = (isLogin: boolean) =&gt; &#123;<br>    this.isLogin = isLogin;<br>  &#125;;<br>&#125;<br><br>export default Store;<br></code></pre></td></tr></table></figure><h2 id="后记">后记</h2><p>如果大🔥儿们有不同的做法欢迎留言告诉我~</p>]]></content>
    
    
    <categories>
      
      <category>发财图床</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发财图床 React懒加载和加载中</title>
    <link href="/2022/08/13/%E5%8F%91%E8%B4%A2%E5%9B%BE%E5%BA%8A-React%E6%87%92%E5%8A%A0%E8%BD%BD%E5%92%8C%E5%8A%A0%E8%BD%BD%E4%B8%AD/"/>
    <url>/2022/08/13/%E5%8F%91%E8%B4%A2%E5%9B%BE%E5%BA%8A-React%E6%87%92%E5%8A%A0%E8%BD%BD%E5%92%8C%E5%8A%A0%E8%BD%BD%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h1>[发财图床] React懒加载和加载中</h1><h2 id="前言">前言</h2><p>最近在做一个<code>React</code>+<code>React Router</code>+<code>TypeScript</code>+<code>Mobx</code>+<code>LeanCloud</code>的一个图床项目，</p><p>为了提高性能，在页面的展示中使用了懒加载，并做了一个加载页面，本文将记录一下实现过程</p><h2 id="加载页面的制作">加载页面的制作</h2><p>因为是在项目搭建骨架的时候制作的，所以有些草率，主要是那个意思</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/GIF%202022-8-13%2016-01-05_aBwFgF1DUY.gif" alt=""></p><h2 id="React懒加载">React懒加载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs react">import React, &#123;lazy, Suspense&#125; from &#x27;react&#x27;;<br>import &#x27;./App.css&#x27;;<br>import Header from &#x27;./components/Header&#x27;;<br>import Footer from &#x27;./components/Footer&#x27;;<br>import &#123;Routes, Route&#125; from &#x27;react-router-dom&#x27;;<br>import Loading from &#x27;./components/Loading&#x27;;<br>import Login from &#x27;./pages/Login&#x27;;<br>import Register from &#x27;./pages/Register&#x27;;<br><br>const Home = lazy(() =&gt; import(&#x27;./pages/Home&#x27;));<br>const History = lazy(() =&gt; import(&#x27;./pages/History&#x27;));<br>const About = lazy(() =&gt; import(&#x27;./pages/About&#x27;));<br><br>function App() &#123;<br>  return (<br>    &lt;&gt;<br>      &lt;Header/&gt;<br>      &lt;main&gt;<br>        &lt;Suspense fallback=&#123;&lt;Loading/&gt;&#125;&gt;<br>          &lt;Routes&gt;<br>            &lt;Route path=&quot;/&quot; element=&#123;&lt;Home/&gt;&#125;/&gt;<br>            &lt;Route path=&quot;/history&quot; element=&#123;&lt;History/&gt;&#125;/&gt;<br>            &lt;Route path=&quot;/about&quot; element=&#123;&lt;About/&gt;&#125;/&gt;<br>            &lt;Route path=&quot;/login&quot; element=&#123;&lt;Login/&gt;&#125;/&gt;<br>            &lt;Route path=&quot;/register&quot; element=&#123;&lt;Register/&gt;&#125;/&gt;<br>          &lt;/Routes&gt;<br>        &lt;/Suspense&gt;<br>      &lt;/main&gt;<br>      &lt;Footer/&gt;<br>    &lt;/&gt;<br>  );<br>&#125;<br><br>export default App;<br></code></pre></td></tr></table></figure><p>主要分为下面几个步骤：</p><ol><li class="lvl-4"><p>需要懒加载的组件通过<code>lazy(()=&gt;import())</code>动态加载</p></li><li class="lvl-4"><p>路由通过<code>&lt;Suspense&gt;&lt;/Suspense&gt;</code>标签包裹</p></li><li class="lvl-4"><p><code>&lt;Suspense fallback=&#123;&#125;&gt;&lt;/Suspense&gt;</code>中<code>fallback=&#123;&#125;</code>就是在加载过程中调用的内容，可以是函数或者React组件，本项目中使用的是组件</p></li></ol><h2 id="后记">后记</h2><p>如果你有更好的实现方法，欢迎留言告诉我~</p>]]></content>
    
    
    <categories>
      
      <category>发财图床</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用node写一个静态服务器</title>
    <link href="/2022/08/08/41-%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-%E7%94%A8node%E5%86%99%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2022/08/08/41-%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8-%E7%94%A8node%E5%86%99%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1>[静态服务器]用node写一个静态服务器</h1><h2 id="前言">前言</h2><p>使用node写一个简单的静态服务器，本项目主要使用了TypeScript</p><h2 id="实现过程">实现过程</h2><p>HTTP请求和响应主要分为两个部分，头和体，通过请求头我们能得到用户传来了什么请求，又请求什么</p><p>可以看到用户发了一个<code>GET</code>请求，请求了<code>/</code>路径</p><p><img src="https://img.bald3r.wang/img/20220807180603.png" alt=""></p><p>因此我们只需要对不同的请求类型和请求地址响应不同的内容即可</p><p>首先我们创建一个服务器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>();<br></code></pre></td></tr></table></figure><p>监听一个端口，这里我使用了<code>8888</code>端口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>);<br></code></pre></td></tr></table></figure><p>然后开始监听用户的请求</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;&#125;);<br></code></pre></td></tr></table></figure><p>在这里我们拿到了用户发来的<code>request</code>，分别拿到用户的请求类型<code>method</code>和请求路径<code>path</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript">server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> &#123;method, <span class="hljs-attr">url</span>: path&#125; = request;<br>&#125;);<br></code></pre></td></tr></table></figure><p>由于是静态服务器，因此我们只接受<code>GET</code>类型的请求</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">if</span> (method !== <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>  response.<span class="hljs-property">statusCode</span> = <span class="hljs-number">405</span>;<br>  response.<span class="hljs-title function_">end</span>();<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是对请求路径的分析，是非常简单的<code>if...else...</code>逻辑</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> &#123;pathname&#125; = url.<span class="hljs-title function_">parse</span>(path <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>);<br><br><span class="hljs-keyword">const</span> filename = pathname?.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>) || <span class="hljs-string">&#x27;index.html&#x27;</span>;<br>fs.<span class="hljs-title function_">readFile</span>(p.<span class="hljs-title function_">resolve</span>(publicDir, filename <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>), <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-keyword">if</span> (err.<span class="hljs-property">errno</span> === -<span class="hljs-number">4058</span>) &#123;<br>      response.<span class="hljs-property">statusCode</span> = <span class="hljs-number">404</span>;<br>      fs.<span class="hljs-title function_">readFile</span>(p.<span class="hljs-title function_">resolve</span>(publicDir, <span class="hljs-string">&#x27;404.html&#x27;</span>), <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>        response.<span class="hljs-title function_">end</span>(data);<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (err.<span class="hljs-property">errno</span> === -<span class="hljs-number">4068</span>) &#123;<br>      response.<span class="hljs-property">statusCode</span> = <span class="hljs-number">403</span>;<br>      response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Forbidden&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      response.<span class="hljs-property">statusCode</span> = <span class="hljs-number">500</span>;<br>      response.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;Unknown Error&#x27;</span>);<br>      response.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;Please Retry Later&#x27;</span>);<br>      response.<span class="hljs-title function_">end</span>();<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    response.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">`public, max-age=<span class="hljs-subst">$&#123;cacheAge&#125;</span>`</span>);<br>    response.<span class="hljs-title function_">end</span>(data);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>至此一个简单的静态服务器就完成了，如果你有好的想法，欢迎留言告诉我~</p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用node写一个命令行翻译工具</title>
    <link href="/2022/08/08/Cli-Translator-%E7%94%A8node%E5%86%99%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BF%BB%E8%AF%91%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/08/08/Cli-Translator-%E7%94%A8node%E5%86%99%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BF%BB%E8%AF%91%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1>[Cli Translator]用node写一个命令行翻译工具</h1><h2 id="前言">前言</h2><p>这是一个用node和TypeScript写的命令行工具，可以翻译中文或者英文单词，主要是实践用node发请求，目前已经发布<a href="https://www.npmjs.com/package/bald3r-node-cli-translator" title="npm">npm</a>和<a href="https://github.com/baIder/node-translator" title="GitHub">GitHub</a></p><h2 id="使用方法">使用方法</h2><p>安装<code>bald3r-node-cli-translator</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -g bald3r-node-cli-translator<br><br>or<br><br>yarn global add bald3r-node-cli-translator<br></code></pre></td></tr></table></figure><p>然后就可以愉快的在命令行里用<code>fy 词语</code>的方式进行翻译了</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/image_9pBdmyYb5u.png" alt=""></p><p>或者英译中</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/image_t8ScM-XsgT.png" alt=""></p><h2 id="实现过程">实现过程</h2><p>其实主要就是构造一个请求，然后调用某翻译api就行</p><p>在构造查询参数时，以前常用的<code>querystring.stringify()</code>已经噶了，在node14时弃用了，</p><p><img src="https://img.bald3r.wang/img/20220807220726.png" alt=""></p><p><img src="https://img.bald3r.wang/img/20220807220523.png" alt=""></p><p>网上有很多教程教你怎么关闭编辑器的弃用提示，我个人还是比较喜欢尝新的，因此选用了node推荐的<code>URLSearchParams</code></p><p>然后解析返回的<code>response</code>，得到最终的结果，如果有<code>error</code>的话就把<code>error</code>返回出来</p><p>这次的命令行还是使用的<a href="https://github.com/tj/commander.js" title="commander.js">commander.js</a>，想必大🔥儿们已经很熟悉了，就不再赘述</p><h2 id="后记">后记</h2><p>这个小工具主要是实践了一下如何发请求，以及在node14版本以上使用<code>URLSearchParams</code>API，欢迎各位和我一起交流讨论~</p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单元测试</title>
    <link href="/2022/08/07/40-Cli-Todo-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2022/08/07/40-Cli-Todo-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1>[Cli Todo]单元测试</h1><h2 id="前言">前言</h2><p>折磨一下这个命令行小工具，这里使用的是<a href="https://jestjs.io/zh-Hans/docs/getting-started" title="jest">jest</a>，主要的测试内容是文件的读写能力</p><h2 id="测试流程">测试流程</h2><ol><li class="lvl-4"><p>创建<code>__tests__/db.spec.js</code></p></li><li class="lvl-4"><p>明确目标，我们需要测试<code>fs</code>的读写，因此要进行mock</p></li><li class="lvl-4"><p>创建<code>__mocks__/fs.js</code></p></li><li class="lvl-4"><p>写测试代码</p></li><li class="lvl-4"><p>运行测试</p><p><img src="https://img.bald3r.wang/img/20220806231322.png" alt=""></p></li><li class="lvl-4"><p>大功告成</p></li></ol><h2 id="代码分析">代码分析</h2><p>通过<code>jest.mock()</code>对<code>fs</code>进行mock</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//__tests__/db.spec.js</span><br><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br>jest.<span class="hljs-title function_">mock</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这里使用了<code>describe</code>来测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//__tests__/db.spec.js</span><br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;db&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;can read&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;&#125;)<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;can write&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;&#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>由于使用到了fake fs，因此我们要准备好假身的功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//__mocks__/fs.js</span><br><br><span class="hljs-comment">//先将原有的功能全部复制给我们的fake fs</span><br><span class="hljs-keyword">const</span> fs = jest.<span class="hljs-title function_">createMockFromModule</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> _fs = jest.requireActual(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(fs, _fs)<br><br><span class="hljs-comment">//准备测试readFile的功能</span><br><span class="hljs-keyword">let</span> readMocks = &#123;&#125;<br><br>fs.<span class="hljs-property">setReadFileMock</span> = <span class="hljs-function">(<span class="hljs-params">path, error, data</span>) =&gt;</span> &#123;<br>  readMocks[path] = [error, data]<br>&#125;<br><br>fs.<span class="hljs-property">readFile</span> = <span class="hljs-function">(<span class="hljs-params">path, options, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//options是可选参数，如果没有传的话，callback就是第二个参数</span><br>  <span class="hljs-keyword">if</span> (callback === <span class="hljs-literal">undefined</span>) callback = options<br>  <span class="hljs-keyword">if</span> (path <span class="hljs-keyword">in</span> readMocks) &#123;<br>    <span class="hljs-title function_">callback</span>(...readMocks[path])<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    _fs.<span class="hljs-title function_">readFile</span>(path, options, callback)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//准备测试writeFile的功能</span><br><span class="hljs-keyword">let</span> writeMocks = &#123;&#125;<br><br>fs.<span class="hljs-property">setWriteFileMock</span> = <span class="hljs-function">(<span class="hljs-params">path, fn</span>) =&gt;</span> &#123;<br>  writeMocks[path] = fn<br>&#125;<br><br>fs.<span class="hljs-property">writeFile</span> = <span class="hljs-function">(<span class="hljs-params">path, data, options, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (path <span class="hljs-keyword">in</span> writeMocks) &#123;<br>    writeMocks[path](path, data, options, callback)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    _fs.<span class="hljs-title function_">writeFile</span>(path, data, options, callback)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>假身准备完毕，开始写测试的主体</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//__tests__/db.spec.js</span><br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;db&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;can read&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> data = [&#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;hi&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;]<br>    fs.<span class="hljs-title function_">setReadFileMock</span>(<span class="hljs-string">&#x27;/testRead&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data))<br>    <span class="hljs-keyword">const</span> list = <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">read</span>(<span class="hljs-string">&#x27;/testRead&#x27;</span>)<br>    <span class="hljs-title function_">expect</span>(list).<span class="hljs-title function_">toStrictEqual</span>(data)<br>  &#125;)<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;can write&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">let</span> fakeFile = <span class="hljs-string">&#x27;&#x27;</span><br>    fs.<span class="hljs-title function_">setWriteFileMock</span>(<span class="hljs-string">&#x27;/testWrite&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">path, data, callback</span>) =&gt;</span> &#123;<br>      fakeFile = data<br>      <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>)<br>    &#125;)<br>    <span class="hljs-keyword">const</span> list = [&#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&quot;test1&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;, &#123;<span class="hljs-attr">title</span>: <span class="hljs-string">&quot;test2&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;]<br>    <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">write</span>(list, <span class="hljs-string">&#x27;/testWrite&#x27;</span>)<br>    <span class="hljs-title function_">expect</span>(fakeFile).<span class="hljs-title function_">toBe</span>((<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(list) + <span class="hljs-string">&#x27;\n&#x27;</span>))<br>  &#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>为了保障每条测试项都互不干扰，我们需要做一个clear的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//__mocks__/fs.js</span><br><br>fs.<span class="hljs-property">clearMocks</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  readMocks = &#123;&#125;<br>  writeMocks = &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//__tests__/db.spec.js</span><br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;db&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">afterEach</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    fs.<span class="hljs-title function_">clearMocks</span>()<br>  &#125;)<br>  ...<br>&#125;)<br></code></pre></td></tr></table></figure><p>至此测试代码全部写完了。</p><h2 id="后记">后记</h2><p>这是一个简单的单元测试，如果你有意见或建议，欢迎留言告诉我~</p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个命令行todo工具</title>
    <link href="/2022/08/06/Cli-Todo-%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%A1%8Ctodo%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/08/06/Cli-Todo-%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E8%A1%8Ctodo%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1>[Cli Todo] 一个命令行todo工具</h1><h2 id="前言">前言</h2><p><code>bald3r-node-todo</code>是一个用node.js开发的，主要用于命令行的todo工具，主要使用了fs模块，目前已经发布至npm</p><p>本工具主要使用了面向接口的编程思想，并用jest进行单元测试</p><h2 id="链接">链接</h2><p><a href="https://github.com/baIder/node-todo" title="baIder/node-todo (github.com)">baIder/node-todo (github.com)</a></p><p><a href="https://www.npmjs.com/package/bald3r-node-todo" title="bald3r-node-todo - npm (npmjs.com)">bald3r-node-todo - npm (npmjs.com)</a></p><h2 id="使用演示">使用演示</h2><ol><li class="lvl-4"><p>首先使用<code>yarn</code>或<code>npm</code>安装<code>bald3r-node-todo</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install bald3r-todo<br>yarn global add bald3r-todo<br><br></code></pre></td></tr></table></figure></li><li class="lvl-4"><p>安装完成后就可以使用全局命令<code>t</code>来使用了</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/image_PFI5q2iQdM.png" alt=""></p></li><li class="lvl-4"><p>使用命令行添加一个待办<code>t add [taskName]</code></p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/image_lXiFyGko6H.png" alt=""></p></li><li class="lvl-4"><p>查看当前待办</p><p><img src="https://img.bald3r.wang/img/20220806223935.png" alt=""></p></li><li class="lvl-4"><p>二级菜单</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/image_2le53n2lJK.png" alt=""></p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/image_JtaVVHAKR2.png" alt=""></p></li><li class="lvl-4"><p>清空所有待办<code>t clear</code></p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/image_E1-fjw9GOi.png" alt=""></p></li></ol><h2 id="实现过程">实现过程</h2><h3 id="实现命令行参数">实现命令行参数</h3><p>这里我使用了<a href="https://github.com/tj/commander.js#readme" title="commander库">commander库</a>来实现参数功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">program<br>  .<span class="hljs-title function_">command</span>(<span class="hljs-string">&#x27;add&#x27;</span>)<br>  .<span class="hljs-title function_">description</span>(<span class="hljs-string">&#x27;add a task&#x27;</span>)<br>  .<span class="hljs-title function_">action</span>(<span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> words = args.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>    api.<span class="hljs-title function_">add</span>(words).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The task has been successfully added&#x27;</span>)<br>    &#125;, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Failed to add the task&#x27;</span>)<br>    &#125;)<br>  &#125;)<br><br>program<br>  .<span class="hljs-title function_">command</span>(<span class="hljs-string">&#x27;clear&#x27;</span>)<br>  .<span class="hljs-title function_">description</span>(<span class="hljs-string">&#x27;clear all tasks&#x27;</span>)<br>  .<span class="hljs-title function_">action</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    api.<span class="hljs-title function_">clear</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;All tasks have been successfully removed&#x27;</span>)<br>    &#125;, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Failed to remove all the tasks&#x27;</span>)<br>    &#125;)<br>  &#125;)<br></code></pre></td></tr></table></figure><p>commander默认会有两个参数，一个是node的路径，一个是当前文件的路径，因此我们判断参数的数量是否为2就可以判断用户是否传参</p><p>如果用户没有传参，则显示所有的待办项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (process.<span class="hljs-property">argv</span>.<span class="hljs-property">length</span> === <span class="hljs-number">2</span>) &#123;<br>  api.<span class="hljs-title function_">showAll</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现可以操作的命令行">实现可以操作的命令行</h3><p>这里我使用了<a href="https://github.com/SBoudrias/Inquirer.js" title="inquirer库">inquirer库</a>来给命令行做了美化，实现可以用方向键和回车控制的UI界面</p><p>inquirer的使用非常简单，这里我展示二级菜单作为参考</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">askForAction</span>(<span class="hljs-params">list, index</span>) &#123;<br>  <span class="hljs-keyword">const</span> actions = &#123;markAsUndone, markAsDone, changeTitle, removeTask&#125;<br>  inquirer.<span class="hljs-title function_">prompt</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;list&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;action&#x27;</span>,<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;What to do with the task?&#x27;</span>,<br>    <span class="hljs-attr">choices</span>: [<br>      &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Exit&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;quit&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Mark as Done&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;markAsDone&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Mark as Undone&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;markAsUndone&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Edit Title&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;changeTitle&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Delete&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;removeTask&#x27;</span>&#125;,<br>    ]<br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">answer2</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> action = actions[answer2.<span class="hljs-property">action</span>]<br>    action &amp;&amp; <span class="hljs-title function_">action</span>(list, index)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>这样便实现了下图的二级菜单</p><p><img src="image/image_JtaVVHAKR2.png" alt=""></p><h3 id="待办项保存在本地">待办项保存在本地</h3><p>使用node.js的<code>fs</code>模块来实现对文件的读写，这里涉及一个保存路径的问题，在本项目中，为了方便使用了<code>~</code>目录，所有数据保存在<code>~/.todo</code>中</p><p>获取<code>~</code>目录：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> homedir = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;os&#x27;</span>).<span class="hljs-title function_">homedir</span>()<br><span class="hljs-keyword">const</span> home = process.<span class="hljs-property">env</span>.<span class="hljs-property">HOME</span> || homedir<br></code></pre></td></tr></table></figure><p>考虑到跨平台使用路径的表示方式不同，这里使用了node.js中的<code>path</code>模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> p = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> dbPath = p.<span class="hljs-title function_">join</span>(home, <span class="hljs-string">&#x27;.todo&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后使用<code>fs</code>模块中的<code>fs.readFile()</code>和<code>fs.writeFile()</code>即可完成对数据的读写。这里需要注意这两个操作都是异步的，因此用到了<code>Promise</code>，这里的<code>&#123;flag: 'a+'&#125;</code>是表示读取文件，若不存在则创建一个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">read</span>(<span class="hljs-params">path = dbPath</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    fs.<span class="hljs-title function_">readFile</span>(path, &#123;<span class="hljs-attr">flag</span>: <span class="hljs-string">&#x27;a+&#x27;</span>&#125;, <span class="hljs-function">(<span class="hljs-params">error, data</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(error)<br>      <span class="hljs-keyword">let</span> list<br>      <span class="hljs-keyword">try</span> &#123;<br>        list = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data.<span class="hljs-title function_">toString</span>())<br>      &#125; <span class="hljs-keyword">catch</span> (error2) &#123;<br>        list = []<br>      &#125;<br>      <span class="hljs-title function_">resolve</span>(list)<br>    &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后记">后记</h2><p>这是一个非常简单的小应用，如果你有任何的意见和建议，可以留言给我哦~</p>]]></content>
    
    
    <categories>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WEB性能优化</title>
    <link href="/2022/08/04/38-WEB%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2022/08/04/38-WEB%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1>WEB性能优化</h1><ol><li class="lvl-4"><p><a href="http://xn--baidu-ep5h9728a.com">输入baidu.com</a></p></li><li class="lvl-4"><p>DNS解析出IP</p><p>DNS服务优化，花钱</p></li><li class="lvl-4"><p>给服务器发http请求</p><p>多个tcp连接   连接复用（keep-alive）</p></li><li class="lvl-4"><p>服务器查询数据库</p><p>SQL优化</p></li><li class="lvl-4"><p>数据传输</p><p>提高服务器带宽</p><p>开启压缩算法gzip</p><p>优化文件</p><p>优化CSS</p><p>优化JS</p></li><li class="lvl-4"><p>页面优化</p><p>先加载CSS再加载JS</p><p>懒加载，先不加载第2屏</p><p>预加载，提前加载后一页</p></li><li class="lvl-4"><p>缓存</p><p>给css/js/img加缓存</p></li><li class="lvl-4"><p>发请求</p><p>cdn域名</p><p>增加并发量</p><p>cookie-free</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>checkbox的妙用</title>
    <link href="/2022/08/03/37-checkbox%E7%9A%84%E5%A6%99%E7%94%A8/"/>
    <url>/2022/08/03/37-checkbox%E7%9A%84%E5%A6%99%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1>checkbox的妙用</h1><h2 id="前言">前言</h2><p>今天在B站看到了一个分享按钮的制作，简单看了一下发现里面有一个很有意思的点</p><h2 id="HTML结构">HTML结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mainbox&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;check&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;check&quot;</span>&gt;</span>分享<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;media-icons&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>QQ<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Wechat<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Weibo<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>TikTok<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不难看出这边使用了一个<code>checkbox</code>和一个<code>label</code>，两者相互关联，点击<code>label</code>就会触发<code>checkbox</code>的<code>checked</code>，更便于写CSS</p><h2 id="CSS部分">CSS部分</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 这里用伪元素来做了一下label被点击之后的效果 */</span><br><span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;取消&#x27;</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">35px</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-id">#check</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-comment">/* 这里非常巧妙的用checkbox的状态来控制伪元素 */</span><br><span class="hljs-selector-id">#check</span><span class="hljs-selector-pseudo">:checked</span> ~ <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后记">后记</h2><p>如果让我来做的话我可能会用JS去监听<code>label</code>，点击之后通过<code>class</code>来切换状态，能想到用<code>checkbox</code>实属妙极</p>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发财UI 官网装修 Flash Of Unstyled Content</title>
    <link href="/2022/08/02/35-%E5%8F%91%E8%B4%A2UI-%E5%AE%98%E7%BD%91%E8%A3%85%E4%BF%AE-Flash-Of-Unstyled-Content/"/>
    <url>/2022/08/02/35-%E5%8F%91%E8%B4%A2UI-%E5%AE%98%E7%BD%91%E8%A3%85%E4%BF%AE-Flash-Of-Unstyled-Content/</url>
    
    <content type="html"><![CDATA[<h1>[发财UI]官网装修 Flash Of Unstyled Content</h1><h2 id="前言">前言</h2><p>我在网站的CSS中引用了一个Poppins字体，但是导致了网站加载完成后会闪烁一下应用字体</p><p>这个现象叫做<strong>Flash of Unstyled Content</strong>，缩写为FOUC</p><h2 id="如何解决">如何解决</h2><p>网上找了一圈，发现这个问题很难解决，这是由于在CSS中<code>@import</code>引起的，浏览器就是会在html部分渲染完成后再执行CSS中的<code>@import</code></p><p>部分人提出将<code>@import</code>的内容放在html中，在<code>&lt;head&gt;</code>中加一个<code>&lt;link&gt;</code>，或者在<code>&lt;head&gt;</code>中写<code>&lt;style&gt; @import ... &lt;/style&gt;</code>，但是针对我这个情况都没有效果</p><p>因此我的答案是，无法解决</p><p>但是我找到了一个方法，可以改善观感，那就是增加一个渐变的遮罩</p><h2 id="如何优化">如何优化</h2><p>通过在html中新建一个遮罩层，在加载完成后播放一个700ms的渐变动画，将内容闪烁盖住，就可以有效的提升浏览体验</p><p>没有遮罩前：</p><p><img src="https://img.bald3r.wang/img/noWrapper.gif" alt=""></p><p>加入遮罩后：</p><p><img src="https://balder-wang-images.oss-cn-shanghai.aliyuncs.com/img/hasWrapper.gif" alt=""></p><h2 id="后记">后记</h2><p>问题仍然存在，只不过我暂时将其隐藏了起来，如果你有更好的解决方法，欢迎留言告诉我~</p>]]></content>
    
    
    <categories>
      
      <category>发财UI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发财UI rollup 问题</title>
    <link href="/2022/08/01/34-%E5%8F%91%E8%B4%A2UI-rollup-%E9%97%AE%E9%A2%98/"/>
    <url>/2022/08/01/34-%E5%8F%91%E8%B4%A2UI-rollup-%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1>[发财UI] rollup 问题</h1><h2 id="前言">前言</h2><p>发财UI已经调试完毕准备rollup，在执行<code>rollup -c</code>的时候出现了一个报错：</p><p><img src="https://img.bald3r.wang/img/20220801132528.png" alt=""></p><h2 id="解决方法">解决方法</h2><p>这是因为rollup的plugins是有顺序的，这里是esbuild没有认出vue的组件，只需要调整rollup.config.js中的plugins顺序</p><p>原来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">scss</span>(&#123;<span class="hljs-attr">include</span>: <span class="hljs-regexp">/\.scss$/</span>, <span class="hljs-attr">sass</span>: dartSass&#125;),<br>    <span class="hljs-title function_">esbuild</span>(&#123;<br>        <span class="hljs-attr">include</span>: <span class="hljs-regexp">/\.[jt]s$/</span>,<br>        <span class="hljs-attr">minify</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>,<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;es2015&#x27;</span><br>    &#125;),<br>    <span class="hljs-title function_">vue</span>(&#123;<br>        <span class="hljs-attr">include</span>: <span class="hljs-regexp">/\.vue$/</span>,<br>    &#125;),<br>],<br></code></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">scss</span>(&#123;<span class="hljs-attr">include</span>: <span class="hljs-regexp">/\.scss$/</span>, <span class="hljs-attr">sass</span>: dartSass&#125;),<br>    <span class="hljs-title function_">vue</span>(&#123;<br>        <span class="hljs-attr">include</span>: <span class="hljs-regexp">/\.vue$/</span>,<br>    &#125;),<br>    <span class="hljs-title function_">esbuild</span>(&#123;<br>        <span class="hljs-attr">include</span>: <span class="hljs-regexp">/\.[jt]s$/</span>,<br>        <span class="hljs-attr">minify</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;production&#x27;</span>,<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;es2015&#x27;</span><br>    &#125;),<br>],<br></code></pre></td></tr></table></figure><p>再次运行<code>rollup -c</code>，可以看到问题已解决</p><p><img src="https://img.bald3r.wang/img/20220801132855.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>发财UI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
      <tag>rollup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发财UI 开发日志</title>
    <link href="/2022/07/30/31-%E5%8F%91%E8%B4%A2UI-%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%971/"/>
    <url>/2022/07/30/31-%E5%8F%91%E8%B4%A2UI-%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%971/</url>
    
    <content type="html"><![CDATA[<h1>[发财UI] 开发日志</h1><h2 id="Vue3中的props和attributes">Vue3中的props和attributes</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Vue3中默认会将外部的<code>@click=&quot;click&quot;</code>传给组件的最外层元素，也就是<code>&lt;button&gt;&lt;/button&gt;</code>上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classes&quot;</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rich-button&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;loading&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rich-loadingIndicator&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="属性绑定">属性绑定</h3><p>通过<code>inheritAttrs</code>可以选择是否继承组件外部的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">inheritAttrs</span>:<span class="hljs-literal">false</span>  <span class="hljs-comment">//button不再继承外部属性</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>通过<code>$attrs</code>绑定外部属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  //默认属性会继承到div上</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;$attrs&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  //手动将属性绑定到button上</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>部分绑定属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">Button</span> @click=<span class="hljs-string">&quot;click&quot;</span> size=<span class="hljs-string">&quot;&quot;</span> xxx=<span class="hljs-string">&quot;xxx&quot;</span>&gt;按钮&lt;/<span class="hljs-title class_">Button</span>&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:size</span>=<span class="hljs-string">&quot;size&quot;</span>&gt;</span>  //将size绑定到div上</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;rest&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  //将rest绑定到button上</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                                //rest包含了click和xxx属性</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props, context</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> &#123;size, ...rest&#125; = context.<span class="hljs-property">attrs</span>  <span class="hljs-comment">//将继承的属性分为两个部分</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;size, rest&#125;    <span class="hljs-comment">//一部分是size，一部分是rest</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="props-VS-attrs">props VS attrs</h3><p>1、props 要先声明才能取值，attrs 不用先声明</p><p>2、props 声明过的属性，attrs 里不会再出现</p><p>3、props 不包含事件，attrs 包含</p><p>4、props 支持 string 以外的类型，attrs 只有 string 类型</p><h2 id="项目开发中的CSS原则">项目开发中的CSS原则</h2><ol><li class="lvl-4"><p>组件的CSS不能用scoped</p></li><li class="lvl-4"><p>每个CSS的类最好加上前缀，防止相互覆盖</p></li><li class="lvl-4"><p>CSS最小影响原则</p></li></ol><h2 id="如何做loading动画">如何做loading动画</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.rich-loadingIndicator</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">border-color</span>: $button-blue $button-blue $button-blue transparent;<br>  <span class="hljs-attribute">border-style</span>: solid;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">2px</span>;<br>  <span class="hljs-attribute">animation</span>: rich-spin <span class="hljs-number">1s</span> infinite linear;<br>&#125;<br>  <br><span class="hljs-keyword">@keyframes</span> rich-spin &#123;<br><span class="hljs-number">0%</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>)<br>&#125;<br><span class="hljs-number">100%</span> &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="具名插槽">具名插槽</h2><p>给<code>slot</code>一个<code>name</code>，就可以精准的确定<code>slot</code>对应的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rich-dialog-close&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;content&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:content</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>hi<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hi2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>加粗的标题<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="Teleport-传送标签">Teleport 传送标签</h2><p>在<code>&lt;Teleport to=&quot;目的地&quot;&gt;&lt;/Teleport&gt;</code>中的内容会被挂载到目的地下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Teleport</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Tabs">Tabs</h2><p>用JS获取插槽内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> defaults = context.<span class="hljs-property">slots</span>.<span class="hljs-title function_">default</span>()<br></code></pre></td></tr></table></figure><p>在运行时确认子组件的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">defaults.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">tag</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (tag.<span class="hljs-property">type</span> !== <span class="hljs-title class_">Tab</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Tabs的子组件必须是Tab&#x27;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="getBoundingClientRect"><code>getBoundingClientRect()</code></h2><p><strong><code>Element.getBoundingClientRect()</code></strong> 方法返回一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMRect" title="DOMRect">DOMRect</a> 对象，其提供了元素的大小及其相对于<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport" title="视口">视口</a>的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;width,height,top,left&#125; = el.<span class="hljs-title function_">getBoundingClientRect</span>()<br></code></pre></td></tr></table></figure><h2 id="异步加载">异步加载</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">setup</span>(<span class="hljs-params">props</span>) &#123;  <br>  <span class="hljs-keyword">const</span> content = ref&lt;string&gt;(<span class="hljs-string">&#x27;&#x27;</span>)  <br>  <span class="hljs-keyword">import</span>(props.<span class="hljs-property">path</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;  <br>    content.<span class="hljs-property">value</span> = result.<span class="hljs-property">default</span>  <br>  &#125;)  <br>  <span class="hljs-keyword">return</span> &#123;content&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Custom-Blocks">Custom Blocks</h2><p>首先需要先配置好vite</p><p>vite.config.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br><span class="hljs-keyword">import</span> &#123;baseParse&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/compiler-core&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">vueCustomBlockTransforms</span>: &#123;<br>        <span class="hljs-attr">demo</span>: <span class="hljs-function">(<span class="hljs-params">options</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> &#123;code, path&#125; = options<br>            <span class="hljs-keyword">const</span> file = fs.<span class="hljs-title function_">readFileSync</span>(path).<span class="hljs-title function_">toString</span>()<br>            <span class="hljs-keyword">const</span> parsed = <span class="hljs-title function_">baseParse</span>(file).<span class="hljs-property">children</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n.<span class="hljs-property">tag</span> === <span class="hljs-string">&#x27;demo&#x27;</span>)<br>            <span class="hljs-keyword">const</span> title = parsed.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>].<span class="hljs-property">content</span><br>            <span class="hljs-keyword">const</span> main = file.<span class="hljs-title function_">split</span>(parsed.<span class="hljs-property">loc</span>.<span class="hljs-property">source</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">trim</span>()<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">`export default function (Component) &#123;</span><br><span class="hljs-string">        Component.__sourceCode = <span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">                <span class="hljs-built_in">JSON</span>.stringify(main)</span></span><br><span class="hljs-subst"><span class="hljs-string">            &#125;</span></span><br><span class="hljs-string">        Component.__sourceCodeTitle = <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(title)&#125;</span></span><br><span class="hljs-string">      &#125;`</span>.<span class="hljs-title function_">trim</span>()<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在需要变为demo的文件开头加上<code>&lt;demo&gt;Title&lt;/demo&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">demo</span>&gt;</span><br>常规使用<br><span class="hljs-tag">&lt;/<span class="hljs-name">demo</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;link&quot;</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>就可以在引用该demo的组件中使用相关的api</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Title</span> = component.<span class="hljs-property">__sourceCodeTitle</span><br><span class="hljs-keyword">const</span> soucreCode = component.<span class="hljs-property">__sourceCode</span><br><br></code></pre></td></tr></table></figure><h2 id="动态加载bug">动态加载bug</h2><p><code>yarn build</code>之后不能加载<code>.md</code>文件，浏览器提示404</p><p>原因是使用了动态加载，<code>rollup</code>不支持<code>import()</code>时拼字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> history = <span class="hljs-title function_">createWebHashHistory</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">md</span> = filename =&gt; <span class="hljs-title function_">h</span>(<span class="hljs-title class_">Markdown</span>, &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">`../markdown/<span class="hljs-subst">$&#123;filename&#125;</span>.md`</span>, <span class="hljs-attr">key</span>: filename&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    history, <span class="hljs-attr">routes</span>: [<br>        &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/doc&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Doc</span>, <span class="hljs-attr">children</span>: [<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/doc/intro&#x27;</span>&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;intro&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title function_">md</span>(<span class="hljs-string">&#x27;intro&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;install&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title function_">md</span>(<span class="hljs-string">&#x27;install&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;get-started&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title function_">md</span>(<span class="hljs-string">&#x27;get-started&#x27;</span>)&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;switch&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">SwitchDemo</span>&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;button&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">ButtonDemo</span>&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;dialog&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">DialogDemo</span>&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;tabs&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">TabsDemo</span>&#125;,<br>            ]<br>        &#125;,<br>    ]<br>&#125;);<br></code></pre></td></tr></table></figure><p>调整过后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> intro <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./markdown/intro.md&#x27;</span><br><span class="hljs-keyword">import</span> getStarted <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./markdown/get-started.md&#x27;</span><br><span class="hljs-keyword">import</span> install <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./markdown/install.md&#x27;</span><br><br><span class="hljs-keyword">const</span> history = <span class="hljs-title function_">createWebHashHistory</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">md</span> = string =&gt; <span class="hljs-title function_">h</span>(<span class="hljs-title class_">Markdown</span>, &#123;<span class="hljs-attr">content</span>: string, <span class="hljs-attr">key</span>: string&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    history, <span class="hljs-attr">routes</span>: [<br>        &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/doc&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Doc</span>, <span class="hljs-attr">children</span>: [<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/doc/intro&#x27;</span>&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;intro&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title function_">md</span>(intro)&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;install&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title function_">md</span>(install)&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;get-started&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title function_">md</span>(getStarted)&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;switch&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">SwitchDemo</span>&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;button&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">ButtonDemo</span>&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;dialog&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">DialogDemo</span>&#125;,<br>                &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;tabs&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">TabsDemo</span>&#125;,<br>            ]<br>        &#125;,<br>    ]<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>发财UI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发财UI Message组件的实现</title>
    <link href="/2022/07/30/33-%E5%8F%91%E8%B4%A2UI-Message%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/07/30/33-%E5%8F%91%E8%B4%A2UI-Message%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1>[发财UI] Message组件的实现</h1><h2 id="前言">前言</h2><p>最近在实现Message组件，就是会从屏幕顶端弹出的一个小提醒，过一会儿就消失了。我个人非常喜欢这个设计，感觉在后续的复用性也很高，于是就打算自己手写一个作为<a href="git.balder.wang/rich-ui-website/" title="发财UI">发财UI</a>的组件</p><h2 id="支持的功能">支持的功能</h2><p>目前的Message有四种类型：</p><ol><li class="lvl-4"><p>普通提醒normal</p><p><img src="https://img.bald3r.wang/img/normal.gif" alt=""></p></li><li class="lvl-4"><p>成功提醒success</p><p><img src="https://img.bald3r.wang/img/success.gif" alt=""></p></li><li class="lvl-4"><p>警告提醒warning</p><p><img src="https://img.bald3r.wang/img/warning.gif" alt=""></p></li><li class="lvl-4"><p>错误提醒error</p><p><img src="https://img.bald3r.wang/img/error.gif" alt=""></p></li></ol><p>同时还支持设置持续的时间：</p><p><img src="https://img.bald3r.wang/img/10s.gif" alt=""></p><h2 id="使用方法">使用方法</h2><p>是不是非常简单😉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;popNormalMsg&quot;</span>&gt;</span>打开一个普通提醒<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;popMessage&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../lib/popMessage&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Message1.demo&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123;<span class="hljs-title class_">Button</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> <span class="hljs-title function_">popNormalMsg</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">popMessage</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;这是一个全局显示的普通提醒&#x27;</span>,   <span class="hljs-comment">//提醒内容</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">msgType</span>: <span class="hljs-string">&#x27;normal&#x27;</span>,   <span class="hljs-comment">//提醒类型normal success error warning</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">closeDelay</span>: <span class="hljs-string">&#x27;2000&#x27;</span>,  <span class="hljs-comment">//显示的时长，以ms为单位</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;popNormalMsg&#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="实现过程">实现过程</h2><h3 id="如何实现不同类型的切换？">如何实现不同类型的切换？</h3><p>其实切换类型只是切换图标而已哈哈哈</p><p>这里使用了<a href="https://iconpark.oceanengine.com/official" title="IconPark图标库">IconPark图标库</a>，这里使用了一个投机取巧的办法，把不同的图标命名为相应的type，可以节省一些处理的步骤</p><table><thead><tr><th><code>href=#warning</code></th><th><code>msgType='warning'</code></th></tr></thead><tbody><tr><td><code>href=#error</code></td><td><code>msgType='error'</code></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> typeIndicator = <span class="hljs-string">`&lt;use href=&quot;#<span class="hljs-subst">$&#123;props.msgType&#125;</span>&quot;&gt;&lt;/use&gt;`</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;msgDiv&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rich-message&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconpark-icon&quot;</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;typeIndicator&quot;</span>&gt;</span></span><br><span class="language-xml">      //2️⃣typeIndicator的内容会原封不动的跑到这里</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span></span><br><span class="language-xml">    //3️⃣最后和svg标签一起变成type对应的图标</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rich-message-msgText&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Message&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">message</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">msgType</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;normal&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">setup</span>(<span class="hljs-params">props</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> typeIndicator = <span class="hljs-string">`&lt;use href=&quot;#<span class="hljs-subst">$&#123;props.msgType&#125;</span>&quot;&gt;&lt;/use&gt;`</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;typeIndicator&#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//1️⃣接受到传来的type，然后typeIndicator会自动变为相应的图标use标签</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h3 id="如何实现Message的弹出和消失？">如何实现Message的弹出和消失？</h3><p>使用了CSS的<code>transform</code>，实际上就是Message在初始状态下是藏在画面外的，通过添加一个<code>.message-active</code>的类来让它显示出来，在经过<code>closeDelay</code>毫秒后移除<code>.message-active</code>类。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.rich-message</span> &#123;<br>  ...<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">100px</span>);<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">250ms</span>;<br><br>  &amp;<span class="hljs-selector-class">.message-active</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0px</span>);<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="如何实现往下排列而非堆叠？">如何实现往下排列而非堆叠？</h3><p>为了让他们能够一个一个的排列下来而不是堆叠在一起，我想到了<code>insertAdjacentElement()</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.<span class="hljs-title function_">insertAdjacentElement</span>(position, element);<br></code></pre></td></tr></table></figure><p>position有下面四种取值</p><ul class="lvl-0"><li class="lvl-4"><p><code>'beforebegin'</code>: 在该元素本身的前面。</p></li><li class="lvl-4"><p><code>'afterbegin'</code>:只在该元素当中，在该元素第一个子孩子前面。</p></li><li class="lvl-4"><p><code>'beforeend'</code>:只在该元素当中，在该元素最后一个子孩子后面。</p></li><li class="lvl-4"><p><code>'afterend'</code>: 在该元素本身的后面。</p></li></ul><p>不难发现这里似乎可以使用<code>beforeend</code>和<code>afterend</code>。经过我的思考，为了保持DOM树的整洁，我采用了创建一个<code>msgContainer</code>的div来存放所有的Message的方法，因此我也相应的使用了<code>beforeend</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> msgContainer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;msgDiv&#x27;</span>)<br><span class="hljs-keyword">if</span> (msgContainer === <span class="hljs-literal">null</span>) &#123;<br>  msgContainer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>  msgContainer.<span class="hljs-property">id</span> = <span class="hljs-string">&#x27;msgDiv&#x27;</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(msgContainer)<br>&#125;<br><span class="hljs-keyword">const</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>); <span class="hljs-comment">//这个div就是Message所在的div</span><br>msgContainer.<span class="hljs-title function_">insertAdjacentElement</span>(<span class="hljs-string">&#x27;beforeend&#x27;</span>, div)<br></code></pre></td></tr></table></figure><p>给<code>msgContainer</code>一个CSS样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#msgDiv</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);<br><br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: column;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="如何实现添加和移除-message-active类？">如何实现添加和移除<code>.message-active</code>类？</h3><p>如果<code>msgDiv</code>在创建时就带有<code>.message-active</code>类，那么将会闪现在页面中，所以<code>msgDiv</code>应该是在渲染后被添加了<code>.message-active</code>类，为了实现这个效果，使用了一个<code>setTimeout()</code>。</p><p>同时在<code>closeDelay</code>之后将这个类移除。</p><p>但是这样存在一个问题，这个<code>msgDiv</code>只是看不见了，依然存在于DOM树中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    msgDiv.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;message-active&#x27;</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    msgDiv.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;message-active&#x27;</span>)<br>&#125;, closeDelay * <span class="hljs-number">1</span>);<br><br></code></pre></td></tr></table></figure><h3 id="如何将隐藏的Message从DOM树中移除">如何将隐藏的Message从DOM树中移除</h3><p>在Message的淡出动画结束后移除就好了，这里使用了<code>.ontransitionend</code>API，但是还存在问题，即如果有多个Message，他们会同时消失，原因是虽然每个Message在创建时都会有一个计时器，但是在移除时却是所有的msgDiv一起移除，因此需要有区分的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    msgDiv.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;message-active&#x27;</span>)<br>    msgDiv.<span class="hljs-property">ontransitionend</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      app.<span class="hljs-title function_">unmount</span>();<br>      div.<span class="hljs-title function_">remove</span>();<br>    &#125;<br>&#125;, closeDelay * <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="如何区分不同的Message？">如何区分不同的Message？</h3><p>在本项目中，我使用了随机生成ID的方式，如此一番就能精准的控制每个<code>msgDiv</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">randomLetter</span>(<span class="hljs-params">len</span>) &#123;<br>  <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    str += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(~~(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">26</span> + <span class="hljs-number">65</span>));<br>  &#125;<br>  <span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-keyword">const</span> msgId = <span class="hljs-title function_">randomLetter</span>(~~(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">10</span> + <span class="hljs-number">30</span>)) <span class="hljs-comment">//生成了一个随机字符串</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">Message</span>, &#123;<br>      message,<br>      msgType,<br>      <span class="hljs-attr">id</span>: msgId,<br>     &#125;);<br>  &#125;<br>&#125;);<br>app.<span class="hljs-title function_">mount</span>(div);<br><br><span class="hljs-keyword">const</span> msgDiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-title class_">String</span>(msgId))<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    msgDiv.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;message-active&#x27;</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    msgDiv.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;message-active&#x27;</span>)<br>    msgDiv.<span class="hljs-property">ontransitionend</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      app.<span class="hljs-title function_">unmount</span>();<br>      div.<span class="hljs-title function_">remove</span>();<br>    &#125;<br>&#125;, closeDelay * <span class="hljs-number">1</span>);<br><br></code></pre></td></tr></table></figure><h3 id="最后的一个小细节">最后的一个小细节</h3><p>我们使用了一个<code>msgContainer</code>将所有的Message包裹的起来，从而实现顺序排列，但是在最后一个Message消失后，<code>msgContainer</code>会作为一个空的div仍然存在于DOM树中，这很不环保，因此在最后一个Message消失后将<code>msgContainer</code>也一并移除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  msgDiv.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;message-active&#x27;</span>)<br>  msgDiv.<span class="hljs-property">ontransitionend</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>     app.<span class="hljs-title function_">unmount</span>();<br>     div.<span class="hljs-title function_">remove</span>();<br>     <span class="hljs-keyword">if</span> (msgContainer.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>       msgContainer.<span class="hljs-title function_">remove</span>()<br>     &#125;<br>  &#125;<br>&#125;, closeDelay * <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h2 id="后记">后记</h2><p>以上就是我写Message组件时的所有思路，如果你有更好的想法，欢迎留言告诉我呀~</p>]]></content>
    
    
    <categories>
      
      <category>发财UI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事件委托：多层子元素如何定位target</title>
    <link href="/2022/07/29/32-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%EF%BC%9A%E5%A4%9A%E5%B1%82%E5%AD%90%E5%85%83%E7%B4%A0%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8Dtarget/"/>
    <url>/2022/07/29/32-%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98%EF%BC%9A%E5%A4%9A%E5%B1%82%E5%AD%90%E5%85%83%E7%B4%A0%E5%A6%82%E4%BD%95%E5%AE%9A%E4%BD%8Dtarget/</url>
    
    <content type="html"><![CDATA[<h1>事件委托：多层子元素如何定位target</h1><h2 id="背景">背景</h2><p>做一个动态的导航栏，需要在点击一个导航栏时，将<code>active</code>类转移到我点击的<code>li</code>上，</p><p>有多个<code>li</code>，因此想到使用事件委托来实现。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navigation&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list active&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span>icon1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span>icon2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="问题">问题</h2><p>初始代码如下，由于<code>li</code>中有<code>a</code>标签，其中又有两个<code>span</code>标签，因此<code>e.target</code>可能是<code>span</code>，也可能是<code>a</code>，也可能是<code>li</code>，不能准确定位到<code>li</code>元素，不符合我的预期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.list&#x27;</span>);<br><span class="hljs-keyword">const</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;nav&#x27;</span>);<br>ul.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-title function_">activeLink</span>(e));<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">activeLink</span>(<span class="hljs-params">e</span>) &#123;<br>  list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    item.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>);<br>  &#125;);<br>  e.<span class="hljs-property">target</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解决方法">解决方法</h2><h3 id="第一种">第一种</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.list&#x27;</span>);<br><span class="hljs-keyword">const</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;nav&#x27;</span>);<br>ul.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-title function_">activeLink</span>(e));<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">activeLink</span>(<span class="hljs-params">e</span>) &#123;<br>  list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;item.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>);&#125;);<br>  <span class="hljs-keyword">let</span> target = e.<span class="hljs-property">target</span>;<br>  <span class="hljs-keyword">while</span> (target.<span class="hljs-property">tagName</span>.<span class="hljs-title function_">toLowerCase</span>() !== <span class="hljs-string">&#x27;ul&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (target.<span class="hljs-property">tagName</span>.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">&#x27;li&#x27;</span>) &#123;<br>      <span class="hljs-keyword">break</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      target = target.<span class="hljs-property">parentNode</span>;<br>    &#125;<br>  &#125;<br>  target.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第二种">第二种</h3><p><code>e.path</code>中存储了从当前的<code>target</code>一直到<code>window</code>的所有元素，因此只需要对<code>e.path</code>进行遍历，找到父元素所在的<code>index</code>，那么我的目标元素<code>li</code>就是父元素所在的<code>index-1</code>，同理也可以得到父元素的子元素的子元素，即<code>index-2</code></p><p>当然这里也可以直接对<code>value.tagName</code>或者其他属性进行比较，思路与第一种方法相仿，便不再赘述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.list&#x27;</span>);<br><span class="hljs-keyword">const</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;nav&#x27;</span>);<br>ul.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> <span class="hljs-title function_">activeLink</span>(e));<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">activeLink</span>(<span class="hljs-params">e</span>) &#123;<br>  list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;item.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>);&#125;);<br>  <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br>  e.<span class="hljs-property">path</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">value, _index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (value === ul) &#123;index = _index;&#125;<br>  &#125;);<br>  <span class="hljs-keyword">const</span> target = e.<span class="hljs-property">path</span>[index - <span class="hljs-number">1</span>];<br>  target.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>发财日历 开发日志</title>
    <link href="/2022/07/26/30-%E5%8F%91%E8%B4%A2%E6%97%A5%E5%8E%86-%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    <url>/2022/07/26/30-%E5%8F%91%E8%B4%A2%E6%97%A5%E5%8E%86-%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h1>[发财日历] 开发日志</h1><h2 id="前言">前言</h2><p>发财日历是一个由纯JS和CSS完成的一个小作品，主要是为了后面项目中作为一个组件复用</p><p>目前实现的功能有：</p><ol><li class="lvl-4"><p>显示日程</p></li><li class="lvl-4"><p>日程标记</p></li><li class="lvl-4"><p>高亮今日</p></li><li class="lvl-4"><p>日期选择</p></li></ol><p><img src="https://img.bald3r.wang/img/20220726153656.png" alt=""></p><h2 id="链接">链接</h2><p><a href="https://github.com/baIder/rich-calender" title="GitHub链接">GitHub链接</a></p><p><a href="https://git.balder.wang/rich-calender/" title="预览链接">预览链接</a></p><h2 id="代码分析">代码分析</h2><h3 id="整体代码结构">整体代码结构</h3><p>渲染加事件绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> currentTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><br><span class="hljs-title function_">render</span>(currentTime)<br><br><span class="hljs-title function_">g</span>(<span class="hljs-string">&#x27;#prevMonth&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;...&#125;<br><br><span class="hljs-title function_">g</span>(<span class="hljs-string">&#x27;#nextMonth&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;...&#125;<br><br><span class="hljs-title function_">g</span>(<span class="hljs-string">&#x27;#today&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;...&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">time</span>) &#123;...&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">g</span>(<span class="hljs-params">selector</span>) &#123;...&#125;<br></code></pre></td></tr></table></figure><h3 id="事件绑定">事件绑定</h3><p>需要给每个日期添加click事件，为了优化性能，使用事件委托代替给每个日期添加监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">days.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (selectedLi) &#123;<br>    selectedLi.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;calender-days-selected&#x27;</span>)<br>  &#125;<br>  e.<span class="hljs-property">target</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;calender-days-selected&#x27;</span>)<br>  selectedLi = e.<span class="hljs-property">target</span><br>  <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;calender-days-hasEvents&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">const</span> key = <span class="hljs-string">`<span class="hljs-subst">$&#123;year&#125;</span>-<span class="hljs-subst">$&#123;month&#125;</span>-<span class="hljs-subst">$&#123;e.target.textContent&#125;</span>`</span><br>    <span class="hljs-keyword">const</span> events = <span class="hljs-variable language_">window</span>.<span class="hljs-property">data</span>[key]<br>    <span class="hljs-keyword">const</span> eventFragment = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createDocumentFragment</span>()<br>    events.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>      div.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;events-item&#x27;</span>)<br>      div.<span class="hljs-property">textContent</span> = event<br>      eventFragment.<span class="hljs-title function_">append</span>(div)<br>    &#125;)<br>    <span class="hljs-title function_">g</span>(<span class="hljs-string">&#x27;#events&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-title function_">g</span>(<span class="hljs-string">&#x27;#events&#x27;</span>).<span class="hljs-title function_">append</span>(eventFragment)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">g</span>(<span class="hljs-string">&#x27;#events&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;div&gt;无&lt;/div&gt;&quot;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="避免频繁操作DOM">避免频繁操作DOM</h3><p>使用fragment，一次性装载所有日期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">time</span>) &#123;<br>  ...<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">generateDays</span>(<span class="hljs-params">year, month</span>) &#123;<br>    ...<br>    <span class="hljs-keyword">const</span> fragment = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createDocumentFragment</span>()<br>    ...<br>    days.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-params"><span class="hljs-string">&#x27;click&#x27;</span>, (e) =&gt; &#123;</span><br><span class="hljs-params">      ...</span><br><span class="hljs-params">      <span class="hljs-keyword">if</span> (...)) &#123;</span><br><span class="hljs-params">        ...</span><br><span class="hljs-params">        <span class="hljs-keyword">const</span> eventFragment = <span class="hljs-variable language_">document</span>.createDocumentFragment()</span><br><span class="hljs-params">        events.map(event =&gt; &#123;</span><br><span class="hljs-params">          <span class="hljs-keyword">const</span> div = <span class="hljs-variable language_">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>)</span><br><span class="hljs-params">          ...</span><br><span class="hljs-params">          eventFragment.append(div)</span><br><span class="hljs-params">        &#125;)</span><br><span class="hljs-params">        ...</span><br><span class="hljs-params">      &#125;</span><br><span class="hljs-params">    &#125;</span>)<br>    ...<br>    <span class="hljs-keyword">for</span> (...) &#123;<br>      <span class="hljs-keyword">const</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>)<br>      ...<br>      fragment.<span class="hljs-title function_">prepend</span>(li)<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (...) &#123;<br>      <span class="hljs-keyword">const</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>)<br>      ...<br>      fragment.<span class="hljs-title function_">append</span>(li)<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (...) &#123;<br>      ...<br>      <span class="hljs-keyword">const</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>)<br>      ...<br>      fragment.<span class="hljs-title function_">append</span>(li)<br>    &#125;<br>    days.<span class="hljs-title function_">append</span>(fragment)   <span class="hljs-comment">//一次性装载</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日程标记的实现">日程标记的实现</h3><p>使用伪元素实现日程的绿色圆圈小标记</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.calender-days</span> &gt; <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.calender-days-hasEvents</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid green;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">right</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">background</span>: green;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日期计算逻辑">日期计算逻辑</h3><p>由于使用了原生JS，因此日期相关的API使用的也是原生的Date函数，比较难用</p><h4 id="当月有多少天">当月有多少天</h4><p>下个月的月初 - 一天 = 当月的最后一天是几号 = 当月有多少天</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> lastDayOfCurrentMonth = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(year, month - <span class="hljs-number">1</span> + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) - <span class="hljs-number">86400</span> * <span class="hljs-number">1000</span>)<br><span class="hljs-keyword">const</span> daysOfCurrentMonth = lastDayOfCurrentMonth.<span class="hljs-title function_">getDate</span>()<br><br></code></pre></td></tr></table></figure><h4 id="周几如何计算">周几如何计算</h4><p>JS的<code>getDay()</code>是将周日作为0，周六作为6，因此为了更符合国人使用习惯，改成周一为1，周日为7</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (weekdayOfFirstDayOfCurrentMonth === <span class="hljs-number">0</span>) &#123;<br>      weekdayOfFirstDayOfCurrentMonth = <span class="hljs-number">7</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="上、下个月如何计算">上、下个月如何计算</h3><p>当前月的第一天 - 一天 = 将当前时间拨到上个月</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">g</span>(<span class="hljs-string">&#x27;#prevMonth&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> firstDayOfCurrentMonth = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(currentTime.<span class="hljs-title function_">getFullYear</span>(), currentTime.<span class="hljs-title function_">getMonth</span>(), <span class="hljs-number">1</span>)<br>  <span class="hljs-title function_">render</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(firstDayOfCurrentMonth - <span class="hljs-number">86400</span> * <span class="hljs-number">1000</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后记">后记</h2><p>简单的小组件，实现也很容易，主要作为后续项目的一个模块保存了下来，如果你有任何想法，欢迎留言告诉我~</p>]]></content>
    
    
    <categories>
      
      <category>发财日历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 基本概念与语法</title>
    <link href="/2022/07/24/27-React-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/07/24/27-React-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>[React] 基本概念与语法</h1><h2 id="React起源">React起源</h2><p>React是由Facebook开发，2013年5月开源的一个框架</p><h2 id="React-VS-Vue">React VS Vue</h2><ul class="lvl-0"><li class="lvl-4"><p>相同点</p><p>都是对视图的封装，React是用类和函数表示一个组件，而Vue是通过构造选项构造一个组件</p><p>都提供了createElement的XML简写，React提供的是JSX语法，而Vue是提供的是模板写法(语法巨多)。</p></li><li class="lvl-4"><p>不同点</p><p>React是把HTML放在JS里写(HTML in JS)，而Vue是把JS放在HTML里写(JS in HTML)</p></li></ul><h2 id="React核心思想">React核心思想</h2><p>函数式编程的思想，贯穿了React的设计和使用</p><p>React倡导对数据的不修改，因此在React中绝大多数情况下修改数据都是将修改后的值赋予一个新的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">n</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">n</span> + <span class="hljs-number">1</span> &#125;);<br></code></pre></td></tr></table></figure><h2 id="React-基本语法">React 基本语法</h2><p>React通过<code>&#123;&#125;</code>将JS语句包裹起来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">click</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  <br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App1&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.click()&#125;&gt;</span><br><span class="language-xml">        App1</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 类组件/class组件</title>
    <link href="/2022/07/24/28-React-%E7%B1%BB%E7%BB%84%E4%BB%B6-class%E7%BB%84%E4%BB%B6/"/>
    <url>/2022/07/24/28-React-%E7%B1%BB%E7%BB%84%E4%BB%B6-class%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1>[React] 类组件/class组件</h1><h2 id="类组件的基本结构">类组件的基本结构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Welcome</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123; <br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">n</span>: <span class="hljs-number">0</span><br>    &#125;;<br>  &#125;<br>  <br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> <br>    )<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="props和state">props和state</h2><p>props是外部属性，state是内部属性</p><p>props只读不写，state能读能写，但是不能直接修改state</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">App2</span> <span class="hljs-attr">messageForApp2</span>=<span class="hljs-string">&quot;Hello&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">n</span>: <span class="hljs-number">0</span><br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App2&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;this.props.messageForApp2&#125;</span><br><span class="language-xml">        &#123;this.state.n&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="state的读写">state的读写</h3><p>state需要在<code>constructor()</code>中初始化，并通过setState进行修改</p><p>注意：</p><ol><li class="lvl-4"><p><code>this.state.n += 1</code>同样可以运行，但是背离了React的函数式编程思想，因此强烈不推荐在React中通过直接修改的方式改变数据</p></li><li class="lvl-4"><p>setState是异步更新数据，因此下面代码中<code>add()</code>中log出的n是还未更新的值，因此推荐使用函数的方式更新，可以获得最新值，如add2()所示</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">n</span>: <span class="hljs-number">0</span><br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">n</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">n</span> + <span class="hljs-number">1</span> &#125;);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">n</span>)<br>  &#125;<br>  <span class="hljs-title function_">add2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> &#123; <br>      <span class="hljs-keyword">const</span> n = state.<span class="hljs-property">n</span> + <span class="hljs-number">1</span><br>      <span class="hljs-keyword">return</span> &#123;n&#125; <br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">        n: &#123;this.state.n&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.add()&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="复杂state">复杂state</h3><p>类组件中的setState会自动合并第一层属性，但不会合并第二层属性，因此常使用<code>...</code>操作符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">n</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">m</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">user</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;A&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>      &#125;<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">addN</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">n</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">n</span> + <span class="hljs-number">1</span> &#125;);<br>    <span class="hljs-comment">// m 不会被覆盖为 undefined</span><br>  &#125;<br>  <span class="hljs-title function_">addM</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">m</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">m</span> + <span class="hljs-number">1</span> &#125;);<br>    <span class="hljs-comment">// n 不会被覆盖为 undefined</span><br>  &#125;<br>  <span class="hljs-title function_">changeUser</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-comment">// m 和 n 不会被置空</span><br>      <span class="hljs-attr">user</span>: &#123;<br>        ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">user</span><br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jack&quot;</span><br>      &#125;<br>    &#125;);<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">        n: &#123;this.state.n&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.addN()&#125;&gt;n+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        m: &#123;this.state.m&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.addM()&#125;&gt;m+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>user.name: &#123;this.state.user.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>user.age: &#123;this.state.user.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.changeUser()&#125;&gt;change user<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事件绑定">事件绑定</h2><p>主要有<code>fn1</code>和<code>fn2</code>两种写法，目前主流是<code>fn2</code>写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fn2</span> = <span class="hljs-function">() =&gt;</span> &#123;...&#125;    <span class="hljs-comment">//两处写法等价</span><br>  &#125;<br>  <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;...&#125;<br>  fn2 = <span class="hljs-function">() =&gt;</span> &#123;...&#125;    <span class="hljs-comment">//两处写法等价</span><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.fn1()&#125;&gt;fn1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.fn2&#125;</span>&gt;</span>fn2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="生命周期">生命周期</h2><ol><li class="lvl-4"><p><code>constructor()</code></p><p>要记得<code>super()</code></p><p>在这里初始化state</p></li><li class="lvl-4"><p><code>shouldComponentUpdate()</code> </p><p>函数return true 则更新，return false则会阻止更新，可以让我们手动判断是否要进行组件更新，我们可以根据应用场景灵活设置返回值，以避免不必要的更新</p></li><li class="lvl-4"><p><code>render()</code> </p><p>创建虚拟DOM</p></li><li class="lvl-4"><p><code>componentDidMount()</code></p><p>组件已出现在页面</p></li><li class="lvl-4"><p><code>componentDidUpdate()</code></p><p>组件已更新</p></li><li class="lvl-4"><p><code>componentWillUnmount()</code></p><p>组件将死</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React 函数组件</title>
    <link href="/2022/07/24/29-React-%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6/"/>
    <url>/2022/07/24/29-React-%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1>[React] 函数组件</h1><h2 id="创建一个函数组件">创建一个函数组件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Hello</span> = (<span class="hljs-params">props</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;props.message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Hello</span> = props =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;props.message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Hello</span>(<span class="hljs-params">props</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;props.message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Hooks">Hooks</h2><h3 id="useState">useState</h3><ol><li class="lvl-4"><p><code>setN</code>一定会触发重新渲染</p></li><li class="lvl-4"><p>数据会被存入新的n</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [n, setN] = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;n&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setN(n + 1)&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [n, setN] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">onClick</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-title function_">setN</span>(n+<span class="hljs-number">1</span>)<br>    <span class="hljs-title function_">setN</span>(n+<span class="hljs-number">1</span>) <span class="hljs-comment">// 你会发现 n 不能加 2</span><br>    <span class="hljs-comment">// setN(i=&gt;i+1)</span><br>    <span class="hljs-comment">// setN(i=&gt;i+1) n可以+2</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>n: &#123;n&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span>+2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useReducer">useReducer</h3><p>Flux/Redux思想</p><p>useState的复杂版，常用于表单</p><ol><li class="lvl-4"><p>创建初始值</p></li><li class="lvl-4"><p>创建操作合集reducer（state,action）</p></li><li class="lvl-4"><p>传给useReducer，得到读写API</p></li><li class="lvl-4"><p>调用写API，传一个type ({type:‘操作类型’})</p></li></ol><p>代替Redux</p><ol><li class="lvl-4"><p>将数据集中在一个store对象</p></li><li class="lvl-4"><p>将操作集中在reducer</p></li><li class="lvl-4"><p>创建一个Context</p></li><li class="lvl-4"><p>创建对数据的读写api</p></li><li class="lvl-4"><p>将读写api放入Context</p></li><li class="lvl-4"><p>用Context.Provider把api提供给所有组件</p></li><li class="lvl-4"><p>各个组件用useContext获取读写api</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> initial = &#123;<br>  <span class="hljs-attr">n</span>: <span class="hljs-number">0</span><br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">state, action</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;add&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">n</span>: state.<span class="hljs-property">n</span> + action.<span class="hljs-property">number</span> &#125;;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (action.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;multi&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">n</span>: state.<span class="hljs-property">n</span> * <span class="hljs-number">2</span> &#125;;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;unknown type&quot;</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(reducer, initial);<br>  <span class="hljs-keyword">const</span> &#123; n &#125; = state;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">onClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-attr">number</span>: <span class="hljs-number">1</span> &#125;);<br>  &#125;;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">onClick2</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-attr">number</span>: <span class="hljs-number">2</span> &#125;);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;App&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>n: &#123;n&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick2&#125;</span>&gt;</span>+2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useContext">useContext</h3><p>上下文，相当于在某一范围中充当「全局变量」的作用</p><p>从上至下逐级更新的过程，不是响应式过程（监听数据变化并做出反应）</p><ol><li class="lvl-4"><p>创建一个Context</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> C = <span class="hljs-title function_">createContext</span>(<span class="hljs-literal">null</span>)<br></code></pre></td></tr></table></figure></li><li class="lvl-4"><p>用C.Provider圈定范围</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;C.<span class="hljs-property">Provider</span> value=&#123;&#125;&gt;<br>  <span class="hljs-keyword">const</span> [ n, setN ] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>  &lt;<span class="hljs-title class_">ComponentA</span> /&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ComponentB</span> /&gt;</span></span><br>&lt;/C.<span class="hljs-property">Provider</span>&gt;<br></code></pre></td></tr></table></figure></li><li class="lvl-4"><p>在组件中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; n, setN &#125; = <span class="hljs-title function_">useContext</span>(C)<br></code></pre></td></tr></table></figure></li></ol><h3 id="useEffect">useEffect</h3><p>每次render后调用的函数</p><p>在函数组件中，作为componentDidMount, componentDidUpdate, componentWillUnmount使用</p><p>多个useEffect会按写代码时的先后顺序执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;)  <span class="hljs-comment">//每次render后执行</span><br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;, [])  <span class="hljs-comment">//第一次渲染后执行</span><br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;, [n])  <span class="hljs-comment">//n变化后执行</span><br><span class="hljs-comment">//如果数组中包含了所有的变量，那与第一种写法等价</span><br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;&#125;&#125;)  <span class="hljs-comment">//return的函数会在该组件被噶了之前执行</span><br><br></code></pre></td></tr></table></figure><h4 id="useLayoutEffect">useLayoutEffect</h4><p>在浏览器改变外观前执行，区别于useEffect在浏览器改变外观之后</p><p>因此useLayoutEffect总是比useEffect先执行</p><h3 id="useMemo">useMemo</h3><p>React.memo(ComponentA)： ComponentA只在props更新后执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fn = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;&#125;<br>&#125;, [m,n])<br></code></pre></td></tr></table></figure><p>缓存内容，在页面刷新时缓存上一次的值，并使新渲染的组件使用该缓存值，新fn和旧fn为相同的两个空函数。只有m或者n变化时，fn才会重新得到新值</p><p>如果不使用useMemo，两次得到的fn会因为函数地址不同而被认为是两个不同的函数，从而触发组件的渲染，增加了渲染量，降低了性能</p><h4 id="useCallback">useCallback</h4><p>useMemo简化版</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fn = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;, [m,n])<br></code></pre></td></tr></table></figure><h3 id="useRef">useRef</h3><p>让一个值在组件不断render时保持不变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">useRef</span>(<span class="hljs-number">0</span>)<br><br><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  count.<span class="hljs-property">current</span> += <span class="hljs-number">1</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>此时count记录了组件渲染的次数</p><p>使用.current的原因是：使用引用，来确保每次的渲染得到的新count都是指向同一个对象的引用</p><p>注意：count.current的变化不会触发UI的更新，需要调用useState来手动更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [随便取一个,set随便取一个] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">null</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onClick</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  count.<span class="hljs-property">current</span> += <span class="hljs-number">1</span><br>  set随便取一个(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())<br> &#125;<br> <br> <span class="hljs-comment">//这样才会触发UI更新</span><br><br></code></pre></td></tr></table></figure><h4 id="forwardRef">forwardRef</h4><p>React的函数组件需要使用forwardRef来获取外部传来的ref</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> buttonRef = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">return</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button2</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;buttonRef&#125;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">Button2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Button2</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">forwardRef</span>(<span class="hljs-function">(<span class="hljs-params">props,ref</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;ref&#125;</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="useImperativeHandle">useImperativeHandle</h3><p>自定义ref</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>发财账簿 V1.0 开发日志</title>
    <link href="/2022/07/19/26-%E5%8F%91%E8%B4%A2%E8%B4%A6%E7%B0%BF-V1-0-%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
    <url>/2022/07/19/26-%E5%8F%91%E8%B4%A2%E8%B4%A6%E7%B0%BF-V1-0-%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h1>[发财账簿] V1.0 开发日志</h1><h2 id="前言">前言</h2><p>简单的记录一下在发财账簿开发过程中所用的和遇到的一些技术和问题。</p><p>这一版的发财账簿RichAccount是由<strong>Vue2+TypeScript+SCSS</strong>编写的SPA应用，同时主要数据都存放在LocalStorage中，暂无任何线上功能。</p><p>主要功能：</p><ul class="lvl-0"><li class="lvl-4"><p>记账的标签、备注、时间</p></li><li class="lvl-4"><p>新增和删除标签</p></li><li class="lvl-4"><p>记录按日统计</p></li><li class="lvl-4"><p>图表呈现</p></li><li class="lvl-4"><p>……</p></li></ul><h2 id="链接">链接</h2><p><a href="https://pixso.cn/app/share/f/NS-kdTey3E521myhKEKA_NM1E9jQaEU_" title="发财账簿">发财账簿</a>-Pixso</p><p><a href="https://github.com/baIder/money-vue" title="源码仓库">源码仓库</a>-GitHub</p><p><a href="https://bald3r.gitee.io/rich-account-vue2-local-edition" title="预览链接">预览链接</a></p><h2 id="主要运用的技术">主要运用的技术</h2><ul class="lvl-0"><li class="lvl-4"><p>Vue2</p></li><li class="lvl-4"><p>Vue Router</p></li><li class="lvl-4"><p>Vuex</p></li><li class="lvl-4"><p>Vue装饰器vue-property-decorator</p></li><li class="lvl-4"><p>在线SVG symbols</p></li><li class="lvl-4"><p>Echarts</p></li><li class="lvl-4"><p>dayjs</p></li><li class="lvl-4"><p>SCSS</p></li></ul><h2 id="开发思路">开发思路</h2><p>（指截至文章撰写时，后续小改动不再更新。）最后更新：2022-07-19</p><ul class="lvl-0"><li class="lvl-4"><p>底部的导航栏导航到不同的页面</p></li><li class="lvl-4"><p>新增记账时可以选择标签、填写备注、选择时间</p></li><li class="lvl-4"><p>标签可以新增、改名、删除</p></li><li class="lvl-4"><p>记录可以查看、按日期统计、通过图表呈现</p></li></ul><h3 id="Vue-Rooter-使用">Vue Rooter 使用</h3><p><strong>主要逻辑：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">routes</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">RouteConfig</span>&gt; = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/money&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/money&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Money</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/labels&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Labels</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/statistics&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Statistics</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/labels/edit/:id&#x27;</span>,  <span class="hljs-comment">//:id可以被读取</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">EditLabel</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>,<br>    <span class="hljs-attr">component</span>: notFound,  <span class="hljs-comment">//404页面</span><br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p>一个类似于select case的结构，Vue Router会从上至下依次匹配</p><p><strong>使用方法：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/labels&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">active-class</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span></span><br><span class="language-xml">      标签</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/money&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">active-class</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span></span><br><span class="language-xml">      记账</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/statistics&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">active-class</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span></span><br><span class="language-xml">      统计</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>在template中通过router-link标签来实现跳转</p><p><strong>获取id</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//Router 配置文件中</span><br>&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/labels/edit/:id&#x27;</span>,  <span class="hljs-comment">//:id可以被读取</span><br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">EditLabel</span>,<br>&#125;,<br><br><span class="hljs-comment">//EditLabel.vue 组件中</span><br><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> id = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>;  <span class="hljs-comment">//获取到绑定的id</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过id可以精确指向到对应的标签</p><p><strong>用TS跳转</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//页面回退</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">back</span>();<br><br><span class="hljs-comment">//跳转到制定页面</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;/404&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>这里要注意，</strong> **​<code>.back()</code>**<strong>相当于浏览器中的后退，浏览器会返回到上一个页面，可能是别的网站</strong></p><h3 id="Vuex-使用">Vuex 使用</h3><p>Vuex在本项目中主要用于做<strong>全局数据管理</strong>，好处是所有组件的数据都是同步的、统一的，所有操作数据的方法也都是在Vuex中声明的，规范且统一</p><p>Vue会自动将<code>@/store/index.ts</code>中的store作为<code>$store</code>挂载到当前的Vue实例（也就是this）上，我们可以通过<code>this.$store</code>访问到Vuex中的方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">recordList</span>: [],<br>    <span class="hljs-attr">tagList</span>: [],<br>    <span class="hljs-attr">currentTag</span>: <span class="hljs-literal">undefined</span><br>  &#125; <span class="hljs-keyword">as</span> <span class="hljs-title class_">RootState</span>,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">//Records部分</span><br>    <span class="hljs-title function_">createRecord</span>(<span class="hljs-params">state, record: RecordItem</span>) &#123;<br>      ...<br>      store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;saveRecords&#x27;</span>);<br>    &#125;,<br>    ...<br>    <span class="hljs-comment">//Tags部分</span><br>    <span class="hljs-title function_">createTag</span>(<span class="hljs-params">state, name: <span class="hljs-built_in">string</span></span>) &#123;<br>      ...<br>      store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;saveTags&#x27;</span>);<br>    &#125;,<br>    ...<br>    <span class="hljs-title function_">updateTag</span>(<span class="hljs-params">state, &#123;id, name&#125;: &#123; id: <span class="hljs-built_in">string</span>, name: <span class="hljs-built_in">string</span> &#125;</span>) &#123;<br>      ...<br>    &#125;,<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>Vuex中使用到了两个概念，<code>state</code>和<code>mutations</code>,其实对应的是Vue实例中的<code>data</code>和<code>methods</code></p><p><strong>注意点：</strong></p><ol><li class="lvl-4"><p>在store中，Vuex会给所有的<code>mutations</code>传一个<code>state</code>参数，通过<code>state</code>来访问到store中的数据</p></li><li class="lvl-4"><p><code>mutations</code>只接受两个参数，<code>state</code>和<code>参数2</code>，如果想要传多个参数，需要用对象的形式将多个参数合并为一个对象，这个对象被称之为<code>payload</code></p></li><li class="lvl-4"><p>有时候我们会需要在一个mutation中调用另一个mutation方法，这时需要使用<code>store.commit('方法名', 参数)</code></p></li></ol><p><strong>在组件中使用Vuex</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">get</span> <span class="hljs-title function_">recordList</span>() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">recordList</span>;<br>&#125;<br><br><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;fetchRecords&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_">saveRecord</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;createRecord&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">record</span>);<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="装饰器-vue-property-decorator">装饰器 vue-property-decorator</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;script lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Component</span>, <span class="hljs-title class_">Prop</span>, <span class="hljs-title class_">Watch</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-property-decorator&#x27;</span>;<br><br>...<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Chart</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Vue</span> &#123;<br>  <span class="hljs-meta">@Prop</span>() options?: <span class="hljs-title class_">EChartsOption</span>;  <span class="hljs-comment">//装饰器中外部属性的使用方法</span><br><br>  <span class="hljs-meta">@Watch</span>(<span class="hljs-string">&#x27;options&#x27;</span>, &#123;<span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>&#125;)  <span class="hljs-comment">//装饰器中Watch的使用方法</span><br>  <span class="hljs-title function_">onOptionsChanged</span>(<span class="hljs-params">newValue: EChartsOption</span>) &#123;<br>    ...<br>  &#125;<br>  <br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">recordList</span>() &#123;  <span class="hljs-comment">//装饰器中的computed属性需要用get和set方法</span><br>    <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">RootState</span>).<span class="hljs-property">recordList</span>;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="在线SVG-symbols">在线SVG symbols</h3><p>在本项目中，我主要使用的是SVG图片，通过在线导入的方式引入，没有在本地保存SVG图片。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;IconPark生成的js链接&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">use</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#consume&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">use</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>      <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Echarts使用">Echarts使用</h3><p>通过Echarts来做数据可视化。我封装了一个Chart.vue组件，从外部接受一个<code>option</code>，然后渲染图表</p><p>本项目中使用的是折线图，展示从今天起往前推30天的每日收入/支出情况，同时将图表的样式根据我的实际需要进行了调整。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span>chart<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Component</span>, <span class="hljs-title class_">Prop</span>, <span class="hljs-title class_">Watch</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-property-decorator&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;echarts&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">type <span class="hljs-title class_">EChartsOption</span> = echarts.<span class="hljs-property">EChartsOption</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">@<span class="hljs-title class_">Component</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Chart</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Vue</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  @<span class="hljs-title class_">Prop</span>() options?: <span class="hljs-title class_">EChartsOption</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  @<span class="hljs-title class_">Watch</span>(<span class="hljs-string">&#x27;options&#x27;</span>, &#123;<span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">onOptionsChanged</span>(<span class="hljs-params">newValue: EChartsOption</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//第一次加载图表的时候还未挂载</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//因此echarts.init(this.$refs.wrapper as HTMLDivElement)为undefined</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//通过setTimeout来进行第一次渲染</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">wrapper</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLDivElement</span>).<span class="hljs-title function_">setOption</span>(newValue);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;, <span class="hljs-number">0</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.wrapper</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="dayjs使用">dayjs使用</h3><p>在本项目中，因为要对时间进行记录和格式化，因此选择了更为好用的dayjs取代原生的<code>Date()</code>api</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">formatDate</span>(<span class="hljs-params">isoString: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">dayjs</span>(isoString).<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_">beautify</span>(<span class="hljs-params">date: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> day = <span class="hljs-title function_">dayjs</span>(date);<br>  <span class="hljs-keyword">const</span> now = <span class="hljs-title function_">dayjs</span>();<br>  <span class="hljs-keyword">if</span> (day.<span class="hljs-title function_">isSame</span>(now, <span class="hljs-string">&#x27;day&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;今天&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (day.<span class="hljs-title function_">isSame</span>(now.<span class="hljs-title function_">subtract</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;day&#x27;</span>), <span class="hljs-string">&#x27;day&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;昨天&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (day.<span class="hljs-title function_">isSame</span>(now.<span class="hljs-title function_">subtract</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;day&#x27;</span>), <span class="hljs-string">&#x27;day&#x27;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;前天&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> day.<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY年M月D日&#x27;</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="SCSS使用">SCSS使用</h3><p>因为组件比较多，为了更好的管理样式，本次项目使用了SCSS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sass&#x20;(scss)&#x20;">@import &#x27;~@/assets/style/helper.scss&#x27;; //引入变量<br><br>%item &#123;<br>  ...<br>&#125;<br><br>.title &#123;<br>  @extend %item;  //@extend 语法<br>&#125;<br><br>.noResultWrapper &#123;<br>  ...<br>  <br>  &gt; .noResult &#123;  // &#x27;&gt;&#x27; 操作符可以获取子元素<br>    ...<br>    $color-noResult: #bbbbbb;<br>    color: $color-noResult;<br>    background: darken($color-noResult, 8%);  //通过darken加深颜色<br>  &#125;<br>&#125;<br><br>::v-deep &#123;  <br>  .type-tabs-item &#123;<br>    ...<br><br>    &amp;.selected &#123;  // &#x27;&amp;&#x27; 操作符，复制自己，这里相当于 .type-tabs-item.selected<br>      ...<br><br>      &amp;-wrapper &#123;  //可以选中父元素<br>        ...<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="遇到的一些小问题">遇到的一些小问题</h2><h3 id="两位小数">两位小数</h3><p>记账时只需要记录两位小数，输入一个两位小数后应该无法继续输入</p><p>我采取的方法是在每次输入数字时，检查小数点的位置，如果小数点是倒数第三个，说明已经是一个两位小数了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">output</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>) === <span class="hljs-variable language_">this</span>.<span class="hljs-property">output</span>.<span class="hljs-property">length</span> - <span class="hljs-number">3</span> ) &#123; <span class="hljs-keyword">return</span>; &#125; <span class="hljs-comment">//只能输入两位小数</span><br></code></pre></td></tr></table></figure><p>出现了一个bug，只能输入两位数了，因为在没有输入小数点时，<code>this.output.indexOf('.') === -1</code>，所以添加一个条件 <code>this.output.indexOf('.') ≥ 0</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">if</span> (<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">output</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>) === <span class="hljs-variable language_">this</span>.<span class="hljs-property">output</span>.<span class="hljs-property">length</span> - <span class="hljs-number">3</span> &amp;&amp;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">output</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;.&#x27;</span>) &gt;= <span class="hljs-number">0</span><br>) &#123;<br>  <span class="hljs-keyword">return</span>;<br>&#125; <span class="hljs-comment">//只能输入两位小数</span><br></code></pre></td></tr></table></figure><h3 id="更新图表">更新图表</h3><p>第一版是在chart挂载时就先初始化，然后监听options的变化，但是两处代码重复，考虑使用<code>watch</code>的<code>immediate</code>参数进行修改</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//V1.0</span><br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> === <span class="hljs-literal">undefined</span>) &#123;<span class="hljs-keyword">return</span>;&#125;<br>  <span class="hljs-keyword">const</span> chart = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">wrapper</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLDivElement</span>);<br>  chart.<span class="hljs-title function_">setOption</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>);<br>&#125;<br><br><span class="hljs-meta">@Watch</span>(<span class="hljs-string">&#x27;options&#x27;</span>)<br>  echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">wrapper</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLDivElement</span>).<span class="hljs-title function_">setOption</span>(newValue);<br>&#125;<br></code></pre></td></tr></table></figure><p>报错，提示<code>setOption of undefined</code>，后续通过在<code>mounted()</code>和<code>@Watch</code>中进行log，发现<code>@Watch</code>的时机比<code>mounted()</code>更早，因此想到使用<code>setTimeout()</code>方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//V2.0</span><br><span class="hljs-meta">@Watch</span>(<span class="hljs-string">&#x27;options&#x27;</span>,&#123;<span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>&#125;)<br>  echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">wrapper</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLDivElement</span>).<span class="hljs-title function_">setOption</span>(newValue);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>成功！</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//V3.0</span><br><span class="hljs-meta">@Watch</span>(<span class="hljs-string">&#x27;options&#x27;</span>, &#123;<span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>&#125;)<br>  <span class="hljs-title function_">onOptionsChanged</span>(<span class="hljs-params">newValue: EChartsOption</span>) &#123;<br>     <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">wrapper</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLDivElement</span>).<span class="hljs-title function_">setOption</span>(newValue);<br>  &#125;, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="倒序数组">倒序数组</h3><p>在为图表准备数据的过程中，需要用到桶排序，将所有的记录通过时间分类，将日期和金额存在一个数组内，但是生成的是一个日期从现在到过去的数组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//V1.0</span><br><span class="hljs-keyword">get</span> <span class="hljs-title function_">chartArray</span>() &#123;<br>  <span class="hljs-keyword">const</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  <span class="hljs-keyword">const</span> array = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">29</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> dateString = <span class="hljs-title function_">dayjs</span>(today).<span class="hljs-title function_">subtract</span>(i, <span class="hljs-string">&#x27;day&#x27;</span>);<br>    <span class="hljs-keyword">const</span> found = _.<span class="hljs-title function_">find</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">groupedList</span>, &#123;<span class="hljs-attr">title</span>: dateString.<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>)&#125;);<br>    array.<span class="hljs-title function_">push</span>(&#123;<br>      <span class="hljs-attr">key</span>: dateString, <span class="hljs-attr">value</span>: found ? found.<span class="hljs-property">total</span> : <span class="hljs-number">0</span><br>    &#125;);<br>  &#125;<br>  <span class="hljs-keyword">return</span> array <br>&#125;<br></code></pre></td></tr></table></figure><p>首先想到的是将数组重新排序，过去在前，现在在后</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">get</span> <span class="hljs-title function_">chartArray</span>() &#123;<br>  <span class="hljs-keyword">const</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  <span class="hljs-keyword">const</span> array = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">29</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> dateString = <span class="hljs-title function_">day</span>(today).<span class="hljs-title function_">subtract</span>(i, <span class="hljs-string">&#x27;day&#x27;</span>).<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>);<br>    <span class="hljs-keyword">const</span> found = _.<span class="hljs-title function_">find</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">groupedList</span>, &#123;<br>      <span class="hljs-attr">title</span>: dateString<br>    &#125;);<br>    array.<span class="hljs-title function_">push</span>(&#123;<br>      <span class="hljs-attr">key</span>: dateString, <span class="hljs-attr">value</span>: found ? found.<span class="hljs-property">total</span> : <span class="hljs-number">0</span><br>    &#125;);<br>  &#125;<br>  array.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (a.<span class="hljs-property">key</span> &gt; b.<span class="hljs-property">key</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a.<span class="hljs-property">key</span> === b.<span class="hljs-property">key</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><p>后来又重新思考，可以让i递减，从29减到0，精简了代码，于是做出了最终版，同样的效果，更少的代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//V3.0</span><br><span class="hljs-keyword">get</span> <span class="hljs-title function_">chartArray</span>() &#123;<br>  <span class="hljs-keyword">const</span> today = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  <span class="hljs-keyword">const</span> array = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">29</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">const</span> dateString = <span class="hljs-title function_">dayjs</span>(today).<span class="hljs-title function_">subtract</span>(i, <span class="hljs-string">&#x27;day&#x27;</span>);<br>    <span class="hljs-keyword">const</span> found = _.<span class="hljs-title function_">find</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">groupedList</span>, &#123;<span class="hljs-attr">title</span>: dateString.<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>)&#125;);<br>    array.<span class="hljs-title function_">push</span>(&#123;<br>      <span class="hljs-attr">key</span>: dateString, <span class="hljs-attr">value</span>: found ? found.<span class="hljs-property">total</span> : <span class="hljs-number">0</span><br>    &#125;);<br>  &#125;<br>  <span class="hljs-keyword">return</span> array;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="后记">后记</h2><p>本项目还有很多不足之处，后续还会继续调整，如果你发现了什么bug，也可以留言给我哦  (≖ᴗ≖)✧</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双向绑定与v-model</title>
    <link href="/2022/07/08/24-Vue-%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E4%B8%8Ev-model/"/>
    <url>/2022/07/08/24-Vue-%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E4%B8%8Ev-model/</url>
    
    <content type="html"><![CDATA[<h1>[Vue] 双向绑定与v-model</h1><h2 id="什么是双向绑定">什么是双向绑定</h2><p>变量变化，UI也跟着变化；当用户改变UI，变量也随之变化，这就是双向绑定。</p><p>在Vue中，通过v-model实现表单的双向绑定。</p><h2 id="v-model的实质">v-model的实质</h2><p>实质是监听用户的输入事件以更新数据，对一些极端场景进行一些特殊处理。</p><p>是<code>v-bind:value</code>和<code>v-on:input</code>的语法糖。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;edit me&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--上面的写法与下面的写法完全等价--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;message&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;message = $event.target.value&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;edit me&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="适用范围">适用范围</h2><p> <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;checkbox&gt;</code>、<code>&lt;radio&gt;</code>、<code>&lt;form&gt;</code> 及 <code>&lt;select&gt;</code> 元素</p><h2 id="三个修饰符">三个修饰符</h2><ul class="lvl-0"><li class="lvl-4"><p>.lazy</p><p>监听<code>change</code>事件而不是<code>input</code>事件</p></li><li class="lvl-4"><p>.number</p><p>自动将用户的输入值转为数值类型</p></li><li class="lvl-4"><p>.trim</p><p>自动过滤用户输入的首尾空白字符</p></li></ul><h2 id="自定义组件的v-model">自定义组件的v-model</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;value&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;onInput&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;MyInput&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">props</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">value</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">onInput</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>) <span class="hljs-comment">//🚩这里传递一个参数e.target.value</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//🚩🚩this.$emit(&#x27;input&#x27;, e)</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在引用这个自定义组件时，在🚩处需要注意：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">MyInput</span> v-model=<span class="hljs-string">&quot;message&quot;</span> /&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyInput</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;message&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;message = $event&quot;</span> /&gt;</span></span> <span class="hljs-comment">//这里的$event取决于🚩处的传参</span><br><span class="hljs-comment">//🚩🚩&lt;MyInput :value=&quot;message&quot; @input=&quot;message = $event.target.value&quot; /&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>router 路由</title>
    <link href="/2022/07/08/25-router-%E8%B7%AF%E7%94%B1/"/>
    <url>/2022/07/08/25-router-%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h1>router 路由</h1><h2 id="什么是路由">什么是路由</h2><blockquote><p><strong>路由</strong>（<strong>routing</strong>）就是通过互联的<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%AF%E7%B6%B2" title="网络">网络</a>把<a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E6%81%AF" title="信息">信息</a>从源地址传输到目的地址的活动。路由发生在<a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B" title="OSI网络参考模型中">OSI网络参考模型中</a>的第三层即<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%B1%82" title="网络层">网络层</a>。路由引导<a href="https://zh.wikipedia.org/w/index.php?title=%E5%88%86%E7%BB%84%E8%BD%89%E9%80%81&amp;action=edit&amp;redlink=1&amp;variant=zh-sg" title="分组转送">分组转送</a>，经过一些中间的<a href="https://zh.wikipedia.org/wiki/%E7%AF%80%E9%BB%9E" title="节点">节点</a>后，到它们最后的目的地。</p></blockquote><p>简单来说，路由就是根据需求将用户<strong>请求分发</strong>某个或某些个地点（keywords: 分发、请求）</p><h2 id="前端路由">前端路由</h2><p>根据用户的请求，展示不同的内容</p><h2 id="路由表">路由表</h2><blockquote><p>在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C" title="电脑网络">电脑网络</a>中，<strong>路由表</strong>（routing table）或称<strong>路由择域信息库</strong>（RIB, Routing Information Base），是一个存储在<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8" title="路由器">路由器</a>或者联网电脑中的电子表格（文件）或<a href="https://zh.wikipedia.org/w/index.php?title=%E7%B1%BB%E6%95%B0%E6%8D%AE%E5%BA%93&amp;action=edit&amp;redlink=1" title="类数据库">类数据库</a>。路由表存储着指向特定网络地址的路径（在有些情况下，还记录有路径的<a href="https://zh.wikipedia.org/w/index.php?title=%E8%B7%AF%E7%94%B1%E5%BA%A6%E9%87%8F%E5%80%BC&amp;action=edit&amp;redlink=1" title="路由度量值">路由度量值</a>）。路由表中含有网络周边的<a href="https://zh.wikipedia.org/wiki/%E6%8B%93%E6%89%91" title="拓扑">拓扑</a>信息。路由表创建的主要目标是为了实现<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE" title="路由协议">路由协议</a>和静态路由选择。在现代路由器构造中，路由表不直接参与<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%8C%85" title="数据包">数据包</a>的传输，而是用于生成一个小型指向表，这个指向表仅仅包含由路由算法选择的数据包传输优先路径，这个表格通常为了优化硬件存储和查找而被压缩或提前编译。</p></blockquote><p>路由表就是一种对应关系，不同的路径对应不同的ip，不同的url对应不同的页面内容，记录这种对应关系的表叫路由表。和哈希表类似。</p><h2 id="默认路由">默认路由</h2><p><a href="http://xxx.com/%E5%AF%BC%E5%90%91%E7%9A%84%E5%86%85%E5%AE%B9%E5%8D%B3%E4%B8%BA%E9%BB%98%E8%AE%A4%E8%B7%AF%E7%94%B1">http://xxx.com/导向的内容即为默认路由</a></p><h2 id="404-保底路由">404/保底路由</h2><p>当访问不存在内容时导向的内容即为404路由，亦可称为保底路由</p><h2 id="三种路由模式">三种路由模式</h2><ul class="lvl-0"><li class="lvl-4"><p>hash模式</p><ul class="lvl-2"><li class="lvl-8"><a href="https://xxx.com/#xxxx">https://xxx.com/#xxxx</a></li><li class="lvl-8">任何情况下都可以做前端路由</li><li class="lvl-8">服务器收不到hash</li><li class="lvl-8">SEO不友好</li><li class="lvl-8">基于URL</li></ul></li><li class="lvl-4"><p>history模式</p><ul class="lvl-2"><li class="lvl-8"><a href="https://xxx.com/xxxx">https://xxx.com/xxxx</a></li><li class="lvl-8">后端将所有前端路由都渲染到同一页面（不能是404页面）</li><li class="lvl-8">IE8以下不支持</li><li class="lvl-8">基于URL</li></ul></li><li class="lvl-4"><p>memory模式</p><ul class="lvl-2"><li class="lvl-8"><a href="https://xxx.com">https://xxx.com</a></li><li class="lvl-8">信息会保存在localstorage或数据库中</li><li class="lvl-8">不基于URL，因此无法分享，属于单机版路由</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>.sync修饰符</title>
    <link href="/2022/07/04/23-Vue-sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <url>/2022/07/04/23-Vue-sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="单词含义">单词含义</h2><p><strong>sync</strong></p><ul class="lvl-0"><li class="lvl-2"><p><em>n.</em><br>同时，同步（synchronization的缩略词）</p></li><li class="lvl-2"><p><em>v.</em><br>使同步（synchronize 的缩略词）</p></li></ul><p>通俗的说，sync就是让多方对某一个事物的认识保持一致，在Vue中也是同样的功能。</p><h2 id="场景">场景</h2><blockquote><p>在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以变更父组件，且在父组件和子组件两侧都没有明显的变更来源。</p></blockquote><p>在Vue中，使用<code>update:myPropName</code> 的模式触发事件取而代之。</p><p>其核心逻辑其实是 <strong>对于外部props，子组件并不能直接对其进行修改，而是将修改的方法通过一个事件传递给父组件，最后由父组件完成对props的修改</strong> 。</p><p>这样，对于props的认知，子组件和父组件就同步（sync）了。</p><p><strong>举例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//在一个包含 title prop 的假设的组件中，我们可以用以下方法表达对其赋新值的意图：</span><br><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;update:title&#x27;</span>, newTitle)<br></code></pre></td></tr></table></figure><p>然后父组件可以监听那个事件并根据需要更新一个本地的数据 property。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">text-document</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;doc.title&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-on:update:title</span>=<span class="hljs-string">&quot;doc.title = $event&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text-document</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为了方便起见，我们为这种模式提供一个缩写，即 <code>.sync</code> 修饰符：</p><pre><code class="language-HTML">&lt;text-document v-bind:title.sync=&quot;doc.title&quot;&gt;&lt;/text-document&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webpack loader &amp; plugins</title>
    <link href="/2022/07/03/21-Webpack-loader-plugins/"/>
    <url>/2022/07/03/21-Webpack-loader-plugins/</url>
    
    <content type="html"><![CDATA[<h1>Webpack loader &amp; plugins</h1><h2 id="安装webpack">安装webpack</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yarn global add webpack webpack-cli<br></code></pre></td></tr></table></figure><h2 id="webpack-config-js">webpack.config.js</h2><p>首次使用webpack时，需要初始化webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,  <span class="hljs-comment">//production 或 development</span><br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>, <span class="hljs-comment">//打包文件位置</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>), <span class="hljs-comment">//输出位置</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;index.[contenthash].js&quot;</span>, <span class="hljs-comment">//输出文件名</span><br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="webpack-dev-server">webpack-dev-server</h2><p>使用webpack-dev-server可以方便开发，该工具会在修改文件后自动pack并刷新页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yarn add -D webpack-dev-server<br></code></pre></td></tr></table></figure><p>配置webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;index.[contenthash].js&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&quot;inline-source-map&quot;</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">static</span>: <span class="hljs-string">&quot;./dist&quot;</span>, <span class="hljs-comment">//告诉server去哪找文件</span><br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="plugins">plugins</h2><h3 id="HtmlWebpackPlugin"><a href="https://webpack.js.org/plugins/html-webpack-plugin/#root">HtmlWebpackPlugin</a></h3><p>使用该plugin可以让webpack通过模板生成目标网页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yarn add html-webpack-plugin --dev<br></code></pre></td></tr></table></figure><p>配置webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>,<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;index.[contenthash].js&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">&quot;inline-source-map&quot;</span>,<br>  <span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">static</span>: <span class="hljs-string">&quot;./dist&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;素鸡烧肉&quot;</span>,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;src/assets/index.html&quot;</span>, <span class="hljs-comment">//指定模板地址</span><br>    &#125;),<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="MiniCssExtractPlugin"><a href="https://webpack.js.org/plugins/mini-css-extract-plugin/#root">MiniCssExtractPlugin</a></h3><p>该plugin可以将css文件通过link标签的形式插入到页面中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yarn add -D mini-css-extract-plugin<br><br></code></pre></td></tr></table></figure><p>配置webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">MiniCssExtractPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mini-css-extract-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> <span class="hljs-title class_">MiniCssExtractPlugin</span>()],<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/i</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-title class_">MiniCssExtractPlugin</span>.<span class="hljs-property">loader</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="loaders">loaders</h2><h3 id="css-loader-style-loader"><a href="https://webpack.js.org/loaders/css-loader/#root">css-loader</a> &amp; <a href="https://webpack.js.org/loaders/style-loader/#root">style-loader</a></h3><p>两个loader通常配合使用，style-loader会将css-loader读取的css文件通过style标签的形式插入到页面中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yarn add -D css-loader style-loader<br></code></pre></td></tr></table></figure><p>配置webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/i</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="sass-loader"><a href="">sass-loader</a></h3><p>配合<a href="https://webpack.js.org/loaders/css-loader/#root">css-loader</a> &amp; <a href="https://webpack.js.org/loaders/style-loader/#root">style-loader</a>载入一个scss文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yarn add -D sass-loader dart-sass<br></code></pre></td></tr></table></figure><p>配置webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/i</span>,<br>        <span class="hljs-attr">use</span>: [<br>          <span class="hljs-string">&quot;style-loader&quot;</span>,<br>          <span class="hljs-string">&quot;css-loader&quot;</span>,<br>          &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;sass-loader&quot;</span>,<br>            <span class="hljs-attr">options</span>: &#123; <span class="hljs-attr">implementation</span>: <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dart-sass&quot;</span>) &#125;,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="less-loader"><a href="https://webpack.js.org/loaders/less-loader/#root">less-loader</a></h3><p>配合<a href="https://webpack.js.org/loaders/css-loader/#root">css-loader</a> &amp; <a href="https://webpack.js.org/loaders/style-loader/#root">style-loader</a>载入一个less文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yarn add -D less-loader<br></code></pre></td></tr></table></figure><p>配置webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/i</span>,<br>        <span class="hljs-attr">use</span>: [<br>          <span class="hljs-string">&quot;style-loader&quot;</span>,<br>          <span class="hljs-string">&quot;css-loader&quot;</span>,<br>          <span class="hljs-string">&quot;less-loader&quot;</span>,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="stylus-loader"><a href="https://webpack.js.org/loaders/stylus-loader/#root">stylus-loader</a></h3><p>配合<a href="https://webpack.js.org/loaders/css-loader/#root">css-loader</a> &amp; <a href="https://webpack.js.org/loaders/style-loader/#root">style-loader</a>载入一个stylus文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">yarn add -D stylus stylus-loader<br></code></pre></td></tr></table></figure><p>配置webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.styl$/</span>,<br>        <span class="hljs-attr">use</span>: [<br>          <span class="hljs-string">&quot;style-loader&quot;</span>,<br>          <span class="hljs-string">&quot;css-loader&quot;</span>,<br>          <span class="hljs-string">&quot;stylus-loader&quot;</span>,<br>        ], <br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Asset-Modules引入文件"><a href="https://webpack.js.org/guides/asset-modules/">Asset Modules</a>引入文件</h3><p>webpack5不再使用file-loader引入文件，而是内置了<a href="https://webpack.js.org/guides/asset-modules/">Asset Modules</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br> <span class="hljs-attr">module</span>: &#123;<br>   <span class="hljs-attr">rules</span>: [<br>     &#123;<br>       <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.png/</span>,          <span class="hljs-comment">//引入图片</span><br>       <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;asset/resource&#x27;</span>  <span class="hljs-comment">//文件类型</span><br>     &#125;<br>   ]<br> &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="plugin-和-loader的区别">plugin 和 loader的区别</h2><p>plugin是webpack的插件，用于丰富和拓展webpack的功能。</p><p>loader是webpack的加载器，用于载入某种特定的文件。</p><h2 id="懒加载">懒加载</h2><p>不在一开始就加载，而是当触发了某些条件之后再加载，就是懒加载，可以提升页面性能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./xxx.xxx&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>computed 和 watch</title>
    <link href="/2022/07/03/22-Vue-computed-%E5%92%8C-watch/"/>
    <url>/2022/07/03/22-Vue-computed-%E5%92%8C-watch/</url>
    
    <content type="html"><![CDATA[<h2 id="computed"><a href="https://cn.vuejs.org/v2/guide/computed.html">computed</a></h2><p>computed是计算属性，可以计算出一个值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#example&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 计算属性的 getter</span><br>    <span class="hljs-attr">reversedMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// `this` 指向 vm 实例</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>可以直接调用，不需要加括号</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>有缓存机制，如果依赖不变，computed的值不会再重新计算</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 和methods非常相似，但是区别就在于缓存机制</span><br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-attr">reversedMessage</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">message</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">&gt; 我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是**计算属性是基于它们的响应式依赖进行缓存的**。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 `message` 还没有发生改变，多次访问 `reversedMessage` 计算属性会立即返回之前的计算结果，而不必再次执行函数。相比之下，每当触发重新渲染时，调用方法将**总会**再次执行函数。</code></pre><h2 id="watch"><a href="https://cn.vuejs.org/v2/api/#watch">watch</a></h2><p>watch是监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">d</span>: <span class="hljs-number">4</span>,<br>    <span class="hljs-attr">e</span>: &#123;<br>      <span class="hljs-attr">f</span>: &#123;<br>        <span class="hljs-attr">g</span>: <span class="hljs-number">5</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val, oldVal</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;new: %s, old: %s&#x27;</span>, val, oldVal)<br>    &#125;,<br>    <span class="hljs-comment">// 方法名</span><br>    <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;someMethod&#x27;</span>,<br>    <span class="hljs-comment">// 该回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深</span><br>    <span class="hljs-attr">c</span>: &#123;<br>      <span class="hljs-attr">handler</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val, oldVal</span>) &#123; <span class="hljs-comment">/* ... */</span> &#125;,<br>      <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-comment">// 该回调将会在侦听开始之后被立即调用</span><br>    <span class="hljs-attr">d</span>: &#123;<br>      <span class="hljs-attr">handler</span>: <span class="hljs-string">&#x27;someMethod&#x27;</span>,<br>      <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-comment">// 你可以传入回调数组，它们会被逐一调用</span><br>    <span class="hljs-attr">e</span>: [<br>      <span class="hljs-string">&#x27;handle1&#x27;</span>,<br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">handle2</span> (val, oldVal) &#123; <span class="hljs-comment">/* ... */</span> &#125;,<br>      &#123;<br>        <span class="hljs-attr">handler</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">handle3</span> (val, oldVal) &#123; <span class="hljs-comment">/* ... */</span> &#125;,<br>        <span class="hljs-comment">/* ... */</span><br>      &#125;<br>    ],<br>    <span class="hljs-comment">// watch vm.e.f&#x27;s value: &#123;g: 5&#125;</span><br>    <span class="hljs-string">&#x27;e.f&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">val, oldVal</span>) &#123; <span class="hljs-comment">/* ... */</span> &#125;<br>  &#125;<br>&#125;)<br>vm.<span class="hljs-property">a</span> = <span class="hljs-number">2</span> <span class="hljs-comment">// =&gt; new: 2, old: 1</span><br></code></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>immediate</p><p>监听开始时会立刻调用一次，类似<code>do...while...</code>会先执行一次</p></li><li class="lvl-2"><p>deep</p><p>是否监听对象内部的变化，true:监听，false:不监听</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据响应式</title>
    <link href="/2022/07/02/20-Vue%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    <url>/2022/07/02/20-Vue%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1>Vue的数据响应式</h1><p>数据响应式，顾名思义，Vue会在数据改变时做出响应，更新页面、执行函数等等，这便是Vue的数据响应式。</p><p>Vue通过监听observe和代理proxy实现数据响应式。</p><h2 id="代理proxy">代理proxy</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 需求：n 不能小于 0</span><br><span class="hljs-comment">// 即 data1.n = -1 应该无效，但 data1.n = 1 有效</span><br><br><span class="hljs-keyword">let</span> data1 = <span class="hljs-title function_">proxy</span>(&#123; <span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">n</span>:<span class="hljs-number">0</span>&#125; &#125;) <span class="hljs-comment">// 括号里是匿名对象，无法访问</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">proxy</span>(<span class="hljs-params">&#123;data&#125;</span>)&#123;<br>  <span class="hljs-keyword">const</span> obj = &#123;&#125;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;n&#x27;</span>, &#123; <br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">return</span> data.<span class="hljs-property">n</span><br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>      <span class="hljs-keyword">if</span>(value&lt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-comment">//加上限制条件</span><br>      data.<span class="hljs-property">n</span> = value<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> obj <span class="hljs-comment">// obj 就是代理</span><br>&#125;<br><br><span class="hljs-comment">// data1 就是 obj</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`data1：<span class="hljs-subst">$&#123;data1.n&#125;</span>`</span>) <span class="hljs-comment">//需求三：0</span><br>data1.<span class="hljs-property">n</span> = -<span class="hljs-number">1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`data1：<span class="hljs-subst">$&#123;data1.n&#125;</span>，设置为 -1 失败`</span>) <span class="hljs-comment">//需求三：0，设置为 -1 失败</span><br>data1.<span class="hljs-property">n</span> = <span class="hljs-number">1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`data1：<span class="hljs-subst">$&#123;data1.n&#125;</span>，设置为 1 成功`</span>) <span class="hljs-comment">//需求三：1，设置为 1 成功</span><br></code></pre></td></tr></table></figure><p><strong>通过代理obj来操作数据，可以给数据加上一定的限制条件。</strong></p><p>代理不会改变原有对象。（房东找个中介，中介并不会动房子里的东西）</p><h2 id="监听observe">监听observe</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 需求：n 不能小于 0</span><br><span class="hljs-comment">// 同时 myData.n = -1 无效，但 myData.n = 1 有效</span><br><br><span class="hljs-keyword">let</span> myData = &#123;<span class="hljs-attr">n</span>:<span class="hljs-number">0</span>&#125;<br><span class="hljs-keyword">let</span> data2 = <span class="hljs-title function_">proxy2</span>(&#123; <span class="hljs-attr">data</span>:myData &#125;) <span class="hljs-comment">// 括号里是匿名对象，无法访问</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">proxy2</span>(<span class="hljs-params">&#123;data&#125;</span>)&#123;<br>  <span class="hljs-keyword">let</span> value = data.<span class="hljs-property">n</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(data, <span class="hljs-string">&#x27;n&#x27;</span>, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">return</span> value<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>)&#123;<br>      <span class="hljs-keyword">if</span>(newValue&lt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span><br>      value = newValue<br>    &#125;<br>  &#125;)<br>  <span class="hljs-comment">// 就加了上面几句，这几句话会监听 data</span><br><br>  <span class="hljs-keyword">const</span> obj = &#123;&#125;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;n&#x27;</span>, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">return</span> data.<span class="hljs-property">n</span><br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>      <span class="hljs-keyword">if</span>(value&lt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span><br>      data.<span class="hljs-property">n</span> = value<br>    &#125;<br>  &#125;)<br>  <br>  <span class="hljs-keyword">return</span> obj <span class="hljs-comment">// obj 就是代理</span><br>&#125;<br><br><span class="hljs-comment">// data2 就是 obj</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`n：<span class="hljs-subst">$&#123;data2.n&#125;</span>`</span>) <span class="hljs-comment">//n：0 </span><br>myData.<span class="hljs-property">n</span> = -<span class="hljs-number">1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`n：<span class="hljs-subst">$&#123;data2.n&#125;</span>，设置为 -1 失败了`</span>) <span class="hljs-comment">//n：0，设置为 -1 失败了</span><br>myData.<span class="hljs-property">n</span> = <span class="hljs-number">1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`n：<span class="hljs-subst">$&#123;data2.n&#125;</span>，设置为 1 成功了`</span>) <span class="hljs-comment">//n：1，设置为 1 成功了</span><br></code></pre></td></tr></table></figure><p><strong>通过监听，使得直接操作对象的n也能被察觉</strong></p><p>监听会改变原有对象。（房东的房子会被中介装摄像头、窃听器，改变了房屋）</p><p>监听先将原对象的n保存了下来，然后用getter&amp;setter替换了n的值。</p><h2 id="Vue-set-this-set">Vue.set &amp; this.$set</h2><p>若对象新增了key，那么Vue可以通过Vue.set和this.$set为新key创建代理和监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">set</span>(vm.<span class="hljs-property">someObject</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>)<br><span class="hljs-comment">//还可以使用 vm.$set 实例方法，这也是全局 Vue.set 方法的别名：</span><br><span class="hljs-variable language_">this</span>.$set(<span class="hljs-variable language_">this</span>.<span class="hljs-property">someObject</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">2</span>)<br><br><br><span class="hljs-comment">// 代替 `Object.assign(this.someObject, &#123; a: 1, b: 2 &#125;)`</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">someObject</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, <span class="hljs-variable language_">this</span>.<span class="hljs-property">someObject</span>, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;)<br><br></code></pre></td></tr></table></figure><h3 id="对于数组">对于数组</h3><p>Vue使用了<strong>变更方法Mutation Methods</strong></p><p>Vue 将被监听的数组的部分方法进行了包裹，所以<strong>它们也将会触发视图更新</strong>。这些被包裹过的方法包括：</p><ul class="lvl-0"><li class="lvl-2"><p><code>push()</code></p></li><li class="lvl-2"><p><code>pop()</code></p></li><li class="lvl-2"><p><code>shift()</code></p></li><li class="lvl-2"><p><code>unshift()</code></p></li><li class="lvl-2"><p><code>splice()</code></p></li><li class="lvl-2"><p><code>sort()</code></p></li><li class="lvl-2"><p><code>reverse()</code></p></li></ul><p><img src="https://img.bald3r.wang/img/20220702210735.png" alt=""></p><p>可以看到，进入Vue的数组的__proto__被Vue用变更方法替代了，原来关于Array的__proto__被放到了数组的原型的原型中。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅析 Vue.js 和 Vue.runtime.js</title>
    <link href="/2022/06/29/19-%E6%B5%85%E6%9E%90-Vue-js-%E5%92%8C-Vue-runtime-js/"/>
    <url>/2022/06/29/19-%E6%B5%85%E6%9E%90-Vue-js-%E5%92%8C-Vue-runtime-js/</url>
    
    <content type="html"><![CDATA[<h1>浅析 Vue.js 和 Vue.runtime.js</h1><h2 id="区别">区别</h2><table><thead><tr><th></th><th>Vue.js</th><th>Vue.runtime.js</th></tr></thead><tbody><tr><td>体积</td><td>最大</td><td>比Vue.js小40%</td></tr><tr><td>功能</td><td>包含HTML Compiler</td><td>不含HTML Compiler</td></tr><tr><td>cdn引入</td><td>选择Vue.js</td><td>选择Vue.runtime.js</td></tr></tbody></table><p>可见两者最大的区别就是：<strong>是否包含HTML Compiler</strong></p><h2 id="HTML-Compiler">HTML Compiler</h2><p>HTML Compiler 顾名思义是编译 HTML 的工具。在Vue中，页面元素有两种修改方式，一种是通过<code>template</code>，另一种是通过<code>render()</code>函数</p><h3 id="template">template</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">   &lt;div&gt;&#123;&#123;n&#125;&#125;&lt;/div&gt;</span><br><span class="hljs-string">  `</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="render">render()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params">h</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">n</span> );<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>这里的<code>h</code>相当于一个<code>createElement</code>函数*，它接受两个参数<code>h(标签, content)</code>，可以在页面中修改元素</p><blockquote><p>*将 <code>h</code> 作为 <code>createElement</code> 的别名是 Vue 生态系统中的一个通用惯例，实际上也是 JSX 所要求的。</p></blockquote><h2 id="codesandbox-io"><a href="http://codesandbox.io">codesandbox.io</a></h2><p>通过codesandbox.io可以快速的创建一个项目。</p><ol><li class="lvl-4"><p>选择Create Sandbox</p></li><li class="lvl-4"><p>选择Vue（目前只有Vue3）</p></li><li class="lvl-4"><p>稍等片刻环境便会加载好了</p></li><li class="lvl-4"><p>实际就是一个在线的VScode</p></li></ol><p><img src="https://img.bald3r.wang/img/20220630165243.png" alt=""></p><p><img src="https://img.bald3r.wang/img/20220630165154.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MVC、EventBus、表驱动编程、模块化</title>
    <link href="/2022/06/27/18-MVC%E3%80%81EventBus%E3%80%81%E8%A1%A8%E9%A9%B1%E5%8A%A8%E7%BC%96%E7%A8%8B%E3%80%81%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <url>/2022/06/27/18-MVC%E3%80%81EventBus%E3%80%81%E8%A1%A8%E9%A9%B1%E5%8A%A8%E7%BC%96%E7%A8%8B%E3%80%81%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1>MVC、EventBus、表驱动编程、模块化</h1><h2 id="MVC">MVC</h2><p>MVC 是将整个代码分为三个大的模块M、V、C，每个模块负责不同的功能。</p><ul class="lvl-0"><li class="lvl-2"><p>M-Model(数据模型)，负责操作所有的数据</p></li><li class="lvl-2"><p>V-View(视图)，负责所有的UI界面</p></li><li class="lvl-2"><p>C-Controller(控制器)，负责其他的功能</p></li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">Model:</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    data:&#123;&#125;</span><span class="language-xml">,</span><br><span class="language-xml">    增()</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">,</span><br><span class="language-xml">    删()</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">,</span><br><span class="language-xml">    改()</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">,</span><br><span class="language-xml">    查()</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml"></span><br><span class="language-xml">&#125;;</span><br><span class="language-xml"></span><br><span class="language-xml">View:</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    操作 DOM ()&#123;&#125;</span><span class="language-xml">,</span><br><span class="language-xml">    渲染页面()</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml"></span><br><span class="language-xml">&#125;;</span><br><span class="language-xml"></span><br><span class="language-xml">Controller:</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    事件()&#123;&#125;</span><span class="language-xml"></span><br><span class="language-xml">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="EventBus">EventBus</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//EventBus的三个基础API</span><br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EventBus</span>.</span></span><span class="hljs-constructor">$on(<span class="hljs-params">eventName</span>,<span class="hljs-params">fn</span>)</span>; <span class="hljs-comment">//监听事件，若eventName发生，则fn</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EventBus</span>.</span></span><span class="hljs-constructor">$off(<span class="hljs-params">eventName</span>)</span>; <span class="hljs-comment">//移除监听事件</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EventBus</span>.</span></span><span class="hljs-constructor">$emit(<span class="hljs-params">eventName</span>,参数)</span>; <span class="hljs-comment">//触发事件eventName，并将参数传给fn</span><br><br></code></pre></td></tr></table></figure><h2 id="表驱动编程">表驱动编程</h2><p>我理解的表驱动编程是：将具有对应关系的key和value存储在hashTable中，通过找到hashTable中的key，即可完成对对应的value的操作，同时也可以通过遍历key方便的对所有的value进行操作。</p><p>适用于逻辑链复杂的场景</p><p>优点：</p><ol><li class="lvl-3"><p>精简代码（逻辑链复杂的情况下）</p></li><li class="lvl-3"><p>代码可读性好</p></li><li class="lvl-3"><p>易于维护，增删逻辑链中的节点只需要操作hashTable即可</p></li></ol><h2 id="模块化编程">模块化编程</h2><blockquote><p>模块化（modular）编程，是强调将计算机程序的功能分离成独立的、可相互改变的“模块”（module）的软件设计技术，它使得每个模块都包含着执行预期功能的一个唯一方面（aspect）所必需的所有东西。</p></blockquote><p>将具有相对独立功能或环境的代码块进行封装，并留出api，通过api即可方便的实现该代码块的功能</p><p>优点：</p><ol><li class="lvl-3"><p>有效精简主程序的代码</p></li><li class="lvl-3"><p>易于维护</p></li><li class="lvl-3"><p>模块可复用</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AJAX</title>
    <link href="/2022/06/24/15-AJAX/"/>
    <url>/2022/06/24/15-AJAX/</url>
    
    <content type="html"><![CDATA[<h1>AJAX</h1><p><strong>A</strong>sync <strong>J</strong>avaScript <strong>A</strong>nd <strong>X</strong>ML</p><p>关键词：异步、JS、XML</p><p>实质：用JS发请求和收响应</p><h2 id="四个步骤">四个步骤</h2><ol><li class="lvl-3"><p>创建 HttpRequest 对象（全称是 XMLHttpRequest）</p></li><li class="lvl-3"><p>调用对象的 open 方法</p></li><li class="lvl-3"><p>监听对象的 onreadystatechange 事件</p></li><li class="lvl-3"><p>调用对象的 send 方法（发送请求）</p></li></ol><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs javascript">getCSS.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>(); <span class="hljs-comment">//创建一个新对象</span><br>  request.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;/style.css&quot;</span>); <span class="hljs-comment">//调用open方法</span><br>  request.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>      <span class="hljs-keyword">if</span> (request.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; request.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>        <span class="hljs-keyword">const</span> style = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;style&quot;</span>); <span class="hljs-comment">//创建style标签</span><br>        style.<span class="hljs-property">innerHTML</span> = request.<span class="hljs-property">response</span>; <span class="hljs-comment">//填写标签内容</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(style); <span class="hljs-comment">//插入head</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;加载CSS失败&quot;</span>);<br>      &#125;<br>    &#125;<br>  &#125;;<br>  request.<span class="hljs-title function_">send</span>();<br>&#125;;<br><br>getJS.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  request.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;/2.js&quot;</span>);<br>  request.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>      <span class="hljs-keyword">if</span> (request.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; request.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>        <span class="hljs-keyword">const</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;script&quot;</span>);<br>        script.<span class="hljs-property">innerHTML</span> = request.<span class="hljs-property">response</span>;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(script);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;加载JS失败&quot;</span>);<br>      &#125;<br>    &#125;<br>  &#125;;<br>  request.<span class="hljs-title function_">send</span>();<br>&#125;;<br><br>getHTML.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  request.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;/3.html&quot;</span>);<br>  request.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>      <span class="hljs-keyword">if</span> (request.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; request.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>        <span class="hljs-keyword">const</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>        div.<span class="hljs-property">innerHTML</span> = request.<span class="hljs-property">response</span>;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;加载HTML失败&quot;</span>);<br>      &#125;<br>    &#125;<br>  &#125;;<br>  request.<span class="hljs-title function_">send</span>();<br>&#125;;<br><br>getXML.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  request.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;/4.xml&quot;</span>);<br>  request.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>      <span class="hljs-keyword">if</span> (request.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; request.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>        <span class="hljs-keyword">const</span> dom = request.<span class="hljs-property">responseXML</span>;<br>        <span class="hljs-keyword">const</span> text = dom.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;warning&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">textContent</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text.<span class="hljs-title function_">trim</span>());<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;加载XML失败&quot;</span>);<br>      &#125;<br>    &#125;<br>  &#125;;<br>  request.<span class="hljs-title function_">send</span>();<br>&#125;;<br><br>getJSON.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  request.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;/5.json&quot;</span>);<br>  request.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>      <span class="hljs-keyword">if</span> (request.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; request.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>        <span class="hljs-keyword">const</span> object = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(request.<span class="hljs-property">response</span>);<br>        myName.<span class="hljs-property">textContent</span> = object.<span class="hljs-property">name</span>;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(object);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;加载JSON失败&quot;</span>);<br>      &#125;<br>    &#125;<br>  &#125;;<br>  request.<span class="hljs-title function_">send</span>();<br>&#125;;<br><br><br><span class="hljs-comment">//加载分页</span><br><span class="hljs-keyword">let</span> n = <span class="hljs-number">1</span>;<br>getPage.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  request.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">`/page<span class="hljs-subst">$&#123;n + <span class="hljs-number">1</span>&#125;</span>`</span>);<br>  request.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>      <span class="hljs-keyword">if</span> (request.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; request.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>        <span class="hljs-keyword">const</span> array = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(request.<span class="hljs-property">response</span>);<br>        array.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">const</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;li&quot;</span>);<br>          li.<span class="hljs-property">textContent</span> = item.<span class="hljs-property">id</span>;<br>          xxx.<span class="hljs-title function_">appendChild</span>(li);<br>        &#125;);<br>        n += <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;加载下一页失败&quot;</span>);<br>      &#125;<br>    &#125;<br>  &#125;;<br>  request.<span class="hljs-title function_">send</span>();<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="axios">axios</h2><p>专门用来操作AJAX的库</p><ol><li class="lvl-3"><p><code>axios.get('/xxx')</code> 返回一个 Promise 对象</p></li><li class="lvl-3"><p><code>axios.get('/xxx').then(s, f)</code> 在请求成功的时候调用 s，失败的使用调用 f</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise 与 回调 与 异步</title>
    <link href="/2022/06/24/16-Promise%E4%B8%8E%E5%BC%82%E6%AD%A5%E4%B8%8E%E5%9B%9E%E8%B0%83/"/>
    <url>/2022/06/24/16-Promise%E4%B8%8E%E5%BC%82%E6%AD%A5%E4%B8%8E%E5%9B%9E%E8%B0%83/</url>
    
    <content type="html"><![CDATA[<h1>Promise 与 回调 与 异步</h1><h2 id="异步与回调">异步与回调</h2><p><strong>关联</strong></p><p>异步任务需要在得到结果时通知 JS 来拿结果</p><p>可以让 JS 留一个函数地址(电话号码)给浏览器，异步任务完成时浏览器调用该函数地址即可(拨打电话)，同时把结果作为参数传给该函数(电话里说可以来吃了)，这个函数是我写给浏览器调用的，所以是回调函数</p><p><strong>总结：异步任务不能拿到结果，于是我们传一个回调给异步任务，异步任务完成时调用回调，调用的时候把结果作为参数</strong></p><p><strong>区别</strong></p><p>异步任务需要用到回调函数来通知结果，但回调函数不一定只用在异步任务里，回调可以用到同步任务里</p><p><code>array.forEach( n =&gt; console.log(n) )</code> 就是同步回调</p><h3 id="异步">异步</h3><p>区别同步：同步指JS一直等待某个函数的结果，拿到结果之后JS才会继续向下执行代码</p><ul class="lvl-0"><li class="lvl-3"><p>如果 JS 不能直接拿到一个函数的结果，可以先去执行别的代码，等结果到了再取结果，这就是异步</p></li><li class="lvl-3"><p>异步的结果可以通过轮询获取，轮询就是定时去询问结果拿到了没有</p></li><li class="lvl-3"><p>异步的结果可以通过回调获取，一般来说结果会被作为回调的第一个参数</p></li><li class="lvl-3"><p>异步的好处是可以把用来等待的时间拿去做别的事情</p></li></ul><p>如果一个函数的返回值处于</p><ul class="lvl-0"><li class="lvl-2"><p>setTimeout</p></li><li class="lvl-2"><p>AJAX（即 XMLHttpRequest）</p></li><li class="lvl-2"><p>AddEventListener</p></li></ul><p>这三个东西内部，那么这个函数就是异步函数</p><h3 id="回调">回调</h3><ul class="lvl-0"><li class="lvl-3"><p>满足某些条件的函数才被称为回调，比如我写一个函数 A，传给另一个函数 B 调用，那么函数 A 就是回调</p></li><li class="lvl-3"><p>回调可以用于同步任务，不一定非要用于异步任务</p></li><li class="lvl-3"><p>有的时候回调还可以传给一个对象，如 request.onreadystatechange，等待浏览器来调用</p></li></ul><h2 id="Promise">Promise</h2><p>优点：</p><ol><li class="lvl-3"><p>规范回调的名字或顺序</p></li><li class="lvl-3"><p>拒绝回调地狱，让代码可读性更强</p></li><li class="lvl-3"><p>很方便地捕获错误</p></li></ol><p>使用 <code>return new Promise((resolve, reject)=&gt; &#123;&#125;)</code> 就可以构造一个 Promise 对象，构造出来的 Promise 对象含有一个 <code>.then()</code> 函数属性，resolve 和 reject 可以改成任何其他名字，不影响使用，但一般就叫这两个名字，任务成功的时候调用 resolve，失败的时候调用 reject，resolve 和 reject 都只接受一个参数，resolve 和 reject 并不是 .then(success, fail) 里面的 success 和 fail，resolve 会去调用 success，reject 会去调用 fail</p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>跨域</title>
    <link href="/2022/06/24/17-%E8%B7%A8%E5%9F%9F/"/>
    <url>/2022/06/24/17-%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h1>跨域</h1><h2 id="同源">同源</h2><p>源 = 协议 + 域名 + 端口号</p><p>如果两个 url 的<strong>协议</strong>、<strong>域名</strong>、<strong>端口号</strong>完全一致，那么这两个 url 就是同源的</p><h3 id="同源策略">同源策略</h3><p>浏览器规定如果 JS 运行在源 A 里，那么就只能获取源 A 的数据，不能获取源 B 的数据，即<strong>不允许跨域</strong></p><h2 id="如何实现跨域">如何实现跨域</h2><h3 id="CORS">CORS</h3><p>在被访问域名的响应头里写example.com可以访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Access-Control-Allow-Origin: http:<span class="hljs-regexp">//</span>example.com<br></code></pre></td></tr></table></figure><p>这种做法被称为CORS跨域</p><h3 id="JSONP">JSONP</h3><p>浏览器不限制引用JS，那么我们就通过引用一个包含了数据的JS，就可以实现跨域请求数据，这种做法被称为JSONP跨域</p>]]></content>
    
    
    <categories>
      
      <category>浏览器</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DOM 事件及事件委托</title>
    <link href="/2022/06/18/14-DOM%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    <url>/2022/06/18/14-DOM%E4%BA%8B%E4%BB%B6%E5%8F%8A%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
    
    <content type="html"><![CDATA[<h1>DOM 事件及事件委托</h1><h2 id="DOM-事件模型">DOM 事件模型</h2><p>某一个元素有父元素，它的父元素还有父元素，它们都有监听事件，那么按什么顺序触发呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">爷爷</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">爸爸</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">儿子</span>&gt;</span><br>    文字<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>2002年，W3C发布标准</strong></p><p><a href="https://www.w3.org/TR/DOM-Level-2-Events/">原文文档，很长很难看</a></p><p><strong>首先从外向内</strong>找监听函数，<strong>然后从内向外</strong>找监听函数</p><ul class="lvl-0"><li class="lvl-2"><p>从外向内：事件捕获（Capture）</p></li><li class="lvl-2"><p>从内向外：事件冒泡（Bubble）</p></li></ul><h3 id="代码实现">代码实现</h3><p>开发者可以选择让自己的监听函数在捕获过程中执行，或在冒泡中执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">el.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, fn, bool)<br></code></pre></td></tr></table></figure><p>第三个参数有3个值：</p><ol><li class="lvl-3"><p>不传该参数，默认为false，该函数在冒泡过程中被调用</p></li><li class="lvl-3"><p>falsy值，该函数在冒泡过程中被调用 （6个falsy值：0，NaN，‘’，null，undefined，document.all)</p></li><li class="lvl-3"><p>true，该函数在捕获过程中被调用</p></li></ol><p><strong>默认为false，说明还是更倾向于事件冒泡</strong></p><h3 id="target-v-s-currentTarget">target v.s. currentTarget</h3><p>区别</p><ul class="lvl-0"><li class="lvl-2"><p>e.target - 用户操作的元素</p></li><li class="lvl-2"><p>e.currentTarget - 程序员监听的元素</p></li><li class="lvl-2"><p>this 是 e.currentTarget</p></li></ul><p>举例</p><p><code>div &gt; span&#123;文字&#125;</code>，用户点击文字，<code>e.target</code> 就是 <code>span</code>，<code>e.currentTarget</code> 就是 <code>div</code></p><h3 id="取消冒泡">取消冒泡</h3><p><strong>捕获不可取消，但冒泡可以</strong><br><code>e.stopPropagation()</code> 可中断冒泡，浏览器不再向上走，一般用于封装某些独立的组件</p><h3 id="阻止默认事件">阻止默认事件</h3><p>MDN 搜索 scroll event，看到 Bubbles 和 Cancelable</p><p>Bubbles 的意思是该事件是否冒泡，所有冒泡都可取消</p><p>Cancelable 的意思是开发者是否可以阻止默认事件</p><p>Cancelable 与冒泡无关</p><h2 id="事件委托">事件委托</h2><p>事件委托又称<strong>事件代理</strong>（delegate）</p><p>把原本需要绑定在子元素的响应事件绑定到（委托给）祖先节点，让祖先节点担当事件监听的职务</p><p>事件代理的原理是DOM元素的事件冒泡，因为在事件传播过程中，逐层冒泡总能被祖先节点捕获</p><p>优点：</p><ol><li class="lvl-3"><p>省监听数（内存）</p><ul class="lvl-2"><li class="lvl-5">假设父元素div下有100个span子元素，那么给100个span子元素都添加监听器所需要的资源远大于只给div加1个监听器</li></ul></li><li class="lvl-3"><p>可以监听动态元素</p><ul class="lvl-2"><li class="lvl-5">即使该元素还没有被创立，那么该元素创立后能立即响应监听，因为监听器在其父元素身上，即新增子元素无需再绑定监听</li></ul></li></ol><p>举例：</p><p>一个班级的同学的新学期教材到了，一种方法就是他们一个个去领，另一种方法就是把这件事情委托给班长，让一个人出去拿好所有教材，然后再根据分发给每个同学；即使有同学后面才来，也能立刻到班长那里领到教材</p><h3 id="JS-支持事件吗">JS 支持事件吗</h3><p>支持，也不支持。本节课讲的 DOM 事件不属于 JS 的功能，属于浏览器提供的 DOM 的功能，JS 只是调用了 DOM 提供的 addEventListener 而已</p><h3 id="封装事件委托">封装事件委托</h3><p>jQuery已经封装了事件委托</p><p><a href="https://api.jquery.com/on/">jQuery.on()</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-title function_">on</span>( events [, selector ] [, data ], handler )<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery学习</title>
    <link href="/2022/06/17/jQuery%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/06/17/jQuery%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1>jQuery学习</h1><h2 id="jQuery的设计模式">jQuery的设计模式</h2><ol><li class="lvl-3"><p>不用 new 的构造函数</p></li><li class="lvl-3"><p>重载：$(支持多种参数)</p></li><li class="lvl-3"><p>用闭包隐藏细节</p></li><li class="lvl-3"><p>getter / setter：$div.text() 即可读也可写</p></li><li class="lvl-3"><p>$.fn 是 $.prototype 的别名</p></li><li class="lvl-3"><p>适配器：jQuery 针对不同浏览器使用不同代码</p></li></ol><h2 id="jQuery-如何获取元素">jQuery 如何获取元素</h2><p>jQuery 通过基础的 DOM api <code>document.querySelectorAll</code> 获取元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#xxx&#x27;</span>) <span class="hljs-comment">//返回值并不是元素，而是一个 api 对象</span><br>$(<span class="hljs-string">&#x27;#xxx&#x27;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.red&#x27;</span>) <span class="hljs-comment">//查找 #xxx 里的 .red 元素</span><br>$(<span class="hljs-string">&#x27;#xxx&#x27;</span>).<span class="hljs-title function_">parent</span>() <span class="hljs-comment">//获取爸爸</span><br>$(<span class="hljs-string">&#x27;#xxx&#x27;</span>).<span class="hljs-title function_">children</span>() <span class="hljs-comment">//获取儿子</span><br>$(<span class="hljs-string">&#x27;#xxx&#x27;</span>).<span class="hljs-title function_">siblings</span>() <span class="hljs-comment">//获取兄弟</span><br>$(<span class="hljs-string">&#x27;#xxx&#x27;</span>).<span class="hljs-title function_">index</span>() <span class="hljs-comment">//获取排行老几（从0开始）</span><br>$(<span class="hljs-string">&#x27;#xxx&#x27;</span>).<span class="hljs-title function_">next</span>() <span class="hljs-comment">//获取弟弟</span><br>$(<span class="hljs-string">&#x27;#xxx&#x27;</span>).<span class="hljs-title function_">prev</span>() <span class="hljs-comment">//获取哥哥</span><br>$(<span class="hljs-string">&#x27;.red&#x27;</span>).<span class="hljs-title function_">each</span>(fn) <span class="hljs-comment">//遍历并对每个元素执行 fn</span><br><br></code></pre></td></tr></table></figure><p>部分代码实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-title function_">find</span>(<span class="hljs-params">selector</span>) &#123;<br>  <span class="hljs-keyword">let</span> array = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">elements</span>.<span class="hljs-property">length</span>; i++) &#123;<br>    array = array.<span class="hljs-title function_">concat</span>(<br>      <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">elements</span>[i].<span class="hljs-title function_">querySelectorAll</span>(selector))<br>    );<br>  &#125;<br>  array.<span class="hljs-property">oldApi</span> = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">jQuery</span>(array);<br>&#125;,<br><span class="hljs-title function_">each</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">elements</span>.<span class="hljs-property">length</span>; i++) &#123;<br>    fn.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">elements</span>[i], i);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>&#125;,<br><span class="hljs-title function_">parent</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> array = [];<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">each</span>(<span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (array.<span class="hljs-title function_">indexOf</span>(node.<span class="hljs-property">parentNode</span>) === -<span class="hljs-number">1</span>) &#123;<br>      array.<span class="hljs-title function_">push</span>(node.<span class="hljs-property">parentNode</span>);<br>    &#125;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">jQuery</span>(array);<br>&#125;,<br><span class="hljs-title function_">children</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> array = [];<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">each</span>(<span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> &#123;<br>    array.<span class="hljs-title function_">push</span>(...node.<span class="hljs-property">children</span>);<br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">jQuery</span>(array);<br>&#125;,<br><span class="hljs-title function_">get</span>(<span class="hljs-params">index</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">elements</span>[index];<br>&#125;,<br><br></code></pre></td></tr></table></figure><h2 id="jQuery-的链式操作">jQuery 的链式操作</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#xxx&#x27;</span>).<span class="hljs-title function_">children</span>().<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;red&#x27;</span>).<span class="hljs-title function_">each</span>(fn)<br></code></pre></td></tr></table></figure><p>通过不断的返回一个api对象，使得代码能立即调用下一个api，这就是链式操作</p><h2 id="jQuery-如何创建元素">jQuery 如何创建元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;&lt;div&gt;&lt;span&gt;1&lt;/span&gt;&lt;/div&gt;&#x27;</span>) <span class="hljs-comment">//创建 div</span><br><br></code></pre></td></tr></table></figure><p>通过判断输入的参数的第一个字符是否为<code>&lt;</code>来判断是不是HTML语法，如果是，则调用了一个<code>createElement</code>函数，该函数通过 DOM api 创建元素</p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">$</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">jQuery</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">selectorOrArrayOrTemplate</span>) &#123;<br>  <span class="hljs-keyword">let</span> elements;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> selectorOrArrayOrTemplate === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (selectorOrArrayOrTemplate[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;&lt;&quot;</span>) &#123;<br>      elements = [<span class="hljs-title function_">createElement</span>(selectorOrArrayOrTemplate)];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      elements = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(selectorOrArrayOrTemplate);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (selectorOrArrayOrTemplate <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>) &#123;<br>    elements = selectorOrArrayOrTemplate;<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-params">string</span>) &#123;<br>    <span class="hljs-keyword">const</span> container = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;template&quot;</span>);<br>    container.<span class="hljs-property">innerHTML</span> = string.<span class="hljs-title function_">trim</span>();<br>    <span class="hljs-keyword">return</span> container.<span class="hljs-property">content</span>.<span class="hljs-property">firstChild</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="jQuery-如何移动元素">jQuery 如何移动元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#div&#x27;</span>).<span class="hljs-title function_">appendTo</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>) <span class="hljs-comment">//插入到 body 中</span><br><br></code></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">appendTo</span>(<span class="hljs-params">node</span>) &#123;<br>  <span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Element</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">each</span>(<span class="hljs-function">(<span class="hljs-params">el</span>) =&gt;</span> node.<span class="hljs-title function_">appendChild</span>(el));   <span class="hljs-comment">//$.each为遍历</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node.<span class="hljs-property">jquery</span> === <span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">each</span>(<span class="hljs-function">(<span class="hljs-params">el</span>) =&gt;</span> node.<span class="hljs-title function_">get</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">appendChild</span>(el));  <span class="hljs-comment">//$.get(index)为找到第0个元素</span><br>  &#125;<br>&#125;,<br><br></code></pre></td></tr></table></figure><h2 id="jQuery-如何修改元素的属性">jQuery 如何修改元素的属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$div.<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>) <span class="hljs-comment">//读写文本内容</span><br>$div.<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>) <span class="hljs-comment">//读写 HTML 内容</span><br>$div.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;xxx&#x27;</span>) <span class="hljs-comment">//读写属性</span><br>$div.<span class="hljs-title function_">css</span>(&#123;<span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>&#125;) <span class="hljs-comment">//读写 style</span><br>$div.<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&#x27;blue&#x27;</span>)<br>$div.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, fn) <br>$div.<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;click&#x27;</span>, fn)<br></code></pre></td></tr></table></figure><p>部分代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">addClass</span>(<span class="hljs-params">className</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">elements</span>.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">elements</span>[i].<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(className);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DOM编程</title>
    <link href="/2022/06/14/DOM%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/06/14/DOM%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1>DOM 编程</h1><p>DOM非常难用，通常我们不使用DOM，本文记录了一些DOM的API</p><h2 id="获取元素-标签">获取元素/标签</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//过时的写法，用于兼容IE</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;idxxx&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;red&#x27;</span>)[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment">//新的写法</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">idxxx</span><br>idxxx<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#idxxx&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;#idxxx&#x27;</span>)<br><br><span class="hljs-comment">//获取特定元素</span><br><span class="hljs-comment">//HTML</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span><br><span class="hljs-comment">//Head</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span><br><span class="hljs-comment">//body</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span><br><span class="hljs-comment">//all</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">all</span>     <span class="hljs-comment">//第六个falsy值，现多用于适配器</span><br></code></pre></td></tr></table></figure><h2 id="元素的原型链">元素的原型链</h2><p>一个DIV的原型链</p><ol><li class="lvl-3"><p>HTMLDivElement.prototype</p></li><li class="lvl-3"><p>HTMLElement.prototype</p></li><li class="lvl-3"><p>Element.prototype</p></li><li class="lvl-3"><p>Node.prototype</p></li><li class="lvl-3"><p>EventTarget.prototype</p></li><li class="lvl-3"><p>Object.prototype</p></li></ol><h2 id="x-nodeType">x.nodeType</h2><p>Node有以下几种：</p><ol><li class="lvl-3"><p>1    元素Element | 标签Tag</p></li><li class="lvl-3"><p>3    文本Text</p></li><li class="lvl-3"><p>8    注释Comment</p></li><li class="lvl-3"><p>9    文档Document</p></li><li class="lvl-3"><p>11   文档片段DocumentFragment</p></li><li class="lvl-3"><p>…  …</p></li></ol><h2 id="增删改查">增删改查</h2><h3 id="增">增</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建一个标签节点</span><br><span class="hljs-keyword">let</span> div1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;style&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>)<br><br><span class="hljs-comment">//创建一个文本节点</span><br>text1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(<span class="hljs-string">&#x27;hi&#x27;</span>)<br><br><span class="hljs-comment">//标签里插入文本</span><br>div1.<span class="hljs-title function_">appendChild</span>(text1)<br>div1.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;hi&#x27;</span><br>div1.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;hi&#x27;</span><br><br><span class="hljs-comment">//插入页面里</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div)<br>已在页面中的元素.<span class="hljs-title function_">appendChild</span>(div)<br><br></code></pre></td></tr></table></figure><h3 id="删">删</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">childNode.<span class="hljs-title function_">remove</span>()<br></code></pre></td></tr></table></figure><h3 id="改">改</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//class</span><br>div.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;red blue&#x27;</span><br>div.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;red&#x27;</span>)<br><br><span class="hljs-comment">//style</span><br>div.<span class="hljs-property">style</span> = <span class="hljs-string">&#x27;width:100px;color:blue&#x27;</span><br>div.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&#x27;200px&#x27;</span><br>div.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;white&#x27;</span><br><br><span class="hljs-comment">//data-*</span><br>div.<span class="hljs-property">dataset</span>.<span class="hljs-property">x</span> = <span class="hljs-string">&#x27;abc&#x27;</span><br><br><span class="hljs-comment">//读标准属性</span><br>div.<span class="hljs-property">classList</span><br>a.<span class="hljs-property">href</span><br>div.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;class&#x27;</span>)<br>a.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;href&#x27;</span>)<br><br><span class="hljs-comment">//text</span><br>div.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;xxx&#x27;</span><br>div.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;xxx&#x27;</span><br><br><span class="hljs-comment">//html</span><br>div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;strong&gt;importent&lt;/strong&gt;&#x27;</span><br><br><span class="hljs-comment">//Tag</span><br>div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//先清空</span><br>div.<span class="hljs-title function_">appendChild</span>(div2) <span class="hljs-comment">//再加内容</span><br><br><span class="hljs-comment">//parent</span><br>newParent.<span class="hljs-title function_">appendChild</span>(div)<br><br></code></pre></td></tr></table></figure><h3 id="查">查</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//parent</span><br>node.<span class="hljs-property">parentNode</span> | node.<span class="hljs-property">parentElement</span><br>node.<span class="hljs-property">parentNode</span>.<span class="hljs-property">parentNode</span><br><br><span class="hljs-comment">//children</span><br>node.<span class="hljs-property">childNodes</span> | node.<span class="hljs-property">children</span><br><br><span class="hljs-comment">//siblings</span><br>node.<span class="hljs-property">parentNode</span>.<span class="hljs-property">childNodes</span> <span class="hljs-comment">//排除自己</span><br>node.<span class="hljs-property">parentNode</span>.<span class="hljs-property">children</span> <span class="hljs-comment">//排除自己</span><br>node.<span class="hljs-property">firstChild</span><br>node.<span class="hljs-property">lastChild</span><br>node.<span class="hljs-property">previousSibling</span><br>node.<span class="hljs-property">nextSibling</span><br><br><span class="hljs-comment">//遍历</span><br>travel = <span class="hljs-function">(<span class="hljs-params">node, fn</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">fn</span>(node)<br>    <span class="hljs-keyword">if</span> (node.<span class="hljs-property">children</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; node.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>; i++)&#123;<br>        <span class="hljs-title function_">travel</span>(node.<span class="hljs-property">children</span>[i], fn)<br>    &#125;<br> &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="DOM-特性">DOM 特性</h2><h3 id="DOM-操作跨线程">DOM 操作跨线程</h3><p>JS引擎需要通过渲染引擎操作页面</p><h3 id="属性同步">属性同步</h3><ul class="lvl-0"><li class="lvl-2"><p>标准属性（id，className，title等）的修改会被立即同步到页面中</p></li><li class="lvl-2"><p>data-*属性的修改会被立即同步到页面中</p></li><li class="lvl-2"><p>非标准属性的修改只会停留在JS线程中，不会被同步到页面中</p></li></ul><p>如果有自定义属性需要在修改后被同步到页面中，<strong>需要使用<code>data-</code>作为前缀</strong></p><h2 id="property-和-attribute-的异同">property 和 attribute 的异同</h2><p>两者都表示属性：</p><p>property:JS线程理解的属性</p><p>attribute:渲染引擎理解的属性</p><p>区别：</p><p>attribute只支持字符串</p><p>property支持字符串、布尔等多种类型</p><p>注意：</p><p>大部分时候同名的attribute和property值相等。如果不是标准属性，那么这两个属性值只在一开始时相等</p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS函数的执行时机</title>
    <link href="/2022/06/13/JS%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/"/>
    <url>/2022/06/13/JS%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1>JS函数的执行时机</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//代码1</span><br><br><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>  &#125;,<span class="hljs-number">0</span>)<br>&#125;<br><br><span class="hljs-comment">//6</span><br><span class="hljs-comment">//6</span><br><span class="hljs-comment">//6</span><br><span class="hljs-comment">//6</span><br><span class="hljs-comment">//6</span><br><span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//代码2</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>  &#125;,<span class="hljs-number">0</span>)<br>&#125;<br><br><span class="hljs-comment">//0</span><br><span class="hljs-comment">//1</span><br><span class="hljs-comment">//2</span><br><span class="hljs-comment">//3</span><br><span class="hljs-comment">//4</span><br><span class="hljs-comment">//5</span><br></code></pre></td></tr></table></figure><h2 id="代码1">代码1</h2><p>代码1中，每次循环都会执行<code>setTimeout(()=&gt;&#123;console.log(i)&#125;,0)</code>，命令计算机在当前任务完成后立即执行代码，使得<code>console.log(i)</code>在执行完for循环后执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//代码1</span><br><br><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>  &#125;,<span class="hljs-number">0</span>)<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<span class="hljs-comment">//6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<span class="hljs-comment">//6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<span class="hljs-comment">//6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<span class="hljs-comment">//6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<span class="hljs-comment">//6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<span class="hljs-comment">//6</span><br></code></pre></td></tr></table></figure><h2 id="代码2">代码2</h2><p>代码2中，由于let声明变量的特殊性，变量i只在当前循环的当前次生效，执行了<code>setTimeout(()=&gt;&#123;console.log(i)&#125;,0)</code>代码后，存在了一个隐藏的快照i，并将<code>console.log(i)</code>排列到任务队列中，此时<code>console.log(i)</code>中的i为快照i。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//代码2</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>  &#125;,<span class="hljs-number">0</span>)<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<span class="hljs-comment">//此处的i为快照i=0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<span class="hljs-comment">//此处的i为快照i=1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<span class="hljs-comment">//此处的i为快照i=2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<span class="hljs-comment">//此处的i为快照i=3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<span class="hljs-comment">//此处的i为快照i=4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<span class="hljs-comment">//此处的i为快照i=5</span><br><br><span class="hljs-comment">//for循环结束后，i变量便消失了</span><br></code></pre></td></tr></table></figure><h2 id="除了使用-for-let-配合，还有什么其他方法可以打印出-0、1、2、3、4、5">除了使用 for let 配合，还有什么其他方法可以打印出 0、1、2、3、4、5?</h2><h3 id="立即执行函数">立即执行函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)&#123;<br>  ! <span class="hljs-keyword">function</span> (<span class="hljs-params">i</span>)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>    &#125;,<span class="hljs-number">0</span>)&#125;(i)<br>&#125;<br><br><span class="hljs-comment">//0</span><br><span class="hljs-comment">//1</span><br><span class="hljs-comment">//2</span><br><span class="hljs-comment">//3</span><br><span class="hljs-comment">//4</span><br><span class="hljs-comment">//5</span><br><br></code></pre></td></tr></table></figure><h3 id="利用const关键字">利用const关键字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i; i&lt;<span class="hljs-number">6</span>; i++)&#123;<br>    <span class="hljs-keyword">const</span> x = i;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>    &#125;, <span class="hljs-number">0</span>)<br>&#125;<br><br><span class="hljs-comment">//0</span><br><span class="hljs-comment">//1</span><br><span class="hljs-comment">//2</span><br><span class="hljs-comment">//3</span><br><span class="hljs-comment">//4</span><br><span class="hljs-comment">//5</span><br></code></pre></td></tr></table></figure><h3 id="利用setTimeout函数的第三个参数，传入i">利用setTimeout函数的第三个参数，传入i</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i; i&lt;<span class="hljs-number">6</span>; i++)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>  &#125;,<span class="hljs-number">0</span>,i)<br>&#125;<br><br><span class="hljs-comment">//0</span><br><span class="hljs-comment">//1</span><br><span class="hljs-comment">//2</span><br><span class="hljs-comment">//3</span><br><span class="hljs-comment">//4</span><br><span class="hljs-comment">//5</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS对象基本语法</title>
    <link href="/2022/06/11/JS%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/06/11/JS%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>JS对象基本用法</h1><h2 id="声明对象的两种语法">声明对象的两种语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;frank&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span> &#125;<br><span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;frank&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><p><strong>引号可省略，省略之后就只能写标识符</strong></p><p><strong>就算引号省略了，键名也还是字符串（重要）</strong></p><h2 id="如何删除对象的属性">如何删除对象的属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">delete</span> obj.<span class="hljs-property">xxx</span> <br><span class="hljs-keyword">delete</span> obj[<span class="hljs-string">&#x27;xxx&#x27;</span>]<br></code></pre></td></tr></table></figure><h2 id="如何查看对象的属性">如何查看对象的属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)    <span class="hljs-comment">//查看自身所有属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(obj)    <span class="hljs-comment">//查看自身+共有属性</span><br></code></pre></td></tr></table></figure><h2 id="如何修改或增加对象的属性">如何修改或增加对象的属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;frank&#x27;</span>&#125;       <span class="hljs-comment">// name 是字符串</span><br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;frank&#x27;</span>              <span class="hljs-comment">// name 是字符串</span><br><br>obj[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;frank&#x27;</span> <br>obj[name] = <span class="hljs-string">&#x27;frank&#x27;</span>             <span class="hljs-comment">// 错，因 name 是个变量，值不确定</span><br><br>obj[<span class="hljs-string">&#x27;na&#x27;</span>+<span class="hljs-string">&#x27;me&#x27;</span>] = <span class="hljs-string">&#x27;frank&#x27;</span><br><br><span class="hljs-keyword">let</span> key = <span class="hljs-string">&#x27;name&#x27;</span>; obj[key] = <span class="hljs-string">&#x27;frank&#x27;</span><br><span class="hljs-keyword">let</span> key = <span class="hljs-string">&#x27;name&#x27;</span>; obj.<span class="hljs-property">key</span> = <span class="hljs-string">&#x27;frank&#x27;</span>  <span class="hljs-comment">// 错,因为 obj.key 等价于 obj[&#x27;key&#x27;]</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(obj, &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;man&#x27;</span>&#125;)    <span class="hljs-comment">//批量赋值</span><br><br></code></pre></td></tr></table></figure><h3 id="修改隐藏属性">修改隐藏属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[<span class="hljs-string">&#x27;toString&#x27;</span>] = <span class="hljs-string">&#x27;xxx&#x27;</span>    <span class="hljs-comment">//改共有属性</span><br><br><br><span class="hljs-keyword">let</span> common = &#123;<span class="hljs-attr">kind</span>: <span class="hljs-string">&#x27;human&#x27;</span>&#125;<br><span class="hljs-keyword">let</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(common)         <span class="hljs-comment">//创建一个obj对象，原型为common</span><br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;frank&#x27;</span><br><span class="hljs-keyword">let</span> obj2 = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(common)<br>obj2.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;jack&#x27;</span><br><br></code></pre></td></tr></table></figure><h2 id="‘name’-in-obj和obj-hasOwnProperty-‘name’-的区别">‘name’ in obj和obj.hasOwnProperty(‘name’) 的区别</h2><p><code>'name' in obj</code>可以判断obj是否有’name’属性，但是不能判断’name’是否为共有属性。</p><p><code>obj.hasOwnProperty('name')</code>用来判断’name’是否为obj的特有属性。</p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS语法</title>
    <link href="/2022/06/10/JS%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/06/10/JS%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>JS语法</h1><h2 id="表达式-语句">表达式&amp;语句</h2><p>用英语来类比，我认为表达式就像短语、词组，而语句则是一个完整的句子</p><p>1 + 2      |   go to bed<br>add(1,2)   |   have dinner</p><p>var a = 1  |   I am eating.</p><blockquote><p>语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。</p></blockquote><p>return 后面不能加回车，否则会在return后面偷偷补一个undefined</p><h2 id="标识符">标识符</h2><p>规则：</p><p>第一个字符，可以是任意Unicode字母，$，_和中文。</p><p>第二个字符及后面的字符，还可以用数字0-9。</p><p>实在不行就用中文，别整一些大🔥儿看不懂的标识符</p><h2 id="注释">注释</h2><p>注释应该提纲挈领、简明扼要，在关键的、易错的、特殊的、奇怪的地方做注释</p><h2 id="条件语句">条件语句</h2><h3 id="if…else…">if…else…</h3><p>if (表达式) {语句1} else {语句2}</p><p>表达式可以是语句，例如<code>if （a=1) &#123;&#125;</code>，此处将1赋予了a，而不是判断a是否等于1，<code>a===1</code>才是a等于1。</p><h3 id="switch…case…">switch…case…</h3><p>不常用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">switch</span> (fruit) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;banana&quot;</span>:<br><span class="hljs-comment">// ... </span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;apple&quot;</span>:<br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-attr">default</span>:<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>注意break什么时候可以省略什么时候不可以省略</p><h3 id="？：表达式">？：表达式</h3><p>A ? B : C   A成立则B，否则C</p><h3 id="短路逻辑">&amp;&amp;短路逻辑</h3><p>A &amp;&amp; B &amp;&amp; C &amp;&amp; D    取第一个假值或D</p><h3 id="短路逻辑-2">||短路逻辑</h3><p>A || B || C || D    取第一个真值或D</p><h2 id="循环语句">循环语句</h2><h3 id="while循环">while循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">while</span> (表达式) &#123;语句&#125;<br></code></pre></td></tr></table></figure><p>判断表达式为真，执行语句，并再次判断表达式的真假</p><p>判断表达式为假，执行后面的语句</p><h3 id="for循环">for循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">for</span> (语句<span class="hljs-number">1</span>;表达式<span class="hljs-number">2</span>;语句<span class="hljs-number">3</span>) &#123;<br>    循环体<br>&#125;<br></code></pre></td></tr></table></figure><p>先执行1，再判断2：如果2为真，则执行循环体，再执行3；如果2为假，则退出循环。</p><p>1、2、3部分都可以省略，但是会造成死循环。</p><p><strong>break</strong></p><p>退出所有循环</p><p><strong>continue</strong></p><p>退出这一次循环</p><p>再嵌套循环中，break和continue只影响最近的这一级循环</p><h2 id="Label标签">Label标签</h2><p>相当于定位符，可以用于跳转到程序的某一个位置</p><p>跳出循环：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">top</span>:<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>      <span class="hljs-keyword">if</span> (i === <span class="hljs-number">1</span> &amp;&amp; j === <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span> top;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;i=&#x27;</span> + i + <span class="hljs-string">&#x27;, j=&#x27;</span> + j);<br>    &#125;<br>  &#125;<br><span class="hljs-comment">// i=0, j=0</span><br><span class="hljs-comment">// i=0, j=1</span><br><span class="hljs-comment">// i=0, j=2</span><br><span class="hljs-comment">// i=1, j=0</span><br></code></pre></td></tr></table></figure><p>此处break直接跳出了top，而不是跳出了j循环</p><p>跳出代码块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">foo</span>: &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">break</span> foo;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;本行不会输出&#x27;</span>);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>此处break直接跳出了foo代码块</p><p>continue同理。</p><hr><p>一个代码块，其中有一个标签foo，foo的内容为1，而不是一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS内存浅解&amp;原型</title>
    <link href="/2022/06/07/JS%E5%86%85%E5%AD%98%E6%B5%85%E8%A7%A3/"/>
    <url>/2022/06/07/JS%E5%86%85%E5%AD%98%E6%B5%85%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1>JS内存浅解&amp;原型</h1><p>JS将JS引擎中的内存区分划分成：</p><ul class="lvl-0"><li class="lvl-2"><p>代码区：存放代码</p></li><li class="lvl-2"><p>不知道什么区：存放变量名</p></li><li class="lvl-2"><p>数据区：存放数据</p><ul class="lvl-2"><li class="lvl-4">Stack区：栈，顺序存储，连续存储</li><li class="lvl-4">Heap区：堆，随机存储，链接存储</li></ul></li><li class="lvl-2"><p>其他区域，在此不深究</p></li></ul><h2 id="Stack与Heap">Stack与Heap</h2><p>数据分为：</p><ul class="lvl-0"><li class="lvl-2"><p>非对象：数值、字符串、布尔，存放在Stack中</p></li><li class="lvl-2"><p>对象：其他，存放在Heap中</p></li></ul><h2 id="传值与传址：">传值与传址：</h2><p>b=a</p><p>=总是会把右边的东西复制到左边</p><p>如果a为非对象数据，则Stack区中存放的是a的值，那么<code>=</code>传值</p><p>如果a为对象数据，则Stack区中存放的是a对应数据所在Heap区中的地址，那么<code>=</code>传址，会出现篡改对象的情况</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;1&quot;</span></span><br>&lt; undefined<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">a</span><br>&lt; &#x27;1&#x27;<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-keyword">var</span> b = a</span><br>&lt; undefined<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">b</span><br>&lt; &#x27;1&#x27;<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">a = <span class="hljs-string">&quot;2&quot;</span></span><br>&lt; &#x27;2&#x27;<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">b</span><br>&lt; &#x27;1&#x27;<br><br>---------------<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-keyword">var</span> a = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;w&quot;</span>&#125;</span><br>&lt; undefined<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-keyword">var</span> b = a</span><br>&lt; undefined<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">a</span><br>&lt; &#123;name: &#x27;w&#x27;&#125;<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">b</span><br>&lt; &#123;name: &#x27;w&#x27;&#125;<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">b.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;1&quot;</span></span><br>&lt; &#x27;1&#x27;<br><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">a.<span class="hljs-property">name</span></span><br>&lt; &#x27;1&#x27;<br><br></code></pre></td></tr></table></figure><h2 id="prototype-与-prototype-chain">prototype 与 prototype chain</h2><p>几乎每个首字母大写的对象都有一个prototype属性，例如Object、Array、Function等。</p><p>例如：</p><p>Object.prototype中存储了Object对象的共同属性，所有Object对象都可以使用，因为所有的Object对象中都有一个__proto__的隐藏属性，对应着Object.prototype，这就是prototype chain</p><h3 id="prototype属性和-proto-属性区别">prototype属性和__proto__属性区别</h3><p>prototype属性和__proto__属性都只存储了prototype的地址，prototype属性挂靠在每个函数上，__proto__属性挂靠在每个新生成的对象上</p><h3 id="tips">tips</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt; <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> = &#123;&#125;<br>&lt; undefined<br><br>&gt; <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span> = &#123;&#125;<br>&lt; undefined<br><br>&gt; Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.toString</span> = <span class="hljs-string">&quot;1&quot;</span><br>&lt; <span class="hljs-string">&#x27;1&#x27;</span><br><br>&gt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.toString</span><br>&lt; <span class="hljs-string">&#x27;1&#x27;</span><br><br>&gt; <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.toString</span><br>&lt; <span class="hljs-string">&#x27;1&#x27;</span><br><br>&gt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.toString</span> = <span class="hljs-string">&quot;2&quot;</span><br>&lt; <span class="hljs-string">&#x27;2&#x27;</span><br><br>&gt; <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.toString</span><br>&lt; <span class="hljs-string">&#x27;1&#x27;</span><br><br><span class="hljs-comment">//**读取数据时才会通过__proto__，写入时不通过__proto__**//</span><br><br>&gt; <span class="hljs-selector-tag">a</span>.__proto__<span class="hljs-selector-class">.toString</span> = <span class="hljs-string">&quot;3&quot;</span><br>&lt; <span class="hljs-string">&#x27;3&#x27;</span><br><br>&gt; <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.toString</span><br>&lt; <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-comment">//**写完整就可以在对象中修改函数的prototype属性**//</span><br><br>&gt; Object<span class="hljs-selector-class">.prototype</span><span class="hljs-selector-class">.xxx</span> = <span class="hljs-string">&quot;111&quot;</span><br>&lt; <span class="hljs-string">&#x27;111&#x27;</span><br><br>&gt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.xxx</span><br>&lt; <span class="hljs-string">&#x27;111&#x27;</span><br><br><span class="hljs-comment">//**函数的prototype属性中可以新增**//</span><br><br>&gt; <span class="hljs-selector-tag">b</span>.__proto__<span class="hljs-selector-class">.yyy</span> = <span class="hljs-string">&quot;222&quot;</span><br>&lt; <span class="hljs-string">&#x27;222&#x27;</span><br><br>&gt; <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.yyy</span><br>&lt; <span class="hljs-string">&#x27;222&#x27;</span><br><br><span class="hljs-comment">//**函数的prototype属性中可以通过对象新增**//</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS初识</title>
    <link href="/2022/06/07/JS%E5%88%9D%E8%AF%86/"/>
    <url>/2022/06/07/JS%E5%88%9D%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1>JS初识</h1><p>JS=JavaScript</p><blockquote><p>（简化的）函数式编程+（简化的）面向对象编程</p></blockquote><h2 id="timeline">timeline</h2><ul class="lvl-0"><li class="lvl-2"><p>1995年：Brendan Eich为网景旗下浏览器开发了JS</p></li><li class="lvl-2"><p>1996年：微软发布IE3，支持JScript | JS语言标准确定ECMAScript</p></li><li class="lvl-2"><p>1997年：第一版ECMAScript发布</p></li><li class="lvl-2"><p>1999年：第三版ECMAScript发布，使用最广</p></li><li class="lvl-2"><p>1998年：网景开源Firefox</p></li><li class="lvl-2"><p>2001年：IE6发布</p></li><li class="lvl-2"><p>2004年：谷歌发布Gmail在线网页</p></li><li class="lvl-2"><p>2005年：IE7发布</p></li><li class="lvl-2"><p>2006年：jQuery发布</p></li><li class="lvl-2"><p>2008年：Chrome发布</p></li><li class="lvl-2"><p>2009年：ECMAScript第五版发布 | Node.js发布</p></li><li class="lvl-2"><p>2010年：iPhone4发布，移动市场兴起 | 国内大部分浏览器还是IE6 | npm发布 | Express.js发布 | 中国出现专门前端岗位</p></li><li class="lvl-2"><p>2015年：ECMAScript第六版发布</p></li><li class="lvl-2"><p>2016年：Chrome全球份额62% | 淘宝天猫不再支持IE6、7、8</p></li></ul><h2 id="学习JS">学习JS</h2><p>需要：</p><ul class="lvl-0"><li class="lvl-2"><p>逻辑能力</p></li><li class="lvl-2"><p>质疑自己的能力</p></li><li class="lvl-2"><p>抽象能力</p></li></ul><p>还需要：</p><ul class="lvl-0"><li class="lvl-2"><p>足够多的代码</p></li><li class="lvl-2"><p>足够多的概念</p></li><li class="lvl-2"><p>足够多的踩坑经验</p></li></ul><p><strong>把该领域内所有错误都犯完的人，就是专家！</strong></p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅析URL</title>
    <link href="/2022/06/06/%E6%B5%85%E6%9E%90URL/"/>
    <url>/2022/06/06/%E6%B5%85%E6%9E%90URL/</url>
    
    <content type="html"><![CDATA[<h1>浅析URL</h1><p>URL=Uniform Resource Locator</p><h2 id="URL的构成">URL的构成</h2><p>URL = 协议 + 域名/IP + 端口 + 路径 + 查询参数 + 锚点</p><h2 id="IP">IP</h2><p>IP=Internet Protocol</p><p>IP的作用：</p><ol><li class="lvl-3"><p>定位一台设备</p></li><li class="lvl-3"><p>封装数据报文，以跟其他设备交流</p></li></ol><p>127.0.0.1表示本机，也可用localhost表示</p><p>0.0.0.0不表示任何设备，约定俗成没有为什么</p><h3 id="ping-命令的使用">ping 命令的使用</h3><p>在命令行中使用<code>ping 域名/ip</code></p><h2 id="端口">端口</h2><p>可以理解为一台设备提供服务的窗口，不同的端口提供不同的服务，每台设备最多有65535个端口，其中0~1023号端口为系统端口，已经被定义，可在<a href="https://zh.wikipedia.org/wiki/TCP/UDP%E7%AB%AF%E5%8F%A3%E5%88%97%E8%A1%A8#0.E5.88.B01023.E5.8F.B7.E7.AB.AF.E5.8F.A3">WiKi</a>中查看。</p><h2 id="域名">域名</h2><p>域名，Domain Name，是对ip的别称，ip不利于记忆，域名应运而生，而DNS则将域名和ip联系起来</p><h3 id="域名的分级">域名的分级</h3><ol><li class="lvl-3"><p>顶级域名 .com .net等</p></li><li class="lvl-3"><p>二级域名（俗称一级域名） <a href="http://baidu.com">baidu.com</a> google.com等</p></li><li class="lvl-3"><p>三级域名（俗称二级域名） <a href="http://www.baidu.com">www.baidu.com</a> www.google.com等</p></li></ol><h2 id="DNS">DNS</h2><p>DNS=Domain Name System</p><p>DNS的作用：将域名与对应到ip上，但需要注意一个域名可以对应多个ip，一个ip也可以对应多个域名</p><h3 id="nslookup-命令的使用">nslookup 命令的使用</h3><p>在命令行中使用<code>nslookup 域名</code>即可查看该域名对应的IP地址，可以为多个</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习笔记</title>
    <link href="/2022/06/04/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/06/04/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1>CSS学习笔记</h1><p>CSS-Cascading Style Sheets</p><p>目前使用最广泛的是CSS2.1，现代版本为CSS3，仍在分模块升级种。</p><h2 id="border调试法">border调试法</h2><p>不加border就不要写代码！</p><h2 id="文档流-Normal-Flow">文档流 Normal Flow</h2><p>文档流动方向，从左至右，从上至下。</p><h3 id="流动方向">流动方向</h3><p>inline元素从左往右，到达最右边换行；</p><p>block元素从上往下，每个block元素独占一行；</p><p>inline-block元素从左往右。</p><h3 id="宽度">宽度</h3><p>inline元素宽度不可用width指定，为内部inline元素的和；</p><p>block元素宽度可用width指定；</p><p>inline-block元素兼具两者特点，我的理解是具有block属性但是像inline元素一样不必独占一行的元素。</p><h3 id="高度">高度</h3><p>inline高度由line-height间接确定；</p><p>block可以用height指定；</p><p>inline-block可以用height指定。</p><h3 id="overflow-溢出">overflow 溢出</h3><p>可设置是否显示滚动条。</p><p>overflow:auto | scroll | hidden | visible</p><h3 id="脱离文档流">脱离文档流</h3><p>float 和 position:absolute/fixed 可使元素脱离文档流</p><h2 id="盒模型">盒模型</h2><p>CSS盒模型将CSS中的元素整体视为一个盒子BOX，这个box由四个部分构成：</p><ul class="lvl-0"><li class="lvl-2"><p>margin</p></li><li class="lvl-2"><p>border</p></li><li class="lvl-2"><p>padding</p></li><li class="lvl-2"><p>content</p></li></ul><p>CSS盒模型分两种</p><ul class="lvl-0"><li class="lvl-2"><p>content-box</p></li><li class="lvl-2"><p>border-box</p></li></ul><h3 id="区别">区别</h3><p>区别主要在于width（或height）包含的范围。</p><ul class="lvl-0"><li class="lvl-2"><p>content-box：<code>width</code>只控制<code>content</code>部分的<code>width</code></p></li><li class="lvl-2"></li><li class="lvl-2"><p>border-box：<code>width</code>控制<code>border+padding+content</code>三部分的<code>width</code></p></li></ul><p>由区别可知，若未指定<code>border</code>和<code>padding</code>，则两种盒模型并无区别。</p><p><strong>通常情况下我们都会使用<code>border-box</code>因为该盒模型更好用。</strong></p><p>因为<code>margin</code>会合并，对元素大小的影响比较小，而<code>border</code>和<code>padding</code>的大小已经包含在<code>width</code>中，因此<code>border-box</code>能够更直观的控制元素的大小，同时更符合border调试法的使用习惯。</p><h3 id="margin合并">margin合并</h3><p>父子margin合并，兄弟margin合并</p><p>阻止合并的方法：</p><ul class="lvl-0"><li class="lvl-2"><p>父子合并: padding/border</p></li><li class="lvl-2"><p>父子合并: overflow: hidden</p></li><li class="lvl-2"><p>父子合并: display: flex</p></li><li class="lvl-2"><p>兄弟合并: inline-block</p></li></ul><h2 id="布局">布局</h2><p>布局指二维平面的布局，注意与“定位”做区分。</p><h3 id="float布局">float布局</h3><p>主要用于IE，现在用的很少</p><p>步骤：</p><ol><li class="lvl-3"><p>子元素加上float: left | right</p></li><li class="lvl-3"><p>子元素加上width</p></li><li class="lvl-3"><p>父元素的class中加入.clearfix</p></li></ol><p>.clearfix代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><br><span class="hljs-selector-class">.clearfix</span>&#123;<br>    <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>:block;<br>    <span class="hljs-attribute">clear</span>:both;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>IE 6/7 存在双倍margin bug，解决方法如下：</p><ol><li class="lvl-3"><p>margin减半</p></li><li class="lvl-3"><p>display:inline-block</p></li></ol><h3 id="flex布局">flex布局</h3><p>主流布局</p><p>需要记住的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><br><span class="hljs-attribute">display</span>:flex<br>flex-direction: row | column<br>flex-wrap: wrap<br>justify-content: center | space-between<br>align-items: center<br><br></code></pre></td></tr></table></figure><p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">flex - css tricks</a></p><h3 id="grid布局">grid布局</h3><p>无敌强大面向未来，有兼容性问题</p><p>适合不规则布局</p><p>默认将页面分为了3行5列的表格，通过行线和竖线来定位区域</p><p><a href="https://css-tricks.com/snippets/css/complete-guide-grid/">grid - css tricks</a></p><h2 id="定位">定位</h2><p>垂直于屏幕</p><p>div的分层</p><ul class="lvl-0"><li class="lvl-2"><p>inline 元素</p></li><li class="lvl-2"><p>float 元素</p></li><li class="lvl-2"><p>块级子元素</p></li><li class="lvl-2"><p>border</p></li><li class="lvl-2"><p>background</p></li></ul><h3 id="position属性">position属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><br><span class="hljs-attribute">position</span>: static        默认<br><br>position: relative      相对定位，float但不脱离文档流<br><br>position: absolute      绝对定位，基准是祖先里的非static<br><br>position: fixed         固定定位，基准是viewport<br><br>position: sticky        会粘在viewport顶部<br><br></code></pre></td></tr></table></figure><p>写了absolute要补relative</p><p>写了absolute或fixed要补top和left</p><p>sticky兼容性很差，比如在缩放时会有bug</p><h3 id="z-index">z-index</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-attribute">z-index</span>: auto       不创建新层叠上下文<br>z-index: 一个数字<br><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><br><span class="hljs-selector-class">.demo</span>&#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>，-<span class="hljs-number">50%</span>)；<br>&#125;<br><br>&lt;!-- 绝对定位元素居中 --&gt;<br><br></code></pre></td></tr></table></figure><h3 id="层叠上下文">层叠上下文</h3><p>每个层叠上下文是一个新的作用域，该作用域内的z-index与外界无关，同一个作用域内的z-index才能比较</p><p>z-index / flex / opacity / transform 会创建一个新的层叠上下文</p><h2 id="CSS动画">CSS动画</h2><h3 id="浏览器渲染过程">浏览器渲染过程</h3><ol><li class="lvl-3"><p>根据HTML构建HTML树 (DOM)</p></li><li class="lvl-3"><p>根据CSS构建CSS树（CSSOM）</p></li><li class="lvl-3"><p>将两棵树合并成一颗渲染树（render tree)</p></li><li class="lvl-3"><p>Layout</p></li><li class="lvl-3"><p>Paint</p></li><li class="lvl-3"><p>Composite</p></li></ol><h3 id="三种更新方式">三种更新方式</h3><ol><li class="lvl-3"><p>JS/CSS &gt; Style &gt; Layout &gt; Paint &gt; Composite</p></li><li class="lvl-3"><p>JS/CSS &gt; Style &gt; Paint &gt; Composite</p></li><li class="lvl-3"><p>JS/CSS &gt; Style &gt; Composite</p></li></ol><p>div.remove() 触发第一种更新方式</p><p>改变背景颜色 触发第二种更新方式</p><p>transform 触发第三种更新方式</p><p><a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count">CSS动画优化</a></p><h3 id="transform">transform</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform">transform语法</a></p><p>常用代码：</p><ul class="lvl-0"><li class="lvl-2"><p>transform: translate ()</p></li><li class="lvl-2"><p>transform: scale ()</p></li><li class="lvl-2"><p>transform: rotate ()</p></li><li class="lvl-2"><p>transform: skew ()</p></li></ul><p>配合transition使用：<br><code>transition: all 1s ease 0.5s;</code></p><h3 id="transition">transition</h3><p>给动画补充中间帧</p><p>transition:属性名 时长 过渡方式 延迟</p><h3 id="animation">animation</h3><p>步骤：</p><ol><li class="lvl-3"><p>声明关键帧</p></li><li class="lvl-3"><p>添加动画</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-id">#demo</span><span class="hljs-selector-class">.start</span>&#123;<br>  <span class="hljs-attribute">animation</span>: xxx <span class="hljs-number">1.5s</span>;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> xxx &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: none;<br>  &#125;<br>  <span class="hljs-number">66.66%</span>&#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">200px</span>);<br>  &#125;<br>  <span class="hljs-number">100%</span>&#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">200px</span>) <span class="hljs-built_in">translateY</span>(<span class="hljs-number">100px</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-comment">/* @keyframes duration | timing-function | delay |</span><br><span class="hljs-comment">   iteration-count | direction | fill-mode | play-state | name */</span><br><span class="hljs-attribute">animation</span>: <span class="hljs-number">3s</span> ease-in <span class="hljs-number">1s</span> <span class="hljs-number">2</span> reverse both paused slidein;<br><br><span class="hljs-attribute">animation</span>: 时长 | 过渡方式 | 延迟 | 次数 | 方向 | 填充模式 | 是否暂停 | 动画名；<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS盒模型</title>
    <link href="/2022/06/01/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/06/01/CSS%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1>CSS盒模型</h1><p>CSS盒模型将CSS中的元素整体视为一个盒子BOX，这个box由四个部分构成：</p><ul class="lvl-0"><li class="lvl-2"><p>margin</p></li><li class="lvl-2"><p>border</p></li><li class="lvl-2"><p>padding</p></li><li class="lvl-2"><p>content</p></li></ul><p>CSS盒模型分两种</p><ul class="lvl-0"><li class="lvl-2"><p>content-box</p></li><li class="lvl-2"><p>border-box</p></li></ul><h2 id="区别">区别</h2><p>区别主要在于width（或height）包含的范围。</p><ul class="lvl-0"><li class="lvl-2"><p>content-box：<code>width</code>只控制<code>content</code>部分的<code>width</code></p></li><li class="lvl-2"><p>border-box：<code>width</code>控制<code>border+padding+content</code>三部分的<code>width</code></p></li></ul><p>由区别可知，若未指定<code>border</code>和<code>padding</code>，则两种盒模型并无区别。</p><p><strong>通常情况下我们都会使用<code>border-box</code>因为该盒模型更好用。</strong><br>因为<code>margin</code>会合并，对元素大小的影响比较小，而<code>border</code>和<code>padding</code>的大小已经包含在<code>width</code>中，因此<code>border-box</code>能够更直观的控制元素的大小，同时更符合border调试法的使用习惯。</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML常用标签</title>
    <link href="/2022/05/30/HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"/>
    <url>/2022/05/30/HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h1>HTML常用标签</h1><h2 id="a标签的用法">a标签的用法</h2><h3 id="含义及作用">含义及作用</h3><p><u>a</u>nchor 锚点常用于各种跳转，跳转到外部页面、内部锚点、邮箱或电话等</p><h3 id="属性">属性</h3><ul class="lvl-0"><li class="lvl-2"><p>href</p></li><li class="lvl-2"><p>target</p></li><li class="lvl-2"><p>download 并不是所有浏览器都支持，因此暂时没有学习</p></li><li class="lvl-2"><p>rel=noopener 涉及其他未学内容，暂时没有深入学习</p></li></ul><h3 id="href">href</h3><p><u>h</u>yper <u>ref</u>rence  超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>取值可以为</p><p><strong>网址</strong></p><ol><li class="lvl-3"><p><a href="http://xxx.com">http://xxx.com</a></p></li><li class="lvl-3"><p><a href="https://xxx.com">https://xxx.com</a></p></li><li class="lvl-3"><p><a href="//xxx.com">//xxx.com</a></p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>主要使用第三种方式，会继承当前页面，以防出现无法访问的情况</p></li></ul><p><strong>路径</strong></p><ol><li class="lvl-3"><p>a/b/c 或/a/b/c</p></li><li class="lvl-3"><p>index.html 或 ./index.html</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>前者会在当前目录下寻找目标，后者会在根目录下寻找目标</p></li></ul><p><strong>id</strong></p><ul class="lvl-0"><li class="lvl-2"><p><code>href=#xxx</code> 会跳转至id为xxx的元素处</p></li></ul><p><strong>伪协议</strong></p><ol><li class="lvl-3"><p>JavaScript:代码;</p></li><li class="lvl-3"><p>mailto:邮箱</p></li><li class="lvl-3"><p>tel:电话号码</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p><strong>特别说明：<code>href=&quot;javascript:;&quot;</code>会创造一个没有任何作用的链接，既不会刷新页面也不会滚动页面，链接也不会变色</strong></p></li></ul><h3 id="target">target</h3><p>设定链接打开的位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>取值</p><ol><li class="lvl-3"><p><code>_self</code> 默认值，在当前层级/页面打开，如在iframe中则是在当前的iframe中打开</p></li><li class="lvl-3"><p><code>_blank</code> 在新页面（新标签页）打开</p></li><li class="lvl-3"><p><code>_top</code> 在当前页面的最顶级打开，即在当前页面中打开，通常用于iframe中</p></li><li class="lvl-3"><p><code>_parent</code> 在当前层级的上一级打开，通常用于iframe中</p></li><li class="lvl-3"><p>window的name 如果已有该name的window存在，则在该window中打开，否则创建一个名为name的window并在其中打开</p></li><li class="lvl-3"><p>iframe的name 在名为name的iframe中打开</p></li></ol><h2 id="table标签的用法">table标签的用法</h2><h3 id="相关标签">相关标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span> <br>    <span class="hljs-comment">&lt;!-- 表头部部分，即最开始 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- table row，代表一行 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- table head，该标签中的内容会加粗，表示“表头” --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>小红<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>小明<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>小颖<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 表的主体部分 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- table row，代表一行，这里表示表主体的第一行 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>数学<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 这里的th是列中的表头 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>61<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- table data，表中的数据 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>90<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- table row，代表一行，这里表示表主体的第二行 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>语文<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>61<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>90<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- table row，代表一行，这里表示表主体的第三行 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>英语<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>61<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>90<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 表的底部 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>总分<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>161<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>190<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>122<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>PS：<code>&lt;thead&gt;</code> 和 <code>&lt;tfoot&gt;</code> 并非必要标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;thead&gt;</span><br><span class="hljs-comment">    &lt;tr&gt;</span><br><span class="hljs-comment">      &lt;th&gt;&lt;/th&gt;</span><br><span class="hljs-comment">      &lt;th&gt;小xiao红&lt;/th&gt;</span><br><span class="hljs-comment">      &lt;th&gt;小明&lt;/th&gt;</span><br><span class="hljs-comment">      &lt;th&gt;小颖&lt;/th&gt;</span><br><span class="hljs-comment">    &lt;/tr&gt;</span><br><span class="hljs-comment">  &lt;/thead&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>小红<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>小明<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>小颖<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>数学<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>61<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>90<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>语文<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>61<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>90<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>英语<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>61<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>90<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>总分<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>161<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>190<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>122<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;tfoot&gt;</span><br><span class="hljs-comment">    &lt;tr&gt;</span><br><span class="hljs-comment">      &lt;th&gt;总分&lt;/th&gt;</span><br><span class="hljs-comment">      &lt;td&gt;161&lt;/td&gt;</span><br><span class="hljs-comment">      &lt;td&gt;190&lt;/td&gt;</span><br><span class="hljs-comment">      &lt;td&gt;122&lt;/td&gt;</span><br><span class="hljs-comment">    &lt;/tr&gt;</span><br><span class="hljs-comment">  &lt;/tfoot&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以实现同样的效果。</p><p>PS：我认为 <code>&lt;th&gt;</code> 只是给数据加入了一个<strong>加粗居中</strong>的格式。</p><h3 id="相关样式">相关样式</h3><p>table-layout</p><ol><li class="lvl-3"><p><code>table-layout= auto</code> 自动调整单元格宽度，每列相同</p></li><li class="lvl-3"><p><code>table-layout= fixed</code> 根据单元格数据的长度，调整单元格宽度</p></li></ol><p>border-collapse</p><ul class="lvl-0"><li class="lvl-2"><p><code>border-collapse: collapse</code> 单元格之间没有空隙</p></li></ul><p>border-spacing</p><ul class="lvl-0"><li class="lvl-2"><p><code>border-spacing: 1px</code> 单元格之间有1px的空隙</p></li></ul><p>一般连用，用于重设表格样式:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">table-layout</span>: auto;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="language-css">    <span class="hljs-attribute">border-spacing</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">td</span>,</span><br><span class="language-css">  <span class="hljs-selector-tag">th</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid blue;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="img标签">img标签</h2><h3 id="作用">作用</h3><p>发出get请求，展示一张图片</p><h3 id="属性-2">属性</h3><ol><li class="lvl-3"><p>alt=“” 图片加载失败后的文字</p></li><li class="lvl-3"><p>height 图片高度，若只限定了height，则width会自动按原始纵横比调整</p></li><li class="lvl-3"><p>width 图片宽度，若只限定了width，则height会自动按原始纵横比调整</p></li><li class="lvl-3"><p>src=“” 图片链接</p></li></ol><h3 id="事件">事件</h3><ol><li class="lvl-3"><p>onload 用于监听，表示图片载入成功</p></li><li class="lvl-3"><p>onerror 用于监听，表示图片载入失败</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;dog.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;一只狗子&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  xxx.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;图片加载成功&quot;</span>);</span><br><span class="language-javascript">  &#125;;</span><br><span class="language-javascript">  xxx.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;图片加载失败&quot;</span>);</span><br><span class="language-javascript">    xxx.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;/404.png&quot;</span>;</span><br><span class="language-javascript">  &#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="响应式">响应式</h3><p><code>max-width: 100%</code> 使图片的width都为当前设备展示范围width的100%</p><h2 id="form标签">form标签</h2><p>form 表单发送GET或POST请求，然后刷新页面<br><strong>每一个form中必须有一个type=submit，不论是input还是button，才能出发submit事件</strong><br><strong>form中的input要有name</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/yyy&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;on&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="属性-3">属性</h3><ol><li class="lvl-3"><p>action=“” 链接到某个地址，暂时不涉及，未学习</p></li><li class="lvl-3"><p>autocomplete=“on” 自动填充功能，配合<code>&lt;input&gt;</code>功能使用</p></li><li class="lvl-3"><p>method=GET 或 POST，没有学习有啥区别</p></li><li class="lvl-3"><p>target=“” 和a标签类似</p></li></ol><h3 id="事件-2">事件</h3><p>onsubmit 监听用，提交表单时</p><h2 id="input标签">input标签</h2><p>让用户输入内容，此节的学习中，主要与form标签配合使用<br><strong>一般不监听input的click事件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/yyy&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;on&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- 自动填充开启时，将会显示关于username的填充内容 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">required</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- required 是验证器功能，意思是必须要填。 password是说这个输入框是输入密码的样式，不管输入啥都是·或者* --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;color&quot;</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- 提供一个颜色选择器 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span>男<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span>女<br>  <span class="hljs-comment">&lt;!-- 单选框，name相同的会自动列为一组 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> /&gt;</span>唱<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> /&gt;</span>跳<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> /&gt;</span>rap<br>  <span class="hljs-comment">&lt;!-- 复选框，name相同的会自动列为一组 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- 上传单个文件 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- 上传多个文件 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  看不见我吧：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- 一个隐藏的输入框，可在不给用户察觉的情况下填入js获取的信息 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;嘻嘻&quot;</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- value可以指定submit按钮的显示文字 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>呵呵<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- button标签可以嵌入其他标签，例如&lt;strong&gt;，甚至&lt;img&gt;等标签 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="事件-3">事件</h3><ul class="lvl-0"><li class="lvl-2"><p>onchange 文本框的内容发生变化</p></li><li class="lvl-2"><p>onfocus 文本框获得焦点</p></li><li class="lvl-2"><p>onblur 文本框失去焦点</p></li></ul><h2 id="其他输入标签">其他输入标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/yyy&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;on&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;resize: none; width: 50%; height: 130px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Select<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>Mon<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Tue<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>select + option</strong><br>select为用户提供了一个下拉列表，提供了一些项供用户选择。Mon、Tue为用户所见，1、2为返回给计算机的值。 “” 和 Select 提供了一个缺省值。</p><p><strong>textarea</strong><br>为用户提供了一个支持多行的、输入框大小可变的inputbox，可以通过style来调整格式，<code>resize: none;</code> 禁止用户调整输入框大小。</p><h2 id="补充内容">补充内容</h2><p><strong>input和button两者区别：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">`<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span>`<br><br>`<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>`<br></code></pre></td></tr></table></figure><p>都可以在form标签中触发submit事件，但是input最多只能通过value自定义提交按钮的文本，但是button可以通过其他标签改变按钮显示的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">`<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>`<br><br>`<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>`<br></code></pre></td></tr></table></figure><p><strong>关于table中的th</strong><br>我认为 <code>&lt;th&gt;</code> 只是给数据加入了一个<strong>加粗居中</strong>的格式。</p><p><strong>a标签中使用伪协议创建一个没有任何作用的链接</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>一个没有任何作用的链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个链接不会刷新页面，不会滚动页面，不会报错，默认情况下点击之后不会变颜色</p><p>经过我实验之后发现，不一定要<code>javascript:;</code>，使用其他的也行:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;meiyong:&quot;</span>&gt;</span>meiyong<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><em>注意点：不能用数字开头；结尾要以<code>:</code>或者<code>:;</code>结尾</em></p><p>控制台报错：</p><blockquote><p>Failed to launch ‘meiyong:’ because the scheme does not have a registered handler.</p></blockquote><p>但是实现了类似的功能。</p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML入门笔记1</title>
    <link href="/2022/05/27/HTML%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/"/>
    <url>/2022/05/27/HTML%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h3 id="HTML是由谁发明的">HTML是由谁发明的</h3><p>HTML由李爵士发明</p><h3 id="HTML起手应该写什么">HTML起手应该写什么</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的网页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 该段代码可在VScode中输入!后按Tab自动生成 --&gt;</span><br></code></pre></td></tr></table></figure><hr><ol><li class="lvl-3"><p>HTML起始应该由<code>&lt;!DOCTYPE html&gt;</code>开头，注意大小写</p></li><li class="lvl-3"><p><code>&lt;html lang=&quot;zh-CN&quot;&gt; &lt;/html&gt;</code>告诉浏览器该网页是中文网页</p></li><li class="lvl-3"><p>该段代码不在网页中显示</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>我的网页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p><code>&lt;body&gt; &lt;/body&gt;</code>该段代码为内容主体</p></li></ol><h3 id="常用的表章节的标签有哪些，分别是什么意思">常用的表章节的标签有哪些，分别是什么意思</h3><ul class="lvl-0"><li class="lvl-2"><p>h1-h6 表示一级标题指六级标题</p></li><li class="lvl-2"><p>section 表示一个章节</p></li><li class="lvl-2"><p>article 表示文章</p></li><li class="lvl-2"><p>p 表示paragraph段落</p></li><li class="lvl-2"><p>header 表示头部（顶层广告）</p></li><li class="lvl-2"><p>footer 表示底部（底部广告）</p></li><li class="lvl-2"><p>main 表示主要内容</p></li><li class="lvl-2"><p>aside 表示旁支内容</p></li><li class="lvl-2"><p>div 表示划分</p></li></ul><h3 id="全局属性有哪些">全局属性有哪些</h3><ul class="lvl-0"><li class="lvl-2"><p>class 相当于给标签打上了一个标签，可用空格分开class=“tag1 tag2…”</p></li><li class="lvl-2"><p>contenteditable 表示该元素内容可编辑，可用于实现文本编辑器</p></li><li class="lvl-2"><p>hidden 隐藏该元素</p></li><li class="lvl-2"><p>id 表示全局唯一元素名，可在JS中直接引用，与class功能类似，但是细节较多，能避免使用则避免使用id=“”</p></li><li class="lvl-2"><p>style 给该元素加上特定的格式</p></li><li class="lvl-2"><p>tabindex 告诉该元素响应tab键的顺序。0表示最后响应，-1表示不响应，tabindex值可以不连续</p></li><li class="lvl-2"><p>title 鼠标悬浮在该元素上时显示的内容</p></li></ul><h3 id="常用的内容标签有哪些，分别是什么意思">常用的内容标签有哪些，分别是什么意思</h3><ul class="lvl-0"><li class="lvl-2"><p>ol+li 有序列表及列表项，有1234编号的 ordered list &amp; list item</p></li><li class="lvl-2"><p>ul+li 无序列表及列表项，无编号 unordered list &amp; list item</p></li><li class="lvl-2"><p>dl+dt+dd 带描述的列表 description list &amp; term &amp; data</p></li><li class="lvl-2"><p>pre 可以让其中的内容展现出多个空格或换行 preview</p></li><li class="lvl-2"><p>hr 水平分割线</p></li><li class="lvl-2"><p>br 使该行内容换行 break</p></li><li class="lvl-2"><p>a 插入链接 anchor</p></li><li class="lvl-2"><p>em 强调（语气），默认格式下被强调内容变成斜体 emphasis</p></li><li class="lvl-2"><p>strong 强调（语义），默认格式下被强调内容变为粗体 strong</p></li><li class="lvl-2"><p>code 被包裹内容以代码形式呈现</p></li><li class="lvl-2"><p>q 引用，没变化 quote</p></li><li class="lvl-2"><p>blockquote 块引用，默认格式下被引用内容会换行并缩进</p></li></ul><h3 id="小技巧：让style显示在网页中并可以编辑">小技巧：让style显示在网页中并可以编辑</h3><p>目的：方便调试</p><p>代码实现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">contenteditable</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        style&#123;<span class="hljs-attribute">display</span>: block; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;&#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.middle</span>&#123;&#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.bordered</span>&#123;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以在网页内容中展示出<code>&lt;style contenteditable&gt;&lt;/style&gt;</code>中间的所有内容，并且这些内容可以更改，同时网内内容也随之更改。</p><p>使<code>&lt;style&gt;&lt;/style&gt;</code>显示出来的代码为<code>style&#123;display: block; border: 1px solid red;&#125;</code>，同时要注意该段代码必须写在<code>&lt;body&gt;&lt;/body&gt;</code>内，若在<code>&lt;head&gt;&lt;/head&gt;</code>内则无法显示。</p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM</title>
    <link href="/2022/04/20/VIM/"/>
    <url>/2022/04/20/VIM/</url>
    
    <content type="html"><![CDATA[<h1>VIM 学习</h1><h2 id="配置VIM">配置VIM</h2><p>在 VSCode 中绑定jk按键为ESC：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-attr">&quot;vim.insertModeKeyBindings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;before&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;j&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;k&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;after&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;&lt;Esc&gt;&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h2 id="Normal-模式">Normal 模式</h2><p>H ←<br>J ↑<br>K ↓<br>L →</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
